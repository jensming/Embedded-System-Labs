Disassembly Listing for Lab6
Generated From:
C:/Users/James/Desktop/ECE13/jensming/Lab06/Lab6.X/dist/default/debug/Lab6.X.debug.elf
Feb 9, 2022 11:41:36 PM

---  c:/users/james/desktop/ece13/jensming/lab06/lab6.x/oleddriver.c  -----------------------------------
1:                   #include <stdint.h>
2:                   
3:                   //CSE13E Support Library
4:                   #include "BOARD.h"
5:                   
6:                   #include <xc.h>
7:                   
8:                   
9:                   #include "OledDriver.h"
10:                  
11:                  #define SPI_CHANNEL SPI_CHANNEL2
12:                  
13:                  /**
14:                   * Constants for the various command values that can be sent to the OLED driver.
15:                   */
16:                  typedef enum {
17:                      OLED_COMMAND_SET_DISPLAY_LOWER_COLUMN_0 = 0x00,
18:                      OLED_COMMAND_SET_DISPLAY_UPPER_COLUMN_0 = 0x10,
19:                      OLED_COMMAND_SET_PAGE = 0x22,
20:                      OLED_COMMAND_SET_CHARGE_PUMP = 0x8D,
21:                      OLED_COMMAND_SET_SEGMENT_REMAP = 0xA1,
22:                      OLED_COMMAND_DISPLAY_NORMAL = 0xA6,
23:                      OLED_COMMAND_DISPLAY_INVERTED = 0xA7,
24:                      OLED_COMMAND_DISPLAY_OFF = 0xAE,
25:                      OLED_COMMAND_DISPLAY_ON = 0xAF,
26:                      OLED_COMMAND_SET_PRECHARGE_PERIOD = 0xD9,
27:                      OLED_COMMAND_SET_COM_PINS_CONFIG = 0xDA
28:                  } OledCommand;
29:                  
30:                  /**
31:                   * Store constants for all settings used with the OLED driver.
32:                   */
33:                  typedef enum {
34:                      OLED_SETTING_ENABLE_CHARGE_PUMP = 0x14,
35:                      OLED_SETTING_MAXIMUM_PRECHARGE = 0xF1,
36:                      OLED_SETTING_SEQUENTIAL_COM_NON_INTERLEAVED = 0x20,
37:                      OLED_SETTING_REVERSE_ROW_ORDERING = 0xC8
38:                  } OledSetting;
39:                  
40:                  #define OLED_DRIVER_PAGES 4
41:                  
42:                  /**
43:                   * This array is the off-screen frame buffer used for rendering.
44:                   * It isn't possible to read back from the OLED display device,
45:                   * so display data is rendered into this off-screen buffer and then
46:                   * copied to the display.
47:                   * @note Any time this is updated, An `OledDriverUpdateDisplay()` call must be performed.
48:                   */
49:                  uint8_t rgbOledBmp[OLED_DRIVER_BUFFER_SIZE];
50:                  
51:                  // Function prototypes for internal-use functions.
52:                  void OledPutBuffer(int size, uint8_t *buffer);
53:                  uint8_t Spi2Put(uint8_t bVal);
54:                  void DelayMs(unsigned int msec);
55:                  
56:                  /**
57:                   * Initialize the PIC32MX to communicate with the UG-23832HSWEG04 OLED display through the SSD1306
58:                   * display controller.
59:                   */
60:                  void OledHostInit(void)
61:                  {
62:                      // Open SPI2 as a master in 1-byte mode running at 10MHz.
63:                      // The peripheral bus is running at 10Mhz, and we want a 10MHz SPI bus clock.
64:                      int pbClkDiv = 20000000 / 10000000;
65:                      SPI2CON = 0; // reset and clear the SPI config register
66:                      SPI2CONbits.MSTEN = 1; // We are a Master
67:                      SPI2CONbits.CKP = 1; // Idle is high level
68:                      SPI2BRG = (pbClkDiv >> 1) - 1; // set the baud rate to the correct setting.
69:                      SPI2CONbits.ON = 1; // turn it on
70:                  
71:                  
72:                      // Set RF4-6 as digital outputs for controlling data/command selection, logic power, and display
73:                      // power. They're all initialized high beforehand, because that disables power.
74:                      OLED_DRIVER_CONTROLLER_POWER_PORT = 1;
75:                      OLED_DRIVER_OLED_POWER_PORT = 1;
76:                      OLED_DRIVER_MODE_PORT = 1;
77:                  
78:                      OLED_DRIVER_MODE_TRIS = 0;
79:                      OLED_DRIVER_CONTROLLER_POWER_TRIS = 0;
80:                      OLED_DRIVER_OLED_POWER_TRIS = 0;
81:                  
82:                      // Set RG9 as a digital output, tied to the reset pin on the SG1306 controller, low => reset.
83:                      OLED_DRIVER_RESET_PORT = 1;
84:                      OLED_DRIVER_RESET_TRIS = 0;
85:                  }
86:                  
87:                  /**
88:                   * Initialize the OLED display and driver circuitry.
89:                   */
90:                  void OledDriverInitDisplay(void)
91:                  {
92:                      // Set the OLED into command mode.
93:                      OLED_DRIVER_MODE_PORT = 0;
94:                  
95:                      // Power on the display logic, waiting 1ms for it to start up.
96:                      OLED_DRIVER_CONTROLLER_POWER_PORT = 0;
97:                      DelayMs(1);
98:                  
99:                      // Turn off the display.
100:                     Spi2Put(OLED_COMMAND_DISPLAY_OFF);
101:                 
102:                     // Toggle the reset pin.
103:                     OLED_DRIVER_RESET_PORT = 0;
104:                     DelayMs(1);
105:                     OLED_DRIVER_RESET_PORT = 1;
106:                 
107:                     // Enable the charge pump and
108:                     Spi2Put(OLED_COMMAND_SET_CHARGE_PUMP);
109:                     Spi2Put(OLED_SETTING_ENABLE_CHARGE_PUMP);
110:                     Spi2Put(OLED_COMMAND_SET_PRECHARGE_PERIOD);
111:                     Spi2Put(OLED_SETTING_MAXIMUM_PRECHARGE);
112:                 
113:                     // Power on the display, giving it 100ms to start up.
114:                     OLED_DRIVER_OLED_POWER_PORT = 0;
115:                 
116:                     DelayMs(100);
117:                 
118:                     // Invert row numbering so that (0,0) is upper-right.
119:                     Spi2Put(OLED_COMMAND_SET_SEGMENT_REMAP);
120:                     Spi2Put(OLED_SETTING_REVERSE_ROW_ORDERING);
121:                 
122:                     // Set sequential COM configuration with non-interleaved memory.
123:                     Spi2Put(OLED_COMMAND_SET_COM_PINS_CONFIG);
124:                     Spi2Put(OLED_SETTING_SEQUENTIAL_COM_NON_INTERLEAVED);
125:                 
126:                     // And turn on the display.
127:                     Spi2Put(OLED_COMMAND_DISPLAY_ON);
128:                 }
129:                 
130:                 /**
131:                  * Set the LCD to display pixel values as the opposite of how they are actually stored in NVRAM. So
132:                  * pixels set to black (0) will display as white, and pixels set to white (1) will display as black.
133:                  */
134:                 void OledDriverSetDisplayInverted(void)
135:                 {
136:                     // Set the OLED into command mode.
137:                     OLED_DRIVER_MODE_PORT = 0;
138:                 
139:                     Spi2Put(OLED_COMMAND_DISPLAY_INVERTED);
140:                 }
141:                 
142:                 /**
143:                  * Set the LCD to display pixel values normally, where a 1 indicates white and a 0 indicates black.
144:                  * This is the default operating mode of the LCD and the mode it starts up in.
145:                  */
146:                 void OledDriverSetDisplayNormal(void)
147:                 {
148:                     // Set the OLED into command mode.
149:                     OLED_DRIVER_MODE_PORT = 0;
150:                 
151:                     Spi2Put(OLED_COMMAND_DISPLAY_NORMAL);
152:                 }
153:                 
154:                 /**
155:                  * Disable the Oled display before power-off. This means powering it up, sending the display off
156:                  * command, and finally disabling Vbat.
157:                  */
158:                 void OledDriverDisableDisplay(void)
159:                 {
160:                     // Set the OLED into command mode.
161:                     OLED_DRIVER_MODE_PORT = 0;
162:                 
163:                     // Power on the OLED display logic, waiting for 1ms for it to start up.
164:                     OLED_DRIVER_CONTROLLER_POWER_PORT = 0;
165:                     DelayMs(1);
166:                 
167:                     // Send the display off command.
168:                     Spi2Put(OLED_COMMAND_DISPLAY_OFF);
169:                 
170:                     // And finally power off the display, giving it 100ms to do so.
171:                     OLED_DRIVER_CONTROLLER_POWER_PORT = 1;
172:                     DelayMs(100);
173:                 }
174:                 
175:                 /**
176:                  * Update the display with the contents of rgb0ledBmp.
177:                  */
178:                 void OledDriverUpdateDisplay(void)
179:                 {
180:                     uint8_t *pb = rgbOledBmp;
181:                     int page;
182:                     for (page = 0; page < OLED_DRIVER_PAGES; page++) {
183:                         // Set the LCD into command mode.
184:                         //        PORTClearBits(OLED_DRIVER_MODE_PORT, OLED_DRIVER_MODE_BIT);
185:                         OLED_DRIVER_MODE_PORT = 0;
186:                 
187:                         // Set the desired page.
188:                         Spi2Put(OLED_COMMAND_SET_PAGE);
189:                         Spi2Put(page);
190:                 
191:                         // Set the starting column back to the origin.
192:                         Spi2Put(OLED_COMMAND_SET_DISPLAY_LOWER_COLUMN_0);
193:                         Spi2Put(OLED_COMMAND_SET_DISPLAY_UPPER_COLUMN_0);
194:                 
195:                         // Return the LCD to data mode.
196:                         //        PORTSetBits(OLED_DRIVER_MODE_PORT, OLED_DRIVER_MODE_BIT);
197:                         OLED_DRIVER_MODE_PORT = 1;
198:                 
199:                         // Finally write this entire column to the OLED.
200:                         //		SpiChnPutS()
201:                         OledPutBuffer(OLED_DRIVER_PIXEL_COLUMNS, pb);
202:                         pb += OLED_DRIVER_PIXEL_COLUMNS;
203:                     }
204:                 }
205:                 
206:                 /**
207:                  * Write an entire array of uint8_ts over SPI2.
208:                  * @param size The number of uint8_ts to write.
209:                  * @param buffer The start of the uint8_t array to write.
210:                  */
211:                 void OledPutBuffer(int size, uint8_t *buffer)
212:                 {
213:                     uint8_t bTmp = 0;
214:                     int i = bTmp; //non ideal way of forcing Wall error to go away
215:                     for (i = 0; i < size; ++i) {
216:                         // Make sure the transmitter is ready
217:                         while (SPI2STATbits.SPITBE == 0);
218:                 
219:                         // Then transmit the desired uint8_t.
220:                         SPI2BUF = *buffer++;
221:                 
222:                         // And wait for a response. It's ignored, but we read it out of the buffer anyways to keep
223:                         // the buffer clear.
224:                         while (SPI2STATbits.SPIRBF == 0);
225:                         bTmp = SPI2BUF;
226:                     }
227:                 }
228:                 
229:                 /**
230:                  * Performs a blocking write of a single uint8_t over SPI2. The response uint8_t is returned.
231:                  * @param bVal The uint8_t to write over SPI.
232:                  * @return The response to the transmission.
233:                  */
234:                 uint8_t Spi2Put(uint8_t bVal)
235:                 {
236:                     // Make sure the transmitter is ready
237:                     while (SPI2STATbits.SPITBE == 0);
238:                 
239:                     // Then transmit the desired uint8_t.
240:                     SPI2BUF = bVal;
241:                 
242:                     // And wait for a response.
243:                     while (SPI2STATbits.SPIRBF == 0);
244:                 
245:                     // Before returning it.
246:                     uint8_t bRx = SPI2BUF;
247:                     return bRx;
248:                 }
249:                 
250:                 /**
251:                  * Block the processor for the desired number of milliseconds.
252:                  * @note Assumes processor frequency of 80Mhz.
253:                  * @param msec The number of milliseconds to block for.
254:                  */
255:                 void DelayMs(uint32_t msec)
256:                 {
257:                     uint32_t tWait, tStart, tCurrent;
258:                 
259:                     // Calculate the amount of wait time in terms of core processor frequency.
260:                     tWait = (80000000L / 2000) * msec;
261:                     asm volatile("mfc0   %0, $9" : "=r"(tStart));
262:                     tCurrent = tStart;
263:                     while ((tCurrent - tStart) < tWait) {
264:                         asm volatile("mfc0   %0, $9" : "=r"(tCurrent));
265:                     }// wait for the time to pass
266:                 }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D001DF0  27BDFFF0   ADDIU SP, SP, -16
9D001DF4  AFBE000C   SW FP, 12(SP)
9D001DF8  03A0F025   OR FP, SP, ZERO
9D001DFC  24020002   ADDIU V0, ZERO, 2
9D001E00  AFC20000   SW V0, 0(FP)
9D001E04  3C02BF80   LUI V0, -16512
9D001E08  AC405A00   SW ZERO, 23040(V0)
9D001E0C  3C03BF80   LUI V1, -16512
9D001E10  8C625A00   LW V0, 23040(V1)
9D001E14  24040001   ADDIU A0, ZERO, 1
9D001E18  7C822944   INS V0, A0, 5, 1
9D001E1C  AC625A00   SW V0, 23040(V1)
9D001E20  3C03BF80   LUI V1, -16512
9D001E24  8C625A00   LW V0, 23040(V1)
9D001E28  24040001   ADDIU A0, ZERO, 1
9D001E2C  7C823184   INS V0, A0, 6, 1
9D001E30  AC625A00   SW V0, 23040(V1)
9D001E34  8FC20000   LW V0, 0(FP)
9D001E38  00021043   SRA V0, V0, 1
9D001E3C  2442FFFF   ADDIU V0, V0, -1
9D001E40  00401825   OR V1, V0, ZERO
9D001E44  3C02BF80   LUI V0, -16512
9D001E48  AC435A30   SW V1, 23088(V0)
9D001E4C  3C03BF80   LUI V1, -16512
9D001E50  8C625A00   LW V0, 23040(V1)
9D001E54  24040001   ADDIU A0, ZERO, 1
9D001E58  7C827BC4   INS V0, A0, 15, 1
9D001E5C  AC625A00   SW V0, 23040(V1)
9D001E60  3C03BF88   LUI V1, -16504
9D001E64  90626150   LBU V0, 24912(V1)
9D001E68  24040001   ADDIU A0, ZERO, 1
9D001E6C  7C823184   INS V0, A0, 6, 1
9D001E70  A0626150   SB V0, 24912(V1)
9D001E74  3C03BF88   LUI V1, -16504
9D001E78  90626150   LBU V0, 24912(V1)
9D001E7C  24040001   ADDIU A0, ZERO, 1
9D001E80  7C822944   INS V0, A0, 5, 1
9D001E84  A0626150   SB V0, 24912(V1)
9D001E88  3C03BF88   LUI V1, -16504
9D001E8C  90626150   LBU V0, 24912(V1)
9D001E90  24040001   ADDIU A0, ZERO, 1
9D001E94  7C822104   INS V0, A0, 4, 1
9D001E98  A0626150   SB V0, 24912(V1)
9D001E9C  3C03BF88   LUI V1, -16504
9D001EA0  90626140   LBU V0, 24896(V1)
9D001EA4  7C022104   INS V0, ZERO, 4, 1
9D001EA8  A0626140   SB V0, 24896(V1)
9D001EAC  3C03BF88   LUI V1, -16504
9D001EB0  90626140   LBU V0, 24896(V1)
9D001EB4  7C023184   INS V0, ZERO, 6, 1
9D001EB8  A0626140   SB V0, 24896(V1)
9D001EBC  3C03BF88   LUI V1, -16504
9D001EC0  90626140   LBU V0, 24896(V1)
9D001EC4  7C022944   INS V0, ZERO, 5, 1
9D001EC8  A0626140   SB V0, 24896(V1)
9D001ECC  3C03BF88   LUI V1, -16504
9D001ED0  94626190   LHU V0, 24976(V1)
9D001ED4  24040001   ADDIU A0, ZERO, 1
9D001ED8  7C824A44   INS V0, A0, 9, 1
9D001EDC  A4626190   SH V0, 24976(V1)
9D001EE0  3C03BF88   LUI V1, -16504
9D001EE4  94626180   LHU V0, 24960(V1)
9D001EE8  7C024A44   INS V0, ZERO, 9, 1
9D001EEC  A4626180   SH V0, 24960(V1)
9D001EF0  00000000   NOP
9D001EF4  03C0E825   OR SP, FP, ZERO
9D001EF8  8FBE000C   LW FP, 12(SP)
9D001EFC  27BD0010   ADDIU SP, SP, 16
9D001F00  03E00008   JR RA
9D001F04  00000000   NOP
9D001F08  27BDFFE8   ADDIU SP, SP, -24
9D001F0C  AFBF0014   SW RA, 20(SP)
9D001F10  AFBE0010   SW FP, 16(SP)
9D001F14  03A0F025   OR FP, SP, ZERO
9D001F18  3C03BF88   LUI V1, -16504
9D001F1C  90626150   LBU V0, 24912(V1)
9D001F20  7C022104   INS V0, ZERO, 4, 1
9D001F24  A0626150   SB V0, 24912(V1)
9D001F28  3C03BF88   LUI V1, -16504
9D001F2C  90626150   LBU V0, 24912(V1)
9D001F30  7C023184   INS V0, ZERO, 6, 1
9D001F34  A0626150   SB V0, 24912(V1)
9D001F38  24040001   ADDIU A0, ZERO, 1
9D001F3C  0F4008D4   JAL DelayMs
9D001F40  00000000   NOP
9D001F44  240400AE   ADDIU A0, ZERO, 174
9D001F48  0F4008B5   JAL Spi2Put
9D001F4C  00000000   NOP
9D001F50  3C03BF88   LUI V1, -16504
9D001F54  94626190   LHU V0, 24976(V1)
9D001F58  7C024A44   INS V0, ZERO, 9, 1
9D001F5C  A4626190   SH V0, 24976(V1)
9D001F60  24040001   ADDIU A0, ZERO, 1
9D001F64  0F4008D4   JAL DelayMs
9D001F68  00000000   NOP
9D001F6C  3C03BF88   LUI V1, -16504
9D001F70  94626190   LHU V0, 24976(V1)
9D001F74  24040001   ADDIU A0, ZERO, 1
9D001F78  7C824A44   INS V0, A0, 9, 1
9D001F7C  A4626190   SH V0, 24976(V1)
9D001F80  2404008D   ADDIU A0, ZERO, 141
9D001F84  0F4008B5   JAL Spi2Put
9D001F88  00000000   NOP
9D001F8C  24040014   ADDIU A0, ZERO, 20
9D001F90  0F4008B5   JAL Spi2Put
9D001F94  00000000   NOP
9D001F98  240400D9   ADDIU A0, ZERO, 217
9D001F9C  0F4008B5   JAL Spi2Put
9D001FA0  00000000   NOP
9D001FA4  240400F1   ADDIU A0, ZERO, 241
9D001FA8  0F4008B5   JAL Spi2Put
9D001FAC  00000000   NOP
9D001FB0  3C03BF88   LUI V1, -16504
9D001FB4  90626150   LBU V0, 24912(V1)
9D001FB8  7C022944   INS V0, ZERO, 5, 1
9D001FBC  A0626150   SB V0, 24912(V1)
9D001FC0  24040064   ADDIU A0, ZERO, 100
9D001FC4  0F4008D4   JAL DelayMs
9D001FC8  00000000   NOP
9D001FCC  240400A1   ADDIU A0, ZERO, 161
9D001FD0  0F4008B5   JAL Spi2Put
9D001FD4  00000000   NOP
9D001FD8  240400C8   ADDIU A0, ZERO, 200
9D001FDC  0F4008B5   JAL Spi2Put
9D001FE0  00000000   NOP
9D001FE4  240400DA   ADDIU A0, ZERO, 218
9D001FE8  0F4008B5   JAL Spi2Put
9D001FEC  00000000   NOP
9D001FF0  24040020   ADDIU A0, ZERO, 32
9D001FF4  0F4008B5   JAL Spi2Put
9D001FF8  00000000   NOP
9D001FFC  240400AF   ADDIU A0, ZERO, 175
9D002000  0F4008B5   JAL Spi2Put
9D002004  00000000   NOP
9D002008  00000000   NOP
9D00200C  03C0E825   OR SP, FP, ZERO
9D002010  8FBF0014   LW RA, 20(SP)
9D002014  8FBE0010   LW FP, 16(SP)
9D002018  27BD0018   ADDIU SP, SP, 24
9D00201C  03E00008   JR RA
9D002020  00000000   NOP
9D002024  27BDFFE8   ADDIU SP, SP, -24
9D002028  AFBF0014   SW RA, 20(SP)
9D00202C  AFBE0010   SW FP, 16(SP)
9D002030  03A0F025   OR FP, SP, ZERO
9D002034  3C03BF88   LUI V1, -16504
9D002038  90626150   LBU V0, 24912(V1)
9D00203C  7C022104   INS V0, ZERO, 4, 1
9D002040  A0626150   SB V0, 24912(V1)
9D002044  240400A7   ADDIU A0, ZERO, 167
9D002048  0F4008B5   JAL Spi2Put
9D00204C  00000000   NOP
9D002050  00000000   NOP
9D002054  03C0E825   OR SP, FP, ZERO
9D002058  8FBF0014   LW RA, 20(SP)
9D00205C  8FBE0010   LW FP, 16(SP)
9D002060  27BD0018   ADDIU SP, SP, 24
9D002064  03E00008   JR RA
9D002068  00000000   NOP
9D00206C  27BDFFE8   ADDIU SP, SP, -24
9D002070  AFBF0014   SW RA, 20(SP)
9D002074  AFBE0010   SW FP, 16(SP)
9D002078  03A0F025   OR FP, SP, ZERO
9D00207C  3C03BF88   LUI V1, -16504
9D002080  90626150   LBU V0, 24912(V1)
9D002084  7C022104   INS V0, ZERO, 4, 1
9D002088  A0626150   SB V0, 24912(V1)
9D00208C  240400A6   ADDIU A0, ZERO, 166
9D002090  0F4008B5   JAL Spi2Put
9D002094  00000000   NOP
9D002098  00000000   NOP
9D00209C  03C0E825   OR SP, FP, ZERO
9D0020A0  8FBF0014   LW RA, 20(SP)
9D0020A4  8FBE0010   LW FP, 16(SP)
9D0020A8  27BD0018   ADDIU SP, SP, 24
9D0020AC  03E00008   JR RA
9D0020B0  00000000   NOP
9D0020B4  27BDFFE8   ADDIU SP, SP, -24
9D0020B8  AFBF0014   SW RA, 20(SP)
9D0020BC  AFBE0010   SW FP, 16(SP)
9D0020C0  03A0F025   OR FP, SP, ZERO
9D0020C4  3C03BF88   LUI V1, -16504
9D0020C8  90626150   LBU V0, 24912(V1)
9D0020CC  7C022104   INS V0, ZERO, 4, 1
9D0020D0  A0626150   SB V0, 24912(V1)
9D0020D4  3C03BF88   LUI V1, -16504
9D0020D8  90626150   LBU V0, 24912(V1)
9D0020DC  7C023184   INS V0, ZERO, 6, 1
9D0020E0  A0626150   SB V0, 24912(V1)
9D0020E4  24040001   ADDIU A0, ZERO, 1
9D0020E8  0F4008D4   JAL DelayMs
9D0020EC  00000000   NOP
9D0020F0  240400AE   ADDIU A0, ZERO, 174
9D0020F4  0F4008B5   JAL Spi2Put
9D0020F8  00000000   NOP
9D0020FC  3C03BF88   LUI V1, -16504
9D002100  90626150   LBU V0, 24912(V1)
9D002104  24040001   ADDIU A0, ZERO, 1
9D002108  7C823184   INS V0, A0, 6, 1
9D00210C  A0626150   SB V0, 24912(V1)
9D002110  24040064   ADDIU A0, ZERO, 100
9D002114  0F4008D4   JAL DelayMs
9D002118  00000000   NOP
9D00211C  00000000   NOP
9D002120  03C0E825   OR SP, FP, ZERO
9D002124  8FBF0014   LW RA, 20(SP)
9D002128  8FBE0010   LW FP, 16(SP)
9D00212C  27BD0018   ADDIU SP, SP, 24
9D002130  03E00008   JR RA
9D002134  00000000   NOP
9D002138  27BDFFE0   ADDIU SP, SP, -32
9D00213C  AFBF001C   SW RA, 28(SP)
9D002140  AFBE0018   SW FP, 24(SP)
9D002144  03A0F025   OR FP, SP, ZERO
9D002148  3C02A000   LUI V0, -24576
9D00214C  24420208   ADDIU V0, V0, 520
9D002150  AFC20010   SW V0, 16(FP)
9D002154  AFC00014   SW ZERO, 20(FP)
9D002158  10000022   BEQ ZERO, ZERO, 0x9D0021E4
9D00215C  00000000   NOP
9D002160  3C03BF88   LUI V1, -16504
9D002164  90626150   LBU V0, 24912(V1)
9D002168  7C022104   INS V0, ZERO, 4, 1
9D00216C  A0626150   SB V0, 24912(V1)
9D002170  24040022   ADDIU A0, ZERO, 34
9D002174  0F4008B5   JAL Spi2Put
9D002178  00000000   NOP
9D00217C  8FC20014   LW V0, 20(FP)
9D002180  304200FF   ANDI V0, V0, 255
9D002184  00402025   OR A0, V0, ZERO
9D002188  0F4008B5   JAL Spi2Put
9D00218C  00000000   NOP
9D002190  00002025   OR A0, ZERO, ZERO
9D002194  0F4008B5   JAL Spi2Put
9D002198  00000000   NOP
9D00219C  24040010   ADDIU A0, ZERO, 16
9D0021A0  0F4008B5   JAL Spi2Put
9D0021A4  00000000   NOP
9D0021A8  3C03BF88   LUI V1, -16504
9D0021AC  90626150   LBU V0, 24912(V1)
9D0021B0  24040001   ADDIU A0, ZERO, 1
9D0021B4  7C822104   INS V0, A0, 4, 1
9D0021B8  A0626150   SB V0, 24912(V1)
9D0021BC  8FC50010   LW A1, 16(FP)
9D0021C0  24040080   ADDIU A0, ZERO, 128
9D0021C4  0F400884   JAL OledPutBuffer
9D0021C8  00000000   NOP
9D0021CC  8FC20010   LW V0, 16(FP)
9D0021D0  24420080   ADDIU V0, V0, 128
9D0021D4  AFC20010   SW V0, 16(FP)
9D0021D8  8FC20014   LW V0, 20(FP)
9D0021DC  24420001   ADDIU V0, V0, 1
9D0021E0  AFC20014   SW V0, 20(FP)
9D0021E4  8FC20014   LW V0, 20(FP)
9D0021E8  28420004   SLTI V0, V0, 4
9D0021EC  1440FFDC   BNE V0, ZERO, 0x9D002160
9D0021F0  00000000   NOP
9D0021F4  00000000   NOP
9D0021F8  03C0E825   OR SP, FP, ZERO
9D0021FC  8FBF001C   LW RA, 28(SP)
9D002200  8FBE0018   LW FP, 24(SP)
9D002204  27BD0020   ADDIU SP, SP, 32
9D002208  03E00008   JR RA
9D00220C  00000000   NOP
9D002210  27BDFFF0   ADDIU SP, SP, -16
9D002214  AFBE000C   SW FP, 12(SP)
9D002218  03A0F025   OR FP, SP, ZERO
9D00221C  AFC40010   SW A0, 16(FP)
9D002220  AFC50014   SW A1, 20(FP)
9D002224  A3C00004   SB ZERO, 4(FP)
9D002228  93C20004   LBU V0, 4(FP)
9D00222C  AFC20000   SW V0, 0(FP)
9D002230  AFC00000   SW ZERO, 0(FP)
9D002234  1000001C   BEQ ZERO, ZERO, 0x9D0022A8
9D002238  00000000   NOP
9D00223C  00000000   NOP
9D002240  3C02BF80   LUI V0, -16512
9D002244  8C425A10   LW V0, 23056(V0)
9D002248  7C4200C0   EXT V0, V0, 3, 1
9D00224C  304200FF   ANDI V0, V0, 255
9D002250  1040FFFB   BEQ V0, ZERO, 0x9D002240
9D002254  00000000   NOP
9D002258  8FC20014   LW V0, 20(FP)
9D00225C  24430001   ADDIU V1, V0, 1
9D002260  AFC30014   SW V1, 20(FP)
9D002264  90420000   LBU V0, 0(V0)
9D002268  00401825   OR V1, V0, ZERO
9D00226C  3C02BF80   LUI V0, -16512
9D002270  AC435A20   SW V1, 23072(V0)
9D002274  00000000   NOP
9D002278  3C02BF80   LUI V0, -16512
9D00227C  8C425A10   LW V0, 23056(V0)
9D002280  7C420000   EXT V0, V0, 0, 1
9D002284  304200FF   ANDI V0, V0, 255
9D002288  1040FFFB   BEQ V0, ZERO, 0x9D002278
9D00228C  00000000   NOP
9D002290  3C02BF80   LUI V0, -16512
9D002294  8C425A20   LW V0, 23072(V0)
9D002298  A3C20004   SB V0, 4(FP)
9D00229C  8FC20000   LW V0, 0(FP)
9D0022A0  24420001   ADDIU V0, V0, 1
9D0022A4  AFC20000   SW V0, 0(FP)
9D0022A8  8FC30000   LW V1, 0(FP)
9D0022AC  8FC20010   LW V0, 16(FP)
9D0022B0  0062102A   SLT V0, V1, V0
9D0022B4  1440FFE1   BNE V0, ZERO, 0x9D00223C
9D0022B8  00000000   NOP
9D0022BC  00000000   NOP
9D0022C0  03C0E825   OR SP, FP, ZERO
9D0022C4  8FBE000C   LW FP, 12(SP)
9D0022C8  27BD0010   ADDIU SP, SP, 16
9D0022CC  03E00008   JR RA
9D0022D0  00000000   NOP
9D0022D4  27BDFFF0   ADDIU SP, SP, -16
9D0022D8  AFBE000C   SW FP, 12(SP)
9D0022DC  03A0F025   OR FP, SP, ZERO
9D0022E0  00801025   OR V0, A0, ZERO
9D0022E4  A3C20010   SB V0, 16(FP)
9D0022E8  00000000   NOP
9D0022EC  3C02BF80   LUI V0, -16512
9D0022F0  8C425A10   LW V0, 23056(V0)
9D0022F4  7C4200C0   EXT V0, V0, 3, 1
9D0022F8  304200FF   ANDI V0, V0, 255
9D0022FC  1040FFFB   BEQ V0, ZERO, 0x9D0022EC
9D002300  00000000   NOP
9D002304  93C30010   LBU V1, 16(FP)
9D002308  3C02BF80   LUI V0, -16512
9D00230C  AC435A20   SW V1, 23072(V0)
9D002310  00000000   NOP
9D002314  3C02BF80   LUI V0, -16512
9D002318  8C425A10   LW V0, 23056(V0)
9D00231C  7C420000   EXT V0, V0, 0, 1
9D002320  304200FF   ANDI V0, V0, 255
9D002324  1040FFFB   BEQ V0, ZERO, 0x9D002314
9D002328  00000000   NOP
9D00232C  3C02BF80   LUI V0, -16512
9D002330  8C425A20   LW V0, 23072(V0)
9D002334  A3C20000   SB V0, 0(FP)
9D002338  93C20000   LBU V0, 0(FP)
9D00233C  03C0E825   OR SP, FP, ZERO
9D002340  8FBE000C   LW FP, 12(SP)
9D002344  27BD0010   ADDIU SP, SP, 16
9D002348  03E00008   JR RA
9D00234C  00000000   NOP
9D002350  27BDFFE8   ADDIU SP, SP, -24
9D002354  AFBE0014   SW FP, 20(SP)
9D002358  03A0F025   OR FP, SP, ZERO
9D00235C  AFC40018   SW A0, 24(FP)
9D002360  8FC30018   LW V1, 24(FP)
9D002364  00601025   OR V0, V1, ZERO
9D002368  00021080   SLL V0, V0, 2
9D00236C  00431021   ADDU V0, V0, V1
9D002370  000210C0   SLL V0, V0, 3
9D002374  00431023   SUBU V0, V0, V1
9D002378  00021100   SLL V0, V0, 4
9D00237C  00431021   ADDU V0, V0, V1
9D002380  00021180   SLL V0, V0, 6
9D002384  AFC20004   SW V0, 4(FP)
9D002388  40024800   MFC0 V0, Count
9D00238C  AFC20008   SW V0, 8(FP)
9D002390  8FC20008   LW V0, 8(FP)
9D002394  AFC20000   SW V0, 0(FP)
9D002398  10000003   BEQ ZERO, ZERO, 0x9D0023A8
9D00239C  00000000   NOP
9D0023A0  40024800   MFC0 V0, Count
9D0023A4  AFC20000   SW V0, 0(FP)
9D0023A8  8FC30000   LW V1, 0(FP)
9D0023AC  8FC20008   LW V0, 8(FP)
9D0023B0  00621023   SUBU V0, V1, V0
9D0023B4  8FC30004   LW V1, 4(FP)
9D0023B8  0043102B   SLTU V0, V0, V1
9D0023BC  1440FFF8   BNE V0, ZERO, 0x9D0023A0
9D0023C0  00000000   NOP
9D0023C4  00000000   NOP
9D0023C8  03C0E825   OR SP, FP, ZERO
9D0023CC  8FBE0014   LW FP, 20(SP)
9D0023D0  27BD0018   ADDIU SP, SP, 24
9D0023D4  03E00008   JR RA
9D0023D8  00000000   NOP
---  c:/users/james/desktop/ece13/jensming/lab06/lab6.x/oled.c  -----------------------------------------
1:                   #include <stddef.h>
2:                   
3:                   
4:                   #ifdef __MPLAB_DEBUGGER_SIMULATOR
5:                   #include <stdio.h>
6:                   #endif
7:                   
8:                   #include "OledDriver.h"
9:                   #include "Oled.h"
10:                  #include "Ascii.h"
11:                  
12:                  // in simulator we do nothing with the hardware, printing instead
13:                  
14:                  void OledInit(void)
15:                  {
16:                  #ifndef __MPLAB_DEBUGGER_SIMULATOR
17:                      // First initialize the PIC32 to be able to talk over SPI to the OLED.
18:                      OledHostInit();
19:                  
20:                      // Now send initialization commands to the OLED.
21:                      OledDriverInitDisplay();
22:                  
23:                      // Clear the frame buffer by filling it with black pixels.
24:                      OledClear(OLED_COLOR_BLACK);
25:                  
26:                      // Finally update the screen, triggering a write of all black pixels to the screen.
27:                      OledUpdate();
28:                  #endif
29:                  }
30:                  
31:                  void OledSetPixel(int x, int y, OledColor color)
32:                  {
33:                  #ifndef __MPLAB_DEBUGGER_SIMULATOR
34:                      // Check for valid inputs before doing anything.
35:                      if (x >= OLED_DRIVER_PIXEL_COLUMNS || y >= OLED_DRIVER_PIXEL_ROWS || x < 0 || y < 0) {
36:                          return;
37:                      }
38:                  
39:                      // Map the x/y coordinates into a byte/bit index.
40:                      unsigned int index = ((y & 0xFFF8) << 4) + x;
41:                      unsigned int shift = y & 0x0007;
42:                  
43:                      // Now set the pixel to the proper color, doing nothing if an invalid color was specified.
44:                      if (color == OLED_COLOR_WHITE) {
45:                          rgbOledBmp[index] = rgbOledBmp[index] | (1 << shift);
46:                      } else if (color == OLED_COLOR_BLACK) {
47:                          rgbOledBmp[index] = rgbOledBmp[index] & ~(1 << shift);
48:                      } else {
49:                          return;
50:                      }
51:                  #endif
52:                  }
53:                  
54:                  int OledGetPixel(int x, int y)
55:                  {
56:                  #ifndef __MPLAB_DEBUGGER_SIMULATOR
57:                      // Check for valid inputs before doing anything.
58:                      if (x >= OLED_DRIVER_PIXEL_COLUMNS || y >= OLED_DRIVER_PIXEL_ROWS || x < 0 || y < 0) {
59:                          return OLED_COLOR_BLACK;
60:                      }
61:                  
62:                      // Map the x/y coordinates into a byte/bit index.
63:                      unsigned int index = ((y & 0xFFF8) << 4) + x;
64:                      unsigned int shift = y & 0x0007;
65:                  
66:                      // Now return the desired bit.
67:                      return (rgbOledBmp[index] >> shift) & 0x01;
68:                  #else
69:                      return OLED_COLOR_BLACK;
70:                  #endif
71:                  }
72:                  
73:                  //in simulator this is the same as putchar
74:                  
75:                  uint8_t OledDrawChar(int x, int y, char c)
76:                  {
77:                  #ifndef __MPLAB_DEBUGGER_SIMULATOR
78:                      if (x <= OLED_DRIVER_PIXEL_COLUMNS - ASCII_FONT_WIDTH && y <= OLED_DRIVER_PIXEL_ROWS - ASCII_FONT_HEIGHT) {
79:                          // We need to convert our signed char into an unsigned value to index into the ascii[] array.
80:                          int charIndex = (int) (unsigned char) c;
81:                  
82:                          // Now first determine the columns and rows of the OLED bits that need to be modified
83:                          int rowMin, rowMax, colMin, colMax;
84:                          rowMin = y / ASCII_FONT_HEIGHT;
85:                          int rowY = y % ASCII_FONT_HEIGHT;
86:                          rowMax = (y + ASCII_FONT_HEIGHT) / OLED_DRIVER_BUFFER_LINE_HEIGHT;
87:                          colMin = x;
88:                          colMax = x + ASCII_FONT_WIDTH;
89:                          {
90:                              // Generate a positive mask for where in the column the new symbol will be drawn.
91:                              int colMask = ((1 << ASCII_FONT_HEIGHT) - 1) << rowY;
92:                              int j;
93:                              for (j = 0; j < colMax - colMin; ++j) {
94:                                  int oledCol = colMin + j;
95:                                  uint8_t newCharCol = rgbOledBmp[rowMin * OLED_DRIVER_PIXEL_COLUMNS + oledCol] & ~colMask;
96:                                  // Make sure we always grab from the top part of the character.
97:                                  newCharCol |= (ascii[charIndex][j] & (colMask >> rowY)) << rowY;
98:                                  rgbOledBmp[rowMin * OLED_DRIVER_PIXEL_COLUMNS + oledCol] = newCharCol;
99:                              }
100:                         }
101:                         if (rowMax > rowMin) {
102:                             // Generate a positive mask for where in the column the new symbol will be drawn.
103:                             // Since we need the lower portion of the symbol, we recalculate its height.
104:                             int colMask = ((1 << ASCII_FONT_HEIGHT) - 1) >> (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY);
105:                             int j;
106:                             for (j = 0; j < colMax - colMin; ++j) {
107:                                 int oledCol = colMin + j;
108:                                 uint8_t newCharCol = rgbOledBmp[rowMax * OLED_DRIVER_PIXEL_COLUMNS + oledCol] & ~colMask;
109:                                 // Make sure we grab the proper part of the character from the font.
110:                                 newCharCol |= (ascii[charIndex][j] & (colMask << (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY))) >>
111:                                         (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY);
112:                                 rgbOledBmp[rowMax * OLED_DRIVER_PIXEL_COLUMNS + oledCol] = newCharCol;
113:                             }
114:                         }
115:                     }
116:                 #else
117:                     putchar(c);
118:                 #endif
119:                 
120:                     return FALSE;
121:                 }
122:                 
123:                 void OledDrawString(const char *string)
124:                 {
125:                 #ifndef __MPLAB_DEBUGGER_SIMULATOR
126:                     if (string == NULL) {
127:                         return;
128:                     }
129:                 
130:                     // Track the current line number we're in on the OLED. Valid values are [0, OLED_NUM_LINES).
131:                     int line = 0;
132:                 
133:                     // Track the current character we're writing to the OLED. Valid values are
134:                     // [0, OLED_CHARS_PER_LINE).
135:                     int column = 0;
136:                 
137:                     // Run through all characters. The maximum length can be the number of lines times the number
138:                     // of characters per line + three newlines.
139:                     int i;
140:                     for (i = 0; string[i] != '\0' && i < (OLED_NUM_LINES * OLED_CHARS_PER_LINE + 3); ++i) {
141:                         // Move the cursor to the next line if a newline character is encountered. This allows for
142:                         // early line ending.
143:                         if (string[i] == '\n') {
144:                             ++line;
145:                             column = 0;
146:                             continue;
147:                         } else {
148:                             // Reset to the start of the next line if we've hit the character limit of this line
149:                             // without seeing a newline.
150:                             if (column == OLED_CHARS_PER_LINE) {
151:                                 ++line;
152:                                 column = 0;
153:                             }
154:                 
155:                             // Now if we're < OLED_NUM_LINES and < OLED_CHARS_PER_LINE we can proceed. The second
156:                             // check is implicitly handled by the above if-statement that forces a newline after
157:                             // encountering a full line of characters.
158:                             if (line == OLED_NUM_LINES) {
159:                                 break;
160:                             }
161:                 
162:                             // Finally at this point, we can write characters to the OLED.
163:                             OledDrawChar(column * ASCII_FONT_WIDTH, line * ASCII_FONT_HEIGHT, string[i]);
164:                             ++column;
165:                         }
166:                     }
167:                 #else
168:                     printf("%s",string);
169:                 #endif
170:                 }
171:                 
172:                 void OledClear(OledColor p)
173:                 {
174:                     int i;
175:                     for (i = 0; i < OLED_DRIVER_BUFFER_SIZE; i++) {
176:                         if (p == OLED_COLOR_WHITE) {
177:                             rgbOledBmp[i] = 0xFF;
178:                         } else {
179:                             rgbOledBmp[i] = 0;
180:                         }
181:                     }
182:                 }
183:                 
184:                 void OledSetDisplayInverted(void)
185:                 {
186:                 #ifndef __MPLAB_DEBUGGER_SIMULATOR
187:                     OledDriverSetDisplayInverted();
188:                 #endif
189:                 }
190:                 
191:                 void OledSetDisplayNormal(void)
192:                 {
193:                 #ifndef __MPLAB_DEBUGGER_SIMULATOR
194:                     OledDriverSetDisplayNormal();
195:                 #endif
196:                 }
197:                 
198:                 void OledOn(void)
199:                 {
200:                 #ifndef __MPLAB_DEBUGGER_SIMULATOR
201:                     OledDriverInitDisplay();
202:                 #endif
203:                 }
204:                 
205:                 void OledOff(void)
206:                 {
207:                 #ifndef __MPLAB_DEBUGGER_SIMULATOR
208:                     OledDriverDisableDisplay();
209:                 #endif
210:                 }
211:                 
212:                 void OledUpdate(void)
213:                 {
214:                 #ifndef __MPLAB_DEBUGGER_SIMULATOR
215:                     OledDriverUpdateDisplay();
216:                 #endif
217:                 }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0008CC  27BDFFE8   ADDIU SP, SP, -24
9D0008D0  AFBF0014   SW RA, 20(SP)
9D0008D4  AFBE0010   SW FP, 16(SP)
9D0008D8  03A0F025   OR FP, SP, ZERO
9D0008DC  0F40077C   JAL OledHostInit
9D0008E0  00000000   NOP
9D0008E4  0F4007C2   JAL OledDriverInitDisplay
9D0008E8  00000000   NOP
9D0008EC  00002025   OR A0, ZERO, ZERO
9D0008F0  0F4003E7   JAL OledClear
9D0008F4  00000000   NOP
9D0008F8  0F400440   JAL OledUpdate
9D0008FC  00000000   NOP
9D000900  00000000   NOP
9D000904  03C0E825   OR SP, FP, ZERO
9D000908  8FBF0014   LW RA, 20(SP)
9D00090C  8FBE0010   LW FP, 16(SP)
9D000910  27BD0018   ADDIU SP, SP, 24
9D000914  03E00008   JR RA
9D000918  00000000   NOP
9D00091C  27BDFFF0   ADDIU SP, SP, -16
9D000920  AFBE000C   SW FP, 12(SP)
9D000924  03A0F025   OR FP, SP, ZERO
9D000928  AFC40010   SW A0, 16(FP)
9D00092C  AFC50014   SW A1, 20(FP)
9D000930  AFC60018   SW A2, 24(FP)
9D000934  8FC20010   LW V0, 16(FP)
9D000938  28420080   SLTI V0, V0, 128
9D00093C  10400047   BEQ V0, ZERO, 0x9D000A5C
9D000940  00000000   NOP
9D000944  8FC20014   LW V0, 20(FP)
9D000948  28420020   SLTI V0, V0, 32
9D00094C  10400043   BEQ V0, ZERO, 0x9D000A5C
9D000950  00000000   NOP
9D000954  8FC20010   LW V0, 16(FP)
9D000958  04400040   BLTZ V0, 0x9D000A5C
9D00095C  00000000   NOP
9D000960  8FC20014   LW V0, 20(FP)
9D000964  0440003D   BLTZ V0, 0x9D000A5C
9D000968  00000000   NOP
9D00096C  8FC20014   LW V0, 20(FP)
9D000970  00021900   SLL V1, V0, 4
9D000974  3C02000F   LUI V0, 15
9D000978  3442FF80   ORI V0, V0, -128
9D00097C  00621824   AND V1, V1, V0
9D000980  8FC20010   LW V0, 16(FP)
9D000984  00621021   ADDU V0, V1, V0
9D000988  AFC20000   SW V0, 0(FP)
9D00098C  8FC20014   LW V0, 20(FP)
9D000990  30420007   ANDI V0, V0, 7
9D000994  AFC20004   SW V0, 4(FP)
9D000998  8FC30018   LW V1, 24(FP)
9D00099C  24020001   ADDIU V0, ZERO, 1
9D0009A0  14620015   BNE V1, V0, 0x9D0009F8
9D0009A4  00000000   NOP
9D0009A8  3C02A000   LUI V0, -24576
9D0009AC  24430208   ADDIU V1, V0, 520
9D0009B0  8FC20000   LW V0, 0(FP)
9D0009B4  00621021   ADDU V0, V1, V0
9D0009B8  90420000   LBU V0, 0(V0)
9D0009BC  7C021C20   SEB V1, V0
9D0009C0  24040001   ADDIU A0, ZERO, 1
9D0009C4  8FC20004   LW V0, 4(FP)
9D0009C8  00441004   SLLV V0, A0, V0
9D0009CC  7C021420   SEB V0, V0
9D0009D0  00621025   OR V0, V1, V0
9D0009D4  7C021420   SEB V0, V0
9D0009D8  304300FF   ANDI V1, V0, 255
9D0009DC  3C02A000   LUI V0, -24576
9D0009E0  24440208   ADDIU A0, V0, 520
9D0009E4  8FC20000   LW V0, 0(FP)
9D0009E8  00821021   ADDU V0, A0, V0
9D0009EC  A0430000   SB V1, 0(V0)
9D0009F0  1000001E   BEQ ZERO, ZERO, 0x9D000A6C
9D0009F4  00000000   NOP
9D0009F8  8FC20018   LW V0, 24(FP)
9D0009FC  1440001A   BNE V0, ZERO, 0x9D000A68
9D000A00  00000000   NOP
9D000A04  3C02A000   LUI V0, -24576
9D000A08  24430208   ADDIU V1, V0, 520
9D000A0C  8FC20000   LW V0, 0(FP)
9D000A10  00621021   ADDU V0, V1, V0
9D000A14  90420000   LBU V0, 0(V0)
9D000A18  7C021C20   SEB V1, V0
9D000A1C  24040001   ADDIU A0, ZERO, 1
9D000A20  8FC20004   LW V0, 4(FP)
9D000A24  00441004   SLLV V0, A0, V0
9D000A28  7C021420   SEB V0, V0
9D000A2C  00021027   NOR V0, ZERO, V0
9D000A30  7C021420   SEB V0, V0
9D000A34  00621024   AND V0, V1, V0
9D000A38  7C021420   SEB V0, V0
9D000A3C  304300FF   ANDI V1, V0, 255
9D000A40  3C02A000   LUI V0, -24576
9D000A44  24440208   ADDIU A0, V0, 520
9D000A48  8FC20000   LW V0, 0(FP)
9D000A4C  00821021   ADDU V0, A0, V0
9D000A50  A0430000   SB V1, 0(V0)
9D000A54  10000005   BEQ ZERO, ZERO, 0x9D000A6C
9D000A58  00000000   NOP
9D000A5C  00000000   NOP
9D000A60  10000002   BEQ ZERO, ZERO, 0x9D000A6C
9D000A64  00000000   NOP
9D000A68  00000000   NOP
9D000A6C  03C0E825   OR SP, FP, ZERO
9D000A70  8FBE000C   LW FP, 12(SP)
9D000A74  27BD0010   ADDIU SP, SP, 16
9D000A78  03E00008   JR RA
9D000A7C  00000000   NOP
9D000A80  27BDFFF0   ADDIU SP, SP, -16
9D000A84  AFBE000C   SW FP, 12(SP)
9D000A88  03A0F025   OR FP, SP, ZERO
9D000A8C  AFC40010   SW A0, 16(FP)
9D000A90  AFC50014   SW A1, 20(FP)
9D000A94  8FC20010   LW V0, 16(FP)
9D000A98  28420080   SLTI V0, V0, 128
9D000A9C  1040000B   BEQ V0, ZERO, 0x9D000ACC
9D000AA0  00000000   NOP
9D000AA4  8FC20014   LW V0, 20(FP)
9D000AA8  28420020   SLTI V0, V0, 32
9D000AAC  10400007   BEQ V0, ZERO, 0x9D000ACC
9D000AB0  00000000   NOP
9D000AB4  8FC20010   LW V0, 16(FP)
9D000AB8  04400004   BLTZ V0, 0x9D000ACC
9D000ABC  00000000   NOP
9D000AC0  8FC20014   LW V0, 20(FP)
9D000AC4  04410004   BGEZ V0, 0x9D000AD8
9D000AC8  00000000   NOP
9D000ACC  00001025   OR V0, ZERO, ZERO
9D000AD0  10000015   BEQ ZERO, ZERO, 0x9D000B28
9D000AD4  00000000   NOP
9D000AD8  8FC20014   LW V0, 20(FP)
9D000ADC  00021900   SLL V1, V0, 4
9D000AE0  3C02000F   LUI V0, 15
9D000AE4  3442FF80   ORI V0, V0, -128
9D000AE8  00621824   AND V1, V1, V0
9D000AEC  8FC20010   LW V0, 16(FP)
9D000AF0  00621021   ADDU V0, V1, V0
9D000AF4  AFC20000   SW V0, 0(FP)
9D000AF8  8FC20014   LW V0, 20(FP)
9D000AFC  30420007   ANDI V0, V0, 7
9D000B00  AFC20004   SW V0, 4(FP)
9D000B04  3C02A000   LUI V0, -24576
9D000B08  24430208   ADDIU V1, V0, 520
9D000B0C  8FC20000   LW V0, 0(FP)
9D000B10  00621021   ADDU V0, V1, V0
9D000B14  90420000   LBU V0, 0(V0)
9D000B18  00401825   OR V1, V0, ZERO
9D000B1C  8FC20004   LW V0, 4(FP)
9D000B20  00431007   SRAV V0, V1, V0
9D000B24  30420001   ANDI V0, V0, 1
9D000B28  03C0E825   OR SP, FP, ZERO
9D000B2C  8FBE000C   LW FP, 12(SP)
9D000B30  27BD0010   ADDIU SP, SP, 16
9D000B34  03E00008   JR RA
9D000B38  00000000   NOP
9D000B3C  27BDFFC0   ADDIU SP, SP, -64
9D000B40  AFBE003C   SW FP, 60(SP)
9D000B44  03A0F025   OR FP, SP, ZERO
9D000B48  AFC40040   SW A0, 64(FP)
9D000B4C  AFC50044   SW A1, 68(FP)
9D000B50  00C01025   OR V0, A2, ZERO
9D000B54  A3C20048   SB V0, 72(FP)
9D000B58  8FC20040   LW V0, 64(FP)
9D000B5C  2842007B   SLTI V0, V0, 123
9D000B60  104000B5   BEQ V0, ZERO, 0x9D000E38
9D000B64  00000000   NOP
9D000B68  8FC20044   LW V0, 68(FP)
9D000B6C  28420019   SLTI V0, V0, 25
9D000B70  104000B1   BEQ V0, ZERO, 0x9D000E38
9D000B74  00000000   NOP
9D000B78  93C20048   LBU V0, 72(FP)
9D000B7C  AFC20008   SW V0, 8(FP)
9D000B80  8FC20044   LW V0, 68(FP)
9D000B84  24430007   ADDIU V1, V0, 7
9D000B88  28440000   SLTI A0, V0, 0
9D000B8C  0064100B   MOVN V0, V1, A0
9D000B90  000210C3   SRA V0, V0, 3
9D000B94  AFC2000C   SW V0, 12(FP)
9D000B98  8FC30044   LW V1, 68(FP)
9D000B9C  000317C3   SRA V0, V1, 31
9D000BA0  00021742   SRL V0, V0, 29
9D000BA4  00621821   ADDU V1, V1, V0
9D000BA8  30630007   ANDI V1, V1, 7
9D000BAC  00621023   SUBU V0, V1, V0
9D000BB0  AFC20010   SW V0, 16(FP)
9D000BB4  8FC20044   LW V0, 68(FP)
9D000BB8  24420008   ADDIU V0, V0, 8
9D000BBC  24430007   ADDIU V1, V0, 7
9D000BC0  28440000   SLTI A0, V0, 0
9D000BC4  0064100B   MOVN V0, V1, A0
9D000BC8  000210C3   SRA V0, V0, 3
9D000BCC  AFC20014   SW V0, 20(FP)
9D000BD0  8FC20040   LW V0, 64(FP)
9D000BD4  AFC20018   SW V0, 24(FP)
9D000BD8  8FC20040   LW V0, 64(FP)
9D000BDC  24420006   ADDIU V0, V0, 6
9D000BE0  AFC2001C   SW V0, 28(FP)
9D000BE4  240300FF   ADDIU V1, ZERO, 255
9D000BE8  8FC20010   LW V0, 16(FP)
9D000BEC  00431004   SLLV V0, V1, V0
9D000BF0  AFC20020   SW V0, 32(FP)
9D000BF4  AFC00000   SW ZERO, 0(FP)
9D000BF8  10000038   BEQ ZERO, ZERO, 0x9D000CDC
9D000BFC  00000000   NOP
9D000C00  8FC30018   LW V1, 24(FP)
9D000C04  8FC20000   LW V0, 0(FP)
9D000C08  00621021   ADDU V0, V1, V0
9D000C0C  AFC20024   SW V0, 36(FP)
9D000C10  8FC2000C   LW V0, 12(FP)
9D000C14  000219C0   SLL V1, V0, 7
9D000C18  8FC20024   LW V0, 36(FP)
9D000C1C  00621821   ADDU V1, V1, V0
9D000C20  3C02A000   LUI V0, -24576
9D000C24  24420208   ADDIU V0, V0, 520
9D000C28  00621021   ADDU V0, V1, V0
9D000C2C  90420000   LBU V0, 0(V0)
9D000C30  7C021C20   SEB V1, V0
9D000C34  8FC20020   LW V0, 32(FP)
9D000C38  7C021420   SEB V0, V0
9D000C3C  00021027   NOR V0, ZERO, V0
9D000C40  7C021420   SEB V0, V0
9D000C44  00621024   AND V0, V1, V0
9D000C48  7C021420   SEB V0, V0
9D000C4C  A3C20028   SB V0, 40(FP)
9D000C50  3C049D00   LUI A0, -25344
9D000C54  8FC30008   LW V1, 8(FP)
9D000C58  00601025   OR V0, V1, ZERO
9D000C5C  00021040   SLL V0, V0, 1
9D000C60  00431021   ADDU V0, V0, V1
9D000C64  00021040   SLL V0, V0, 1
9D000C68  248317F0   ADDIU V1, A0, 6128
9D000C6C  00431821   ADDU V1, V0, V1
9D000C70  8FC20000   LW V0, 0(FP)
9D000C74  00621021   ADDU V0, V1, V0
9D000C78  90420000   LBU V0, 0(V0)
9D000C7C  00402025   OR A0, V0, ZERO
9D000C80  8FC30020   LW V1, 32(FP)
9D000C84  8FC20010   LW V0, 16(FP)
9D000C88  00431007   SRAV V0, V1, V0
9D000C8C  00821824   AND V1, A0, V0
9D000C90  8FC20010   LW V0, 16(FP)
9D000C94  00431004   SLLV V0, V1, V0
9D000C98  7C021C20   SEB V1, V0
9D000C9C  83C20028   LB V0, 40(FP)
9D000CA0  00621025   OR V0, V1, V0
9D000CA4  7C021420   SEB V0, V0
9D000CA8  A3C20028   SB V0, 40(FP)
9D000CAC  8FC2000C   LW V0, 12(FP)
9D000CB0  000219C0   SLL V1, V0, 7
9D000CB4  8FC20024   LW V0, 36(FP)
9D000CB8  00621821   ADDU V1, V1, V0
9D000CBC  3C02A000   LUI V0, -24576
9D000CC0  24420208   ADDIU V0, V0, 520
9D000CC4  00621021   ADDU V0, V1, V0
9D000CC8  93C30028   LBU V1, 40(FP)
9D000CCC  A0430000   SB V1, 0(V0)
9D000CD0  8FC20000   LW V0, 0(FP)
9D000CD4  24420001   ADDIU V0, V0, 1
9D000CD8  AFC20000   SW V0, 0(FP)
9D000CDC  8FC3001C   LW V1, 28(FP)
9D000CE0  8FC20018   LW V0, 24(FP)
9D000CE4  00621023   SUBU V0, V1, V0
9D000CE8  8FC30000   LW V1, 0(FP)
9D000CEC  0062102A   SLT V0, V1, V0
9D000CF0  1440FFC3   BNE V0, ZERO, 0x9D000C00
9D000CF4  00000000   NOP
9D000CF8  8FC30014   LW V1, 20(FP)
9D000CFC  8FC2000C   LW V0, 12(FP)
9D000D00  0043102A   SLT V0, V0, V1
9D000D04  1040004C   BEQ V0, ZERO, 0x9D000E38
9D000D08  00000000   NOP
9D000D0C  24030008   ADDIU V1, ZERO, 8
9D000D10  8FC20010   LW V0, 16(FP)
9D000D14  00621023   SUBU V0, V1, V0
9D000D18  240300FF   ADDIU V1, ZERO, 255
9D000D1C  00431007   SRAV V0, V1, V0
9D000D20  AFC2002C   SW V0, 44(FP)
9D000D24  AFC00004   SW ZERO, 4(FP)
9D000D28  1000003C   BEQ ZERO, ZERO, 0x9D000E1C
9D000D2C  00000000   NOP
9D000D30  8FC30018   LW V1, 24(FP)
9D000D34  8FC20004   LW V0, 4(FP)
9D000D38  00621021   ADDU V0, V1, V0
9D000D3C  AFC20030   SW V0, 48(FP)
9D000D40  8FC20014   LW V0, 20(FP)
9D000D44  000219C0   SLL V1, V0, 7
9D000D48  8FC20030   LW V0, 48(FP)
9D000D4C  00621821   ADDU V1, V1, V0
9D000D50  3C02A000   LUI V0, -24576
9D000D54  24420208   ADDIU V0, V0, 520
9D000D58  00621021   ADDU V0, V1, V0
9D000D5C  90420000   LBU V0, 0(V0)
9D000D60  7C021C20   SEB V1, V0
9D000D64  8FC2002C   LW V0, 44(FP)
9D000D68  7C021420   SEB V0, V0
9D000D6C  00021027   NOR V0, ZERO, V0
9D000D70  7C021420   SEB V0, V0
9D000D74  00621024   AND V0, V1, V0
9D000D78  7C021420   SEB V0, V0
9D000D7C  A3C20034   SB V0, 52(FP)
9D000D80  3C049D00   LUI A0, -25344
9D000D84  8FC30008   LW V1, 8(FP)
9D000D88  00601025   OR V0, V1, ZERO
9D000D8C  00021040   SLL V0, V0, 1
9D000D90  00431021   ADDU V0, V0, V1
9D000D94  00021040   SLL V0, V0, 1
9D000D98  248317F0   ADDIU V1, A0, 6128
9D000D9C  00431821   ADDU V1, V0, V1
9D000DA0  8FC20004   LW V0, 4(FP)
9D000DA4  00621021   ADDU V0, V1, V0
9D000DA8  90420000   LBU V0, 0(V0)
9D000DAC  00402025   OR A0, V0, ZERO
9D000DB0  24030008   ADDIU V1, ZERO, 8
9D000DB4  8FC20010   LW V0, 16(FP)
9D000DB8  00621023   SUBU V0, V1, V0
9D000DBC  8FC3002C   LW V1, 44(FP)
9D000DC0  00431004   SLLV V0, V1, V0
9D000DC4  00821824   AND V1, A0, V0
9D000DC8  24040008   ADDIU A0, ZERO, 8
9D000DCC  8FC20010   LW V0, 16(FP)
9D000DD0  00821023   SUBU V0, A0, V0
9D000DD4  00431007   SRAV V0, V1, V0
9D000DD8  7C021C20   SEB V1, V0
9D000DDC  83C20034   LB V0, 52(FP)
9D000DE0  00621025   OR V0, V1, V0
9D000DE4  7C021420   SEB V0, V0
9D000DE8  A3C20034   SB V0, 52(FP)
9D000DEC  8FC20014   LW V0, 20(FP)
9D000DF0  000219C0   SLL V1, V0, 7
9D000DF4  8FC20030   LW V0, 48(FP)
9D000DF8  00621821   ADDU V1, V1, V0
9D000DFC  3C02A000   LUI V0, -24576
9D000E00  24420208   ADDIU V0, V0, 520
9D000E04  00621021   ADDU V0, V1, V0
9D000E08  93C30034   LBU V1, 52(FP)
9D000E0C  A0430000   SB V1, 0(V0)
9D000E10  8FC20004   LW V0, 4(FP)
9D000E14  24420001   ADDIU V0, V0, 1
9D000E18  AFC20004   SW V0, 4(FP)
9D000E1C  8FC3001C   LW V1, 28(FP)
9D000E20  8FC20018   LW V0, 24(FP)
9D000E24  00621023   SUBU V0, V1, V0
9D000E28  8FC30004   LW V1, 4(FP)
9D000E2C  0062102A   SLT V0, V1, V0
9D000E30  1440FFBF   BNE V0, ZERO, 0x9D000D30
9D000E34  00000000   NOP
9D000E38  00001025   OR V0, ZERO, ZERO
9D000E3C  03C0E825   OR SP, FP, ZERO
9D000E40  8FBE003C   LW FP, 60(SP)
9D000E44  27BD0040   ADDIU SP, SP, 64
9D000E48  03E00008   JR RA
9D000E4C  00000000   NOP
9D000E50  27BDFFD8   ADDIU SP, SP, -40
9D000E54  AFBF0024   SW RA, 36(SP)
9D000E58  AFBE0020   SW FP, 32(SP)
9D000E5C  03A0F025   OR FP, SP, ZERO
9D000E60  AFC40028   SW A0, 40(FP)
9D000E64  8FC20028   LW V0, 40(FP)
9D000E68  10400042   BEQ V0, ZERO, 0x9D000F74
9D000E6C  00000000   NOP
9D000E70  AFC00010   SW ZERO, 16(FP)
9D000E74  AFC00014   SW ZERO, 20(FP)
9D000E78  AFC00018   SW ZERO, 24(FP)
9D000E7C  10000031   BEQ ZERO, ZERO, 0x9D000F44
9D000E80  00000000   NOP
9D000E84  8FC20018   LW V0, 24(FP)
9D000E88  8FC30028   LW V1, 40(FP)
9D000E8C  00621021   ADDU V0, V1, V0
9D000E90  80430000   LB V1, 0(V0)
9D000E94  2402000A   ADDIU V0, ZERO, 10
9D000E98  14620007   BNE V1, V0, 0x9D000EB8
9D000E9C  00000000   NOP
9D000EA0  8FC20010   LW V0, 16(FP)
9D000EA4  24420001   ADDIU V0, V0, 1
9D000EA8  AFC20010   SW V0, 16(FP)
9D000EAC  AFC00014   SW ZERO, 20(FP)
9D000EB0  10000021   BEQ ZERO, ZERO, 0x9D000F38
9D000EB4  00000000   NOP
9D000EB8  8FC30014   LW V1, 20(FP)
9D000EBC  24020015   ADDIU V0, ZERO, 21
9D000EC0  14620005   BNE V1, V0, 0x9D000ED8
9D000EC4  00000000   NOP
9D000EC8  8FC20010   LW V0, 16(FP)
9D000ECC  24420001   ADDIU V0, V0, 1
9D000ED0  AFC20010   SW V0, 16(FP)
9D000ED4  AFC00014   SW ZERO, 20(FP)
9D000ED8  8FC30010   LW V1, 16(FP)
9D000EDC  24020004   ADDIU V0, ZERO, 4
9D000EE0  10620027   BEQ V1, V0, 0x9D000F80
9D000EE4  00000000   NOP
9D000EE8  8FC30014   LW V1, 20(FP)
9D000EEC  00601025   OR V0, V1, ZERO
9D000EF0  00021040   SLL V0, V0, 1
9D000EF4  00431021   ADDU V0, V0, V1
9D000EF8  00021040   SLL V0, V0, 1
9D000EFC  00403825   OR A3, V0, ZERO
9D000F00  8FC20010   LW V0, 16(FP)
9D000F04  000220C0   SLL A0, V0, 3
9D000F08  8FC20018   LW V0, 24(FP)
9D000F0C  8FC30028   LW V1, 40(FP)
9D000F10  00621021   ADDU V0, V1, V0
9D000F14  80420000   LB V0, 0(V0)
9D000F18  00403025   OR A2, V0, ZERO
9D000F1C  00802825   OR A1, A0, ZERO
9D000F20  00E02025   OR A0, A3, ZERO
9D000F24  0F4002CF   JAL OledDrawChar
9D000F28  00000000   NOP
9D000F2C  8FC20014   LW V0, 20(FP)
9D000F30  24420001   ADDIU V0, V0, 1
9D000F34  AFC20014   SW V0, 20(FP)
9D000F38  8FC20018   LW V0, 24(FP)
9D000F3C  24420001   ADDIU V0, V0, 1
9D000F40  AFC20018   SW V0, 24(FP)
9D000F44  8FC20018   LW V0, 24(FP)
9D000F48  8FC30028   LW V1, 40(FP)
9D000F4C  00621021   ADDU V0, V1, V0
9D000F50  80420000   LB V0, 0(V0)
9D000F54  1040000B   BEQ V0, ZERO, 0x9D000F84
9D000F58  00000000   NOP
9D000F5C  8FC20018   LW V0, 24(FP)
9D000F60  28420057   SLTI V0, V0, 87
9D000F64  1440FFC7   BNE V0, ZERO, 0x9D000E84
9D000F68  00000000   NOP
9D000F6C  10000005   BEQ ZERO, ZERO, 0x9D000F84
9D000F70  00000000   NOP
9D000F74  00000000   NOP
9D000F78  10000002   BEQ ZERO, ZERO, 0x9D000F84
9D000F7C  00000000   NOP
9D000F80  00000000   NOP
9D000F84  03C0E825   OR SP, FP, ZERO
9D000F88  8FBF0024   LW RA, 36(SP)
9D000F8C  8FBE0020   LW FP, 32(SP)
9D000F90  27BD0028   ADDIU SP, SP, 40
9D000F94  03E00008   JR RA
9D000F98  00000000   NOP
9D000F9C  27BDFFF0   ADDIU SP, SP, -16
9D000FA0  AFBE000C   SW FP, 12(SP)
9D000FA4  03A0F025   OR FP, SP, ZERO
9D000FA8  AFC40010   SW A0, 16(FP)
9D000FAC  AFC00000   SW ZERO, 0(FP)
9D000FB0  10000015   BEQ ZERO, ZERO, 0x9D001008
9D000FB4  00000000   NOP
9D000FB8  8FC30010   LW V1, 16(FP)
9D000FBC  24020001   ADDIU V0, ZERO, 1
9D000FC0  14620009   BNE V1, V0, 0x9D000FE8
9D000FC4  00000000   NOP
9D000FC8  3C02A000   LUI V0, -24576
9D000FCC  24430208   ADDIU V1, V0, 520
9D000FD0  8FC20000   LW V0, 0(FP)
9D000FD4  00621021   ADDU V0, V1, V0
9D000FD8  2403FFFF   ADDIU V1, ZERO, -1
9D000FDC  A0430000   SB V1, 0(V0)
9D000FE0  10000006   BEQ ZERO, ZERO, 0x9D000FFC
9D000FE4  00000000   NOP
9D000FE8  3C02A000   LUI V0, -24576
9D000FEC  24430208   ADDIU V1, V0, 520
9D000FF0  8FC20000   LW V0, 0(FP)
9D000FF4  00621021   ADDU V0, V1, V0
9D000FF8  A0400000   SB ZERO, 0(V0)
9D000FFC  8FC20000   LW V0, 0(FP)
9D001000  24420001   ADDIU V0, V0, 1
9D001004  AFC20000   SW V0, 0(FP)
9D001008  8FC20000   LW V0, 0(FP)
9D00100C  28420200   SLTI V0, V0, 512
9D001010  1440FFE9   BNE V0, ZERO, 0x9D000FB8
9D001014  00000000   NOP
9D001018  00000000   NOP
9D00101C  03C0E825   OR SP, FP, ZERO
9D001020  8FBE000C   LW FP, 12(SP)
9D001024  27BD0010   ADDIU SP, SP, 16
9D001028  03E00008   JR RA
9D00102C  00000000   NOP
9D001030  27BDFFE8   ADDIU SP, SP, -24
9D001034  AFBF0014   SW RA, 20(SP)
9D001038  AFBE0010   SW FP, 16(SP)
9D00103C  03A0F025   OR FP, SP, ZERO
9D001040  0F400809   JAL OledDriverSetDisplayInverted
9D001044  00000000   NOP
9D001048  00000000   NOP
9D00104C  03C0E825   OR SP, FP, ZERO
9D001050  8FBF0014   LW RA, 20(SP)
9D001054  8FBE0010   LW FP, 16(SP)
9D001058  27BD0018   ADDIU SP, SP, 24
9D00105C  03E00008   JR RA
9D001060  00000000   NOP
9D001064  27BDFFE8   ADDIU SP, SP, -24
9D001068  AFBF0014   SW RA, 20(SP)
9D00106C  AFBE0010   SW FP, 16(SP)
9D001070  03A0F025   OR FP, SP, ZERO
9D001074  0F40081B   JAL OledDriverSetDisplayNormal
9D001078  00000000   NOP
9D00107C  00000000   NOP
9D001080  03C0E825   OR SP, FP, ZERO
9D001084  8FBF0014   LW RA, 20(SP)
9D001088  8FBE0010   LW FP, 16(SP)
9D00108C  27BD0018   ADDIU SP, SP, 24
9D001090  03E00008   JR RA
9D001094  00000000   NOP
9D001098  27BDFFE8   ADDIU SP, SP, -24
9D00109C  AFBF0014   SW RA, 20(SP)
9D0010A0  AFBE0010   SW FP, 16(SP)
9D0010A4  03A0F025   OR FP, SP, ZERO
9D0010A8  0F4007C2   JAL OledDriverInitDisplay
9D0010AC  00000000   NOP
9D0010B0  00000000   NOP
9D0010B4  03C0E825   OR SP, FP, ZERO
9D0010B8  8FBF0014   LW RA, 20(SP)
9D0010BC  8FBE0010   LW FP, 16(SP)
9D0010C0  27BD0018   ADDIU SP, SP, 24
9D0010C4  03E00008   JR RA
9D0010C8  00000000   NOP
9D0010CC  27BDFFE8   ADDIU SP, SP, -24
9D0010D0  AFBF0014   SW RA, 20(SP)
9D0010D4  AFBE0010   SW FP, 16(SP)
9D0010D8  03A0F025   OR FP, SP, ZERO
9D0010DC  0F40082D   JAL OledDriverDisableDisplay
9D0010E0  00000000   NOP
9D0010E4  00000000   NOP
9D0010E8  03C0E825   OR SP, FP, ZERO
9D0010EC  8FBF0014   LW RA, 20(SP)
9D0010F0  8FBE0010   LW FP, 16(SP)
9D0010F4  27BD0018   ADDIU SP, SP, 24
9D0010F8  03E00008   JR RA
9D0010FC  00000000   NOP
9D001100  27BDFFE8   ADDIU SP, SP, -24
9D001104  AFBF0014   SW RA, 20(SP)
9D001108  AFBE0010   SW FP, 16(SP)
9D00110C  03A0F025   OR FP, SP, ZERO
9D001110  0F40084E   JAL OledDriverUpdateDisplay
9D001114  00000000   NOP
9D001118  00000000   NOP
9D00111C  03C0E825   OR SP, FP, ZERO
9D001120  8FBF0014   LW RA, 20(SP)
9D001124  8FBE0010   LW FP, 16(SP)
9D001128  27BD0018   ADDIU SP, SP, 24
9D00112C  03E00008   JR RA
9D001130  00000000   NOP
---  c:/users/james/desktop/ece13/jensming/lab06/lab6.x/leds_lab06.c  -----------------------------------
1:                   /* 
2:                    * File:   Leds_Lab06.c
3:                    * Author: James Ensminger (jensming@ucsc.edu)
4:                    *
5:                    * Created on February 8, 2022, 11:18 AM
6:                    */
7:                   
8:                   // Standard libraries
9:                   #include <stdio.h>
10:                  
11:                  //CMPE13 Support Library
12:                  #include "BOARD.h"
13:                  #include "Leds_Lab06.h"
14:                  
15:                  // **** Declared function prototypes ****
16:                  void LEDS_INIT(void);
17:                  void LEDS_SET(char newPattern);
18:                  char LEDS_GET(void);
19:                  
20:                  /********************************************************************************
21:                   * Defined LEDS_INIT function.
22:                   ********************************************************************************/
23:                  void LEDS_INIT(void)
24:                  {
25:                      TRISE = 0x00; // sets each LED pin as output
26:                      LATE = 0x00; // sets each LED pin's output value to zero
27:                  }
28:                  
29:                  /********************************************************************************
30:                   * Defined LEDS_SET function.
31:                   ********************************************************************************/
32:                  void LEDS_SET(char newPattern)
33:                  {
34:                      LATE = newPattern; // sets the LEDs to newPattern
35:                  }
36:                  
37:                  /********************************************************************************
38:                   * Defined LEDS_GET function.
39:                   ********************************************************************************/
40:                  char LEDS_GET(void)
41:                  {
42:                      return LATE; // return current state of LED bar as on or off
43:                  }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D003B30  27BDFFF8   ADDIU SP, SP, -8
9D003B34  AFBE0004   SW FP, 4(SP)
9D003B38  03A0F025   OR FP, SP, ZERO
9D003B3C  3C02BF88   LUI V0, -16504
9D003B40  AC406100   SW ZERO, 24832(V0)
9D003B44  3C02BF88   LUI V0, -16504
9D003B48  AC406120   SW ZERO, 24864(V0)
9D003B4C  00000000   NOP
9D003B50  03C0E825   OR SP, FP, ZERO
9D003B54  8FBE0004   LW FP, 4(SP)
9D003B58  27BD0008   ADDIU SP, SP, 8
9D003B5C  03E00008   JR RA
9D003B60  00000000   NOP
9D003B64  27BDFFF8   ADDIU SP, SP, -8
9D003B68  AFBE0004   SW FP, 4(SP)
9D003B6C  03A0F025   OR FP, SP, ZERO
9D003B70  00801025   OR V0, A0, ZERO
9D003B74  A3C20008   SB V0, 8(FP)
9D003B78  83C30008   LB V1, 8(FP)
9D003B7C  3C02BF88   LUI V0, -16504
9D003B80  AC436120   SW V1, 24864(V0)
9D003B84  00000000   NOP
9D003B88  03C0E825   OR SP, FP, ZERO
9D003B8C  8FBE0004   LW FP, 4(SP)
9D003B90  27BD0008   ADDIU SP, SP, 8
9D003B94  03E00008   JR RA
9D003B98  00000000   NOP
9D003B9C  27BDFFF8   ADDIU SP, SP, -8
9D003BA0  AFBE0004   SW FP, 4(SP)
9D003BA4  03A0F025   OR FP, SP, ZERO
9D003BA8  3C02BF88   LUI V0, -16504
9D003BAC  8C426120   LW V0, 24864(V0)
9D003BB0  7C021420   SEB V0, V0
9D003BB4  03C0E825   OR SP, FP, ZERO
9D003BB8  8FBE0004   LW FP, 4(SP)
9D003BBC  27BD0008   ADDIU SP, SP, 8
9D003BC0  03E00008   JR RA
9D003BC4  00000000   NOP
---  c:/users/james/desktop/ece13/jensming/lab06/lab6.x/bounce_adc.c  -----------------------------------
1:                   // **** Include libraries here ****
2:                   // Standard libraries
3:                   #include <stdio.h>
4:                   #include <string.h>
5:                   
6:                   //CMPE13 Support Library
7:                   #include "BOARD.h"
8:                   
9:                   // Microchip libraries
10:                  #include <xc.h>
11:                  #include <sys/attribs.h>
12:                  
13:                  // User libraries
14:                  #include "Leds_Lab06.h"
15:                  #include "Oled.h"
16:                  #include "OledDriver.h"
17:                  
18:                  
19:                  // **** Set macros and preprocessor directives ****
20:                  
21:                  // **** Declare any datatypes here ****
22:                  struct AdcResult {
23:                      uint8_t event;
24:                      uint16_t voltage;
25:                  };
26:                  
27:                  // **** Define global, module-level, or external variables here ****
28:                  static struct AdcResult ADC1;
29:                  #define SIZE 5 // size of window for triggering ADC events
30:                  
31:                  // **** Declare function prototypes ****
32:                  
33:                  int main(void)
34:                  {
35:                      BOARD_Init();
36:                  
37:                      // Enable interrupts for the ADC
38:                      IPC6bits.AD1IP = 2;
39:                      IPC6bits.AD1IS = 0;
40:                      IEC1bits.AD1IE = 1;
41:                  
42:                      // Set B2 to an input so AN2 can be used by the ADC.
43:                      TRISBbits.TRISB2 = 1;
44:                  
45:                      // Configure and start the ADC
46:                      AD1CHSbits.CH0SA = 2; // add B2 to the mux
47:                      AD1PCFGbits.PCFG2 = 0; // add b2 to the ADC
48:                       AD1CSSLbits.CSSL2 = 1; // and add b2 to the scanner
49:                  
50:                      AD1CON1 = 0; // start with 0
51:                      AD1CON1bits.SSRC = 0b111; // auto conversion
52:                      AD1CON1bits.ASAM = 1; // auto sample
53:                  
54:                      AD1CON2 = 0; // start with 0
55:                      AD1CON2bits.SMPI = 7; // one interrupt per 8 samples
56:                  
57:                      AD1CON3 = 0; // start with 0
58:                      AD1CON3bits.SAMC = 29; // long sample time
59:                      AD1CON3bits.ADCS = 50; // long conversion time
60:                      
61:                      AD1CON1bits.ADON = 1; // and finally turn it on
62:                  
63:                      /***************************************************************************************************
64:                       * Your code goes in between this comment and the following one with asterisks.
65:                       **************************************************************************************************/
66:                      printf("Welcome to 1725314's lab6 part3 (bounce_adc).  Compiled on %s %s.\n",__TIME__,__DATE__);
67:                  
68:                      // initialize OLED and ADC1
69:                      OledInit();
70:                      ADC1.event = TRUE;
71:                      char stringToDraw[35];
72:                      
73:                      while (1)
74:                      {
75:                          // displays raw and percentage ADC voltage readings if event is generated
76:                          if (ADC1.event == TRUE)
77:                          {
78:                              int percentage = (ADC1.voltage / 1023) * 100;
79:                              sprintf(stringToDraw, "Potentiometer value:\n   %d\n   %d%%", ADC1.voltage, percentage);
80:                              
81:                              OledClear(OLED_COLOR_BLACK);
82:                  //            OledDrawString("Potentiometer value:\n %d\n %d%%", ADC1.voltage, percentage);
83:                              OledDrawString(stringToDraw);
84:                              OledUpdate();
85:                          }
86:                          ADC1.event = FALSE;
87:                      }
88:                      /***************************************************************************************************
89:                       * Your code goes in between this comment and the preceding one with asterisks
90:                       **************************************************************************************************/
91:                  
92:                      while (1);
93:                  }
94:                  
95:                  /**
96:                   * This is the interrupt for the ADC1 peripheral. It will trigger whenever a new ADC reading is available
97:                   * in the ADC buffer SFRs, ADC1BUF0 - ADC1BUF7.
98:                   * 
99:                   * It should not be called, and should communicate with main code only by using module-level variables.
100:                  */
101:                 void __ISR(_ADC_VECTOR, ipl2auto) AdcHandler(void)
102:                 {
103:                     // Clear the interrupt flag.
104:                     IFS1bits.AD1IF = 0;
105:                 
106:                     // average ADC reading
107:                     uint16_t average = (ADC1BUF0 + ADC1BUF1 + ADC1BUF2 + ADC1BUF3 + ADC1BUF4 + ADC1BUF5 + ADC1BUF6 + ADC1BUF7) / 8;
108:                     
109:                     // update voltage measurement if difference between ADC reading and previous average is greater than window
110:                     if (((average - ADC1.voltage) > SIZE) || ((ADC1.voltage - average) > SIZE))
111:                     {
112:                         ADC1.event = TRUE;
113:                         
114:                         // check corner cases for when ADC reading is near min and max voltages, else set measurement to average
115:                         if ((ADC1.voltage + SIZE) >= 1023)
116:                         {
117:                             ADC1.voltage = 1023;
118:                         }
119:                         else if ((ADC1.voltage - SIZE) <= 0)
120:                         {
121:                             ADC1.voltage = 0;
122:                         }
123:                         else
124:                         {
125:                             ADC1.voltage = average;
126:                         }
127:                     }
128:                 }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D003020  27BDFFC0   ADDIU SP, SP, -64
9D003024  AFBF003C   SW RA, 60(SP)
9D003028  AFBE0038   SW FP, 56(SP)
9D00302C  03A0F025   OR FP, SP, ZERO
9D003030  0F4008F7   JAL BOARD_Init
9D003034  00000000   NOP
9D003038  3C03BF88   LUI V1, -16504
9D00303C  8C6210F0   LW V0, 4336(V1)
9D003040  24040002   ADDIU A0, ZERO, 2
9D003044  7C82E684   INS V0, A0, 26, 3
9D003048  AC6210F0   SW V0, 4336(V1)
9D00304C  3C03BF88   LUI V1, -16504
9D003050  8C6210F0   LW V0, 4336(V1)
9D003054  7C02CE04   INS V0, ZERO, 24, 2
9D003058  AC6210F0   SW V0, 4336(V1)
9D00305C  3C03BF88   LUI V1, -16504
9D003060  8C621070   LW V0, 4208(V1)
9D003064  24040001   ADDIU A0, ZERO, 1
9D003068  7C820844   INS V0, A0, 1, 1
9D00306C  AC621070   SW V0, 4208(V1)
9D003070  3C03BF88   LUI V1, -16504
9D003074  94626040   LHU V0, 24640(V1)
9D003078  24040001   ADDIU A0, ZERO, 1
9D00307C  7C821084   INS V0, A0, 2, 1
9D003080  A4626040   SH V0, 24640(V1)
9D003084  3C03BF81   LUI V1, -16511
9D003088  8C629040   LW V0, -28608(V1)
9D00308C  24040002   ADDIU A0, ZERO, 2
9D003090  7C829C04   INS V0, A0, 16, 4
9D003094  AC629040   SW V0, -28608(V1)
9D003098  3C03BF81   LUI V1, -16511
9D00309C  94629060   LHU V0, -28576(V1)
9D0030A0  7C021084   INS V0, ZERO, 2, 1
9D0030A4  A4629060   SH V0, -28576(V1)
9D0030A8  3C03BF81   LUI V1, -16511
9D0030AC  94629050   LHU V0, -28592(V1)
9D0030B0  24040001   ADDIU A0, ZERO, 1
9D0030B4  7C821084   INS V0, A0, 2, 1
9D0030B8  A4629050   SH V0, -28592(V1)
9D0030BC  3C02BF81   LUI V0, -16511
9D0030C0  AC409000   SW ZERO, -28672(V0)
9D0030C4  3C03BF81   LUI V1, -16511
9D0030C8  94629000   LHU V0, -28672(V1)
9D0030CC  24040007   ADDIU A0, ZERO, 7
9D0030D0  7C823944   INS V0, A0, 5, 3
9D0030D4  A4629000   SH V0, -28672(V1)
9D0030D8  3C03BF81   LUI V1, -16511
9D0030DC  94629000   LHU V0, -28672(V1)
9D0030E0  24040001   ADDIU A0, ZERO, 1
9D0030E4  7C821084   INS V0, A0, 2, 1
9D0030E8  A4629000   SH V0, -28672(V1)
9D0030EC  3C02BF81   LUI V0, -16511
9D0030F0  AC409010   SW ZERO, -28656(V0)
9D0030F4  3C03BF81   LUI V1, -16511
9D0030F8  94629010   LHU V0, -28656(V1)
9D0030FC  24040007   ADDIU A0, ZERO, 7
9D003100  7C822884   INS V0, A0, 2, 4
9D003104  A4629010   SH V0, -28656(V1)
9D003108  3C02BF81   LUI V0, -16511
9D00310C  AC409020   SW ZERO, -28640(V0)
9D003110  3C03BF81   LUI V1, -16511
9D003114  94629020   LHU V0, -28640(V1)
9D003118  2404001D   ADDIU A0, ZERO, 29
9D00311C  7C826204   INS V0, A0, 8, 5
9D003120  A4629020   SH V0, -28640(V1)
9D003124  3C02BF81   LUI V0, -16511
9D003128  24030032   ADDIU V1, ZERO, 50
9D00312C  A0439020   SB V1, -28640(V0)
9D003130  3C03BF81   LUI V1, -16511
9D003134  94629000   LHU V0, -28672(V1)
9D003138  24040001   ADDIU A0, ZERO, 1
9D00313C  7C827BC4   INS V0, A0, 15, 1
9D003140  A4629000   SH V0, -28672(V1)
9D003144  3C029D00   LUI V0, -25344
9D003148  24463CD4   ADDIU A2, V0, 15572
9D00314C  3C029D00   LUI V0, -25344
9D003150  24453CE0   ADDIU A1, V0, 15584
9D003154  3C029D00   LUI V0, -25344
9D003158  24443CEC   ADDIU A0, V0, 15596
9D00315C  0F400FF7   JAL _printf_s
9D003160  00000000   NOP
9D003164  0F400233   JAL OledInit
9D003168  00000000   NOP
9D00316C  24020001   ADDIU V0, ZERO, 1
9D003170  A3828014   SB V0, -32748(GP)
9D003174  93838014   LBU V1, -32748(GP)
9D003178  24020001   ADDIU V0, ZERO, 1
9D00317C  14620025   BNE V1, V0, 0x9D003214
9D003180  00000000   NOP
9D003184  97838016   LHU V1, -32746(GP)
9D003188  3C020040   LUI V0, 64
9D00318C  34421005   ORI V0, V0, 4101
9D003190  00620019   MULTU 0, V1, V0
9D003194  00001010   MFHI V0
9D003198  00621823   SUBU V1, V1, V0
9D00319C  00031842   SRL V1, V1, 1
9D0031A0  00431021   ADDU V0, V0, V1
9D0031A4  00021242   SRL V0, V0, 9
9D0031A8  3042FFFF   ANDI V0, V0, -1
9D0031AC  00401825   OR V1, V0, ZERO
9D0031B0  00601025   OR V0, V1, ZERO
9D0031B4  00021040   SLL V0, V0, 1
9D0031B8  00431021   ADDU V0, V0, V1
9D0031BC  000210C0   SLL V0, V0, 3
9D0031C0  00431021   ADDU V0, V0, V1
9D0031C4  00021080   SLL V0, V0, 2
9D0031C8  AFC20010   SW V0, 16(FP)
9D0031CC  97828016   LHU V0, -32746(GP)
9D0031D0  27C30014   ADDIU V1, FP, 20
9D0031D4  8FC70010   LW A3, 16(FP)
9D0031D8  00403025   OR A2, V0, ZERO
9D0031DC  3C029D00   LUI V0, -25344
9D0031E0  24453D30   ADDIU A1, V0, 15664
9D0031E4  00602025   OR A0, V1, ZERO
9D0031E8  0F400F73   JAL _sprintf_cdnopuxX
9D0031EC  00000000   NOP
9D0031F0  00002025   OR A0, ZERO, ZERO
9D0031F4  0F4003E7   JAL OledClear
9D0031F8  00000000   NOP
9D0031FC  27C20014   ADDIU V0, FP, 20
9D003200  00402025   OR A0, V0, ZERO
9D003204  0F400394   JAL OledDrawString
9D003208  00000000   NOP
9D00320C  0F400440   JAL OledUpdate
9D003210  00000000   NOP
9D003214  A3808014   SB ZERO, -32748(GP)
9D003218  1000FFD6   BEQ ZERO, ZERO, 0x9D003174
9D00321C  00000000   NOP
9D003220  415DE800   RDPGPR SP, SP
9D003224  401B7000   MFC0 K1, EPC
9D003228  401A6002   MFC0 K0, SRSCtl
9D00322C  27BDFFD8   ADDIU SP, SP, -40
9D003230  AFBB0024   SW K1, 36(SP)
9D003234  401B6000   MFC0 K1, Status
9D003238  AFBA001C   SW K0, 28(SP)
9D00323C  AFBB0020   SW K1, 32(SP)
9D003240  7C1B7844   INS K1, ZERO, 1, 15
9D003244  377B0800   ORI K1, K1, 2048
9D003248  409B6000   MTC0 K1, Status
9D00324C  AFA30010   SW V1, 16(SP)
9D003250  AFA2000C   SW V0, 12(SP)
9D003254  8FA3001C   LW V1, 28(SP)
9D003258  3063000F   ANDI V1, V1, 15
9D00325C  AFBE0014   SW FP, 20(SP)
9D003260  00000000   NOP
9D003264  03A0F025   OR FP, SP, ZERO
9D003268  3C03BF88   LUI V1, -16504
9D00326C  8C621040   LW V0, 4160(V1)
9D003270  7C020844   INS V0, ZERO, 1, 1
9D003274  AC621040   SW V0, 4160(V1)
9D003278  3C02BF81   LUI V0, -16511
9D00327C  8C439070   LW V1, -28560(V0)
9D003280  3C02BF81   LUI V0, -16511
9D003284  8C429080   LW V0, -28544(V0)
9D003288  00621821   ADDU V1, V1, V0
9D00328C  3C02BF81   LUI V0, -16511
9D003290  8C429090   LW V0, -28528(V0)
9D003294  00621821   ADDU V1, V1, V0
9D003298  3C02BF81   LUI V0, -16511
9D00329C  8C4290A0   LW V0, -28512(V0)
9D0032A0  00621821   ADDU V1, V1, V0
9D0032A4  3C02BF81   LUI V0, -16511
9D0032A8  8C4290B0   LW V0, -28496(V0)
9D0032AC  00621821   ADDU V1, V1, V0
9D0032B0  3C02BF81   LUI V0, -16511
9D0032B4  8C4290C0   LW V0, -28480(V0)
9D0032B8  00621821   ADDU V1, V1, V0
9D0032BC  3C02BF81   LUI V0, -16511
9D0032C0  8C4290D0   LW V0, -28464(V0)
9D0032C4  00621821   ADDU V1, V1, V0
9D0032C8  3C02BF81   LUI V0, -16511
9D0032CC  8C4290E0   LW V0, -28448(V0)
9D0032D0  00621021   ADDU V0, V1, V0
9D0032D4  000210C2   SRL V0, V0, 3
9D0032D8  A7C20000   SH V0, 0(FP)
9D0032DC  97C20000   LHU V0, 0(FP)
9D0032E0  97838016   LHU V1, -32746(GP)
9D0032E4  00431023   SUBU V0, V0, V1
9D0032E8  28420006   SLTI V0, V0, 6
9D0032EC  10400008   BEQ V0, ZERO, 0x9D003310
9D0032F0  00000000   NOP
9D0032F4  97828016   LHU V0, -32746(GP)
9D0032F8  00401825   OR V1, V0, ZERO
9D0032FC  97C20000   LHU V0, 0(FP)
9D003300  00621023   SUBU V0, V1, V0
9D003304  28420006   SLTI V0, V0, 6
9D003308  14400014   BNE V0, ZERO, 0x9D00335C
9D00330C  00000000   NOP
9D003310  24020001   ADDIU V0, ZERO, 1
9D003314  A3828014   SB V0, -32748(GP)
9D003318  97828016   LHU V0, -32746(GP)
9D00331C  2C4203FA   SLTIU V0, V0, 1018
9D003320  14400005   BNE V0, ZERO, 0x9D003338
9D003324  00000000   NOP
9D003328  240203FF   ADDIU V0, ZERO, 1023
9D00332C  A7828016   SH V0, -32746(GP)
9D003330  1000000A   BEQ ZERO, ZERO, 0x9D00335C
9D003334  00000000   NOP
9D003338  97828016   LHU V0, -32746(GP)
9D00333C  2C420006   SLTIU V0, V0, 6
9D003340  10400004   BEQ V0, ZERO, 0x9D003354
9D003344  00000000   NOP
9D003348  A7808016   SH ZERO, -32746(GP)
9D00334C  10000003   BEQ ZERO, ZERO, 0x9D00335C
9D003350  00000000   NOP
9D003354  97C20000   LHU V0, 0(FP)
9D003358  A7828016   SH V0, -32746(GP)
9D00335C  00000000   NOP
9D003360  03C0E825   OR SP, FP, ZERO
9D003364  8FA2001C   LW V0, 28(SP)
9D003368  3042000F   ANDI V0, V0, 15
9D00336C  14400004   BNE V0, ZERO, 0x9D003380
9D003370  00000000   NOP
9D003374  8FBE0014   LW FP, 20(SP)
9D003378  8FA30010   LW V1, 16(SP)
9D00337C  8FA2000C   LW V0, 12(SP)
9D003380  00000000   NOP
9D003384  41606000   DI ZERO
9D003388  000000C0   EHB
9D00338C  8FBA0024   LW K0, 36(SP)
9D003390  8FBB0020   LW K1, 32(SP)
9D003394  409A7000   MTC0 K0, EPC
9D003398  8FBA001C   LW K0, 28(SP)
9D00339C  27BD0028   ADDIU SP, SP, 40
9D0033A0  409A6002   MTC0 K0, SRSCtl
9D0033A4  41DDE800   WRPGPR SP, SP
9D0033A8  409B6000   MTC0 K1, Status
9D0033AC  42000018   ERET
---  c:/users/james/desktop/ece13/jensming/lab06/lab6.x/board.c  ----------------------------------------
1:                   /*
2:                    * File:   BOARD.h
3:                    * Author: Max Dunne
4:                    *
5:                    * Created on December 19, 2012, 2:08 PM
6:                    * 
7:                    * Much of the odder code come directly from the microchip peripheral library as reinventing the wheel seemed
8:                    * not necessary
9:                    */
10:                  
11:                  #include "BOARD.h"
12:                  
13:                  // Microchip Libraries
14:                  #ifdef PIC32
15:                  #include <xc.h>
16:                  #endif
17:                  #include <stdint.h>
18:                  #include <stdio.h>
19:                  #include <stdlib.h>
20:                  
21:                  // no legacy libc
22:                  #ifdef PIC32
23:                  #ifdef __C32_LEGACY_LIBC__
24:                  #error CSE13E Can not be done with legacy libc. Ensure project properties -> XC32 (Global Options) -> Use legacy libc is UN checked. 
25:                  #endif
26:                  #endif
27:                  
28:                  /*******************************************************************************
29:                   * PRAGMAS                                                                     *
30:                   ******************************************************************************/
31:                  // Configuration Bits
32:                  // SYSCLK = 80MHz
33:                  // PBCLK  = 20MHz
34:                  // using POSC w/ PLL, XT mode
35:                  #ifdef PIC32
36:                  #pragma config FPBDIV     = DIV_4
37:                  #pragma config FPLLIDIV   = DIV_2     // Set the PLL input divider to 2, seems to
38:                  #pragma config IESO       = OFF       // Internal/External Switch
39:                  #pragma config POSCMOD    = XT        // Primary Oscillator Configuration for XT osc mode
40:                  #pragma config OSCIOFNC   = OFF       // Disable clock signal output
41:                  #pragma config FCKSM      = CSECMD    // Clock Switching and Monitor Selection
42:                  #pragma config WDTPS      = PS1       // Specify the watchdog timer interval (unused)
43:                  #pragma config FWDTEN     = OFF       // Disable the watchdog timer
44:                  #pragma config ICESEL     = ICS_PGx2  // Allow for debugging with the Uno32
45:                  #pragma config PWP        = OFF       // Keep the program flash writeable
46:                  #pragma config BWP        = OFF       // Keep the boot flash writeable
47:                  #pragma config CP         = OFF       // Disable code protect
48:                  #pragma config FNOSC 		= PRIPLL	//Oscillator Selection Bits
49:                  #pragma config FSOSCEN 		= OFF		//Secondary Oscillator Enable
50:                  #pragma config FPLLMUL 		= MUL_20	//PLL Multiplier
51:                  #pragma config FPLLODIV 	= DIV_1 	//System PLL Output Clock Divid
52:                  #endif
53:                  /*******************************************************************************
54:                   * PRIVATE #DEFINES                                                            *
55:                   ******************************************************************************/
56:                  #define SYSTEM_CLOCK 80000000L
57:                  #define PB_CLOCK (SYSTEM_CLOCK / 4)
58:                  #define QUEUESIZE 512
59:                  //#define TurnOffAndClearInterrupt(Name) INTEnable(Name,INT_DISABLED); INTClearFlag(Name)
60:                  #define TurnPortToInput(Tris) Tris=0xFFFF
61:                  
62:                  
63:                  //#define LAB10_READ_OVERWRITE
64:                  /*******************************************************************************
65:                   * PRIVATE DATATYPES                                                           *
66:                   ******************************************************************************/
67:                  
68:                  
69:                  
70:                  /*******************************************************************************
71:                   * PRIVATE FUNCTION PROTOTYPES                                                 *
72:                   ******************************************************************************/
73:                  void SERIAL_Init(void);
74:                  
75:                  /*******************************************************************************
76:                   * PRIVATE VARIABLES                                                           *
77:                   ******************************************************************************/
78:                  
79:                  
80:                  /*******************************************************************************
81:                   * PUBLIC FUNCTIONS                                                            *
82:                   ******************************************************************************/
83:                  
84:                  /**
85:                   * Function: BOARD_Init(void)
86:                   * @param None
87:                   * @return None
88:                   * @brief Initializes the board for 80MHz SYSCLK and 20MHz PBCLK.
89:                   */
90:                  void BOARD_Init() {
91:                  #ifdef PIC32
92:                      //seeds the random number generator with the time
93:                      char seed1[] = __TIME__;
94:                      unsigned int seed2 = (((unsigned int) (seed1[7] ^ seed1[2])) << 8) | ((unsigned int) (seed1[4] ^ seed1[6]));
95:                      srand(seed2);
96:                  
97:                      //enables the interrupt system in the new style
98:                      
99:                      //INTConfigureSystem(INT_SYSTEM_CONFIG_MULT_VECTOR); 
100:                     unsigned int val;
101:                 
102:                     // set the CP0 cause IV bit high
103:                     asm volatile("mfc0   %0,$13" : "=r"(val));
104:                     val |= 0x00800000;
105:                     asm volatile("mtc0   %0,$13" : "+r"(val));
106:                     INTCONSET = _INTCON_MVEC_MASK;
107:                     
108:                     //INTEnableInterrupts();
109:                     int status;
110:                     asm volatile("ei    %0" : "=r"(status));
111:                     // Initialize for serial
112:                     SERIAL_Init();
113:                 #endif
114:                 }
115:                 
116:                 /**
117:                  * Function: BOARD_End(void)
118:                  * @param None
119:                  * @return None
120:                  * @brief shuts down all peripherals except for serial and A/D. Turns all pins
121:                  * into input
122:                  * @author Max Dunne, 2013.09.20  */
123:                 void BOARD_End() {
124:                 #ifdef PIC32
125:                     // set all interrupt enable flags to zero
126:                     IEC0 = 0;
127:                     IEC1 = 0;
128:                 
129:                     //set all flags to zero
130:                     IFS0 = 0;
131:                     IFS1 = 0;
132:                 
133:                     // disable timer interrupts, clear flags and turn off module
134:                     T1CON = 0;
135:                     T2CON = 0;
136:                     T3CON = 0;
137:                     T4CON = 0;
138:                     T5CON = 0;
139:                 
140:                 
141:                     // disable input capture interrupts, clear flags and turn off module
142:                     IC1CONCLR = _IC1CON_ICM_MASK;
143:                     IC2CONCLR = _IC2CON_ICM_MASK;
144:                     IC3CONCLR = _IC3CON_ICM_MASK;
145:                     IC4CONCLR = _IC4CON_ICM_MASK;
146:                     IC5CONCLR = _IC5CON_ICM_MASK;
147:                 
148:                     // disable output compare interrupts, clear flags and turn off module
149:                     OC1CONCLR = _OC1CON_ON_MASK;
150:                     OC2CONCLR = _OC2CON_ON_MASK;
151:                     OC3CONCLR = _OC3CON_ON_MASK;
152:                     OC4CONCLR = _OC4CON_ON_MASK;
153:                     OC5CONCLR = _OC5CON_ON_MASK;
154:                 
155:                     // disable I2C interrupts, clear flags and turn off module
156:                     I2C1CONCLR = _I2C1CON_ON_MASK;
157:                     I2C2CONCLR = _I2C2CON_ON_MASK;
158:                 
159:                     //disable spi interrupts, clear flags and turn off module
160:                     SPI1CONCLR = _SPI1CON_ON_MASK;
161:                     SPI2CONCLR = _SPI2CON_ON_MASK;
162:                 
163:                     // disable external interrupts, clear flags and turn off module
164:                 
165:                     // set all ports to be digital inputs
166:                     TurnPortToInput(TRISB);
167:                     TurnPortToInput(TRISC);
168:                     TurnPortToInput(TRISD);
169:                     TurnPortToInput(TRISE);
170:                     TurnPortToInput(TRISF);
171:                     TurnPortToInput(TRISG);
172:                 
173:                 #else
174:                     exit(0);
175:                 #endif   
176:                 }
177:                 
178:                 /**
179:                  * Function: BOARD_GetPBClock(void)
180:                  * @param None
181:                  * @return
182:                  */
183:                 unsigned int BOARD_GetPBClock() {
184:                     return PB_CLOCK;
185:                 }
186:                 
187:                 /**
188:                  * Function: BOARD_GetSysClock(void)
189:                  * @param None
190:                  * @return
191:                  */
192:                 unsigned int BOARD_GetSysClock() {
193:                     return SYSTEM_CLOCK;
194:                 }
195:                 
196:                 /*******************************************************************************
197:                  * PRIVATE FUNCTIONS                                                           *
198:                  ******************************************************************************/
199:                 
200:                 /**
201:                  * @Function SERIAL_Init(void)
202:                  * @param none
203:                  * @return none
204:                  * @brief  Initializes the UART subsystem to 115200 and sets up the circular buffer
205:                  * @author Max Dunne, 2011.11.10 */
206:                 
207:                 void SERIAL_Init(void) {
208:                 #ifdef PIC32
209:                     // we first clear the Configs Register to ensure a blank state and peripheral is off.
210:                     U1MODE = 0;
211:                     U1STA = 0;
212:                     //UARTConfigure(UART1, 0x00);
213:                 
214:                     //we then calculate the required frequency, note that this comes from plib source to avoid rounding errors
215:                     int sourceClock = BOARD_GetPBClock() >> 3;
216:                     int brg = sourceClock / 115200;
217:                     brg++;
218:                     brg >>= 1;
219:                     brg--;
220:                     U1BRG = brg;
221:                     //UARTSetDataRate(UART1, PB_CLOCK, 115200);
222:                     //UARTSetFifoMode(UART1, UART_INTERRUPT_ON_RX_NOT_EMPTY | UART_INTERRUPT_ON_RX_NOT_EMPTY);
223:                 
224:                     //we now enable the device
225:                 
226:                     U1STAbits.UTXEN = 1;
227:                     U1STAbits.URXEN = 1;
228:                     U1MODEbits.UARTEN = 1;
229:                 
230:                     //UARTEnable(UART1, UART_ENABLE_FLAGS(UART_PERIPHERAL | UART_TX | UART_RX));
231:                     __XC_UART = 1;
232:                     //printf("\r\n%d\t%d",U1BRG,brg);
233:                 #endif
234:                 }
235:                 
236:                 
237:                 
238:                 /*******************************************************************************
239:                  * OVERRIDE FUNCTIONS                                                          *
240:                  ******************************************************************************/
241:                 
242:                 /**
243:                  * @Function read(int handle, void *buffer, unsigned int len)
244:                  * @param handle
245:                  * @param buffer
246:                  * @param len
247:                  * @return Returns the number of characters read into buffer
248:                  * @brief Overrides the built-in function called for scanf() to ensure proper functionality
249:                  */
250:                 #ifdef PIC32
251:                 #ifndef LAB10_READ_OVERWRITE
252:                 
253:                 int read(int handle, char *buffer, unsigned int len) {
254:                     int i;
255:                     if (handle == 0) {
256:                         while (!U1STAbits.URXDA) {
257:                             if (U1STAbits.OERR) {
258:                                 U1STAbits.OERR = 0;
259:                             }
260:                             continue;
261:                         }
262:                         i = 0;
263:                         while (U1STAbits.URXDA) {
264:                             char tmp = U1RXREG;
265:                             if (tmp == '\r') {
266:                                 tmp = '\n';
267:                             }
268:                             *(char*) buffer++ = tmp;
269:                             //WriteUART1(tmp);
270:                             U1TXREG = tmp;
271:                             i++;
272:                         }
273:                         return i;
274:                     }
275:                     return 0;
276:                 }
277:                 #endif
278:                 #endif
279:                 
280:                 
281:                 #ifdef BOARD_TEST
282:                 
283:                 int main(void) {
284:                     BOARD_Init();
285:                     printf("\r\nThis stub tests SERIAL Functionality with scanf");
286:                     printf("\r\nIt will intake integers and divide by 2");
287:                     printf("\r\n Peripheral Clock: %d", BOARD_GetPBClock());
288:                     printf("\r\n Peripheral Clock: %d\r\n", BOARD_GetSysClock());
289:                     char trash;
290:                     int input;
291:                     while (1) {
292:                         scanf("%d%c", &input, &trash);
293:                         printf("\r\nEntered: %d\t/2: %d\r\n", input, input / 2);
294:                     }
295:                     while (1);
296:                     return 0;
297:                 }
298:                 #endif
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0023DC  27BDFFD0   ADDIU SP, SP, -48
9D0023E0  AFBF002C   SW RA, 44(SP)
9D0023E4  AFBE0028   SW FP, 40(SP)
9D0023E8  03A0F025   OR FP, SP, ZERO
9D0023EC  3C029D00   LUI V0, -25344
9D0023F0  8C4440BC   LW A0, 16572(V0)
9D0023F4  244340BC   ADDIU V1, V0, 16572
9D0023F8  8C630004   LW V1, 4(V1)
9D0023FC  AFC4001C   SW A0, 28(FP)
9D002400  AFC30020   SW V1, 32(FP)
9D002404  244240BC   ADDIU V0, V0, 16572
9D002408  90420008   LBU V0, 8(V0)
9D00240C  A3C20024   SB V0, 36(FP)
9D002410  83C30023   LB V1, 35(FP)
9D002414  83C2001E   LB V0, 30(FP)
9D002418  00621026   XOR V0, V1, V0
9D00241C  7C021420   SEB V0, V0
9D002420  00021200   SLL V0, V0, 8
9D002424  83C40020   LB A0, 32(FP)
9D002428  83C30022   LB V1, 34(FP)
9D00242C  00831826   XOR V1, A0, V1
9D002430  7C031C20   SEB V1, V1
9D002434  00431025   OR V0, V0, V1
9D002438  AFC20010   SW V0, 16(FP)
9D00243C  0F401011   JAL srand
9D002440  8FC40010   LW A0, 16(FP)
9D002444  40026800   MFC0 V0, Cause
9D002448  AFC20014   SW V0, 20(FP)
9D00244C  8FC30014   LW V1, 20(FP)
9D002450  3C020080   LUI V0, 128
9D002454  00621025   OR V0, V1, V0
9D002458  AFC20014   SW V0, 20(FP)
9D00245C  8FC20014   LW V0, 20(FP)
9D002460  40826800   MTC0 V0, Cause
9D002464  AFC20014   SW V0, 20(FP)
9D002468  3C02BF88   LUI V0, -16504
9D00246C  24031000   ADDIU V1, ZERO, 4096
9D002470  AC431008   SW V1, 4104(V0)
9D002474  41626020   EI V0
9D002478  AFC20018   SW V0, 24(FP)
9D00247C  0F400993   JAL SERIAL_Init
9D002480  00000000   NOP
9D002484  00000000   NOP
9D002488  03C0E825   OR SP, FP, ZERO
9D00248C  8FBF002C   LW RA, 44(SP)
9D002490  8FBE0028   LW FP, 40(SP)
9D002494  27BD0030   ADDIU SP, SP, 48
9D002498  03E00008   JR RA
9D00249C  00000000   NOP
9D0024A0  27BDFFF8   ADDIU SP, SP, -8
9D0024A4  AFBE0004   SW FP, 4(SP)
9D0024A8  03A0F025   OR FP, SP, ZERO
9D0024AC  3C02BF88   LUI V0, -16504
9D0024B0  AC401060   SW ZERO, 4192(V0)
9D0024B4  3C02BF88   LUI V0, -16504
9D0024B8  AC401070   SW ZERO, 4208(V0)
9D0024BC  3C02BF88   LUI V0, -16504
9D0024C0  AC401030   SW ZERO, 4144(V0)
9D0024C4  3C02BF88   LUI V0, -16504
9D0024C8  AC401040   SW ZERO, 4160(V0)
9D0024CC  3C02BF80   LUI V0, -16512
9D0024D0  AC400600   SW ZERO, 1536(V0)
9D0024D4  3C02BF80   LUI V0, -16512
9D0024D8  AC400800   SW ZERO, 2048(V0)
9D0024DC  3C02BF80   LUI V0, -16512
9D0024E0  AC400A00   SW ZERO, 2560(V0)
9D0024E4  3C02BF80   LUI V0, -16512
9D0024E8  AC400C00   SW ZERO, 3072(V0)
9D0024EC  3C02BF80   LUI V0, -16512
9D0024F0  AC400E00   SW ZERO, 3584(V0)
9D0024F4  3C02BF80   LUI V0, -16512
9D0024F8  24030007   ADDIU V1, ZERO, 7
9D0024FC  AC432004   SW V1, 8196(V0)
9D002500  3C02BF80   LUI V0, -16512
9D002504  24030007   ADDIU V1, ZERO, 7
9D002508  AC432204   SW V1, 8708(V0)
9D00250C  3C02BF80   LUI V0, -16512
9D002510  24030007   ADDIU V1, ZERO, 7
9D002514  AC432404   SW V1, 9220(V0)
9D002518  3C02BF80   LUI V0, -16512
9D00251C  24030007   ADDIU V1, ZERO, 7
9D002520  AC432604   SW V1, 9732(V0)
9D002524  3C02BF80   LUI V0, -16512
9D002528  24030007   ADDIU V1, ZERO, 7
9D00252C  AC432804   SW V1, 10244(V0)
9D002530  3C02BF80   LUI V0, -16512
9D002534  34038000   ORI V1, ZERO, -32768
9D002538  AC433004   SW V1, 12292(V0)
9D00253C  3C02BF80   LUI V0, -16512
9D002540  34038000   ORI V1, ZERO, -32768
9D002544  AC433204   SW V1, 12804(V0)
9D002548  3C02BF80   LUI V0, -16512
9D00254C  34038000   ORI V1, ZERO, -32768
9D002550  AC433404   SW V1, 13316(V0)
9D002554  3C02BF80   LUI V0, -16512
9D002558  34038000   ORI V1, ZERO, -32768
9D00255C  AC433604   SW V1, 13828(V0)
9D002560  3C02BF80   LUI V0, -16512
9D002564  34038000   ORI V1, ZERO, -32768
9D002568  AC433804   SW V1, 14340(V0)
9D00256C  3C02BF80   LUI V0, -16512
9D002570  34038000   ORI V1, ZERO, -32768
9D002574  AC435004   SW V1, 20484(V0)
9D002578  3C02BF80   LUI V0, -16512
9D00257C  34038000   ORI V1, ZERO, -32768
9D002580  AC435204   SW V1, 20996(V0)
9D002584  3C02BF80   LUI V0, -16512
9D002588  34038000   ORI V1, ZERO, -32768
9D00258C  AC435804   SW V1, 22532(V0)
9D002590  3C02BF80   LUI V0, -16512
9D002594  34038000   ORI V1, ZERO, -32768
9D002598  AC435A04   SW V1, 23044(V0)
9D00259C  3C02BF88   LUI V0, -16504
9D0025A0  3403FFFF   ORI V1, ZERO, -1
9D0025A4  AC436040   SW V1, 24640(V0)
9D0025A8  3C02BF88   LUI V0, -16504
9D0025AC  3403FFFF   ORI V1, ZERO, -1
9D0025B0  AC436080   SW V1, 24704(V0)
9D0025B4  3C02BF88   LUI V0, -16504
9D0025B8  3403FFFF   ORI V1, ZERO, -1
9D0025BC  AC4360C0   SW V1, 24768(V0)
9D0025C0  3C02BF88   LUI V0, -16504
9D0025C4  3403FFFF   ORI V1, ZERO, -1
9D0025C8  AC436100   SW V1, 24832(V0)
9D0025CC  3C02BF88   LUI V0, -16504
9D0025D0  3403FFFF   ORI V1, ZERO, -1
9D0025D4  AC436140   SW V1, 24896(V0)
9D0025D8  3C02BF88   LUI V0, -16504
9D0025DC  3403FFFF   ORI V1, ZERO, -1
9D0025E0  AC436180   SW V1, 24960(V0)
9D0025E4  00000000   NOP
9D0025E8  03C0E825   OR SP, FP, ZERO
9D0025EC  8FBE0004   LW FP, 4(SP)
9D0025F0  27BD0008   ADDIU SP, SP, 8
9D0025F4  03E00008   JR RA
9D0025F8  00000000   NOP
9D0025FC  27BDFFF8   ADDIU SP, SP, -8
9D002600  AFBE0004   SW FP, 4(SP)
9D002604  03A0F025   OR FP, SP, ZERO
9D002608  3C020131   LUI V0, 305
9D00260C  34422D00   ORI V0, V0, 11520
9D002610  03C0E825   OR SP, FP, ZERO
9D002614  8FBE0004   LW FP, 4(SP)
9D002618  27BD0008   ADDIU SP, SP, 8
9D00261C  03E00008   JR RA
9D002620  00000000   NOP
9D002624  27BDFFF8   ADDIU SP, SP, -8
9D002628  AFBE0004   SW FP, 4(SP)
9D00262C  03A0F025   OR FP, SP, ZERO
9D002630  3C0204C4   LUI V0, 1220
9D002634  3442B400   ORI V0, V0, -19456
9D002638  03C0E825   OR SP, FP, ZERO
9D00263C  8FBE0004   LW FP, 4(SP)
9D002640  27BD0008   ADDIU SP, SP, 8
9D002644  03E00008   JR RA
9D002648  00000000   NOP
9D00264C  27BDFFE0   ADDIU SP, SP, -32
9D002650  AFBF001C   SW RA, 28(SP)
9D002654  AFBE0018   SW FP, 24(SP)
9D002658  03A0F025   OR FP, SP, ZERO
9D00265C  3C02BF80   LUI V0, -16512
9D002660  AC406000   SW ZERO, 24576(V0)
9D002664  3C02BF80   LUI V0, -16512
9D002668  AC406010   SW ZERO, 24592(V0)
9D00266C  0F40097F   JAL BOARD_GetPBClock
9D002670  00000000   NOP
9D002674  000210C2   SRL V0, V0, 3
9D002678  AFC20010   SW V0, 16(FP)
9D00267C  8FC20010   LW V0, 16(FP)
9D002680  3C0391A2   LUI V1, -28254
9D002684  3463B3C5   ORI V1, V1, -19515
9D002688  00430018   MULT 0, V0, V1
9D00268C  00001810   MFHI V1
9D002690  00621821   ADDU V1, V1, V0
9D002694  00031C03   SRA V1, V1, 16
9D002698  000217C3   SRA V0, V0, 31
9D00269C  00621023   SUBU V0, V1, V0
9D0026A0  AFC20014   SW V0, 20(FP)
9D0026A4  8FC20014   LW V0, 20(FP)
9D0026A8  24420001   ADDIU V0, V0, 1
9D0026AC  AFC20014   SW V0, 20(FP)
9D0026B0  8FC20014   LW V0, 20(FP)
9D0026B4  00021043   SRA V0, V0, 1
9D0026B8  AFC20014   SW V0, 20(FP)
9D0026BC  8FC20014   LW V0, 20(FP)
9D0026C0  2442FFFF   ADDIU V0, V0, -1
9D0026C4  AFC20014   SW V0, 20(FP)
9D0026C8  8FC30014   LW V1, 20(FP)
9D0026CC  3C02BF80   LUI V0, -16512
9D0026D0  AC436040   SW V1, 24640(V0)
9D0026D4  3C03BF80   LUI V1, -16512
9D0026D8  8C626010   LW V0, 24592(V1)
9D0026DC  24040001   ADDIU A0, ZERO, 1
9D0026E0  7C825284   INS V0, A0, 10, 1
9D0026E4  AC626010   SW V0, 24592(V1)
9D0026E8  3C03BF80   LUI V1, -16512
9D0026EC  8C626010   LW V0, 24592(V1)
9D0026F0  24040001   ADDIU A0, ZERO, 1
9D0026F4  7C826304   INS V0, A0, 12, 1
9D0026F8  AC626010   SW V0, 24592(V1)
9D0026FC  3C03BF80   LUI V1, -16512
9D002700  94626000   LHU V0, 24576(V1)
9D002704  24040001   ADDIU A0, ZERO, 1
9D002708  7C827BC4   INS V0, A0, 15, 1
9D00270C  A4626000   SH V0, 24576(V1)
9D002710  24020001   ADDIU V0, ZERO, 1
9D002714  AF828010   SW V0, -32752(GP)
9D002718  00000000   NOP
9D00271C  03C0E825   OR SP, FP, ZERO
9D002720  8FBF001C   LW RA, 28(SP)
9D002724  8FBE0018   LW FP, 24(SP)
9D002728  27BD0020   ADDIU SP, SP, 32
9D00272C  03E00008   JR RA
9D002730  00000000   NOP
9D002734  27BDFFF0   ADDIU SP, SP, -16
9D002738  AFBE000C   SW FP, 12(SP)
9D00273C  03A0F025   OR FP, SP, ZERO
9D002740  AFC40010   SW A0, 16(FP)
9D002744  AFC50014   SW A1, 20(FP)
9D002748  AFC60018   SW A2, 24(FP)
9D00274C  8FC20010   LW V0, 16(FP)
9D002750  14400034   BNE V0, ZERO, 0x9D002824
9D002754  00000000   NOP
9D002758  1000000C   BEQ ZERO, ZERO, 0x9D00278C
9D00275C  00000000   NOP
9D002760  3C02BF80   LUI V0, -16512
9D002764  8C426010   LW V0, 24592(V0)
9D002768  7C420040   EXT V0, V0, 1, 1
9D00276C  304200FF   ANDI V0, V0, 255
9D002770  10400005   BEQ V0, ZERO, 0x9D002788
9D002774  00000000   NOP
9D002778  3C03BF80   LUI V1, -16512
9D00277C  8C626010   LW V0, 24592(V1)
9D002780  7C020844   INS V0, ZERO, 1, 1
9D002784  AC626010   SW V0, 24592(V1)
9D002788  00000000   NOP
9D00278C  3C02BF80   LUI V0, -16512
9D002790  8C426010   LW V0, 24592(V0)
9D002794  7C420000   EXT V0, V0, 0, 1
9D002798  304200FF   ANDI V0, V0, 255
9D00279C  1040FFF0   BEQ V0, ZERO, 0x9D002760
9D0027A0  00000000   NOP
9D0027A4  AFC00000   SW ZERO, 0(FP)
9D0027A8  10000015   BEQ ZERO, ZERO, 0x9D002800
9D0027AC  00000000   NOP
9D0027B0  3C02BF80   LUI V0, -16512
9D0027B4  8C426030   LW V0, 24624(V0)
9D0027B8  A3C20004   SB V0, 4(FP)
9D0027BC  83C30004   LB V1, 4(FP)
9D0027C0  2402000D   ADDIU V0, ZERO, 13
9D0027C4  14620003   BNE V1, V0, 0x9D0027D4
9D0027C8  00000000   NOP
9D0027CC  2402000A   ADDIU V0, ZERO, 10
9D0027D0  A3C20004   SB V0, 4(FP)
9D0027D4  8FC20014   LW V0, 20(FP)
9D0027D8  24430001   ADDIU V1, V0, 1
9D0027DC  AFC30014   SW V1, 20(FP)
9D0027E0  93C30004   LBU V1, 4(FP)
9D0027E4  A0430000   SB V1, 0(V0)
9D0027E8  83C30004   LB V1, 4(FP)
9D0027EC  3C02BF80   LUI V0, -16512
9D0027F0  AC436020   SW V1, 24608(V0)
9D0027F4  8FC20000   LW V0, 0(FP)
9D0027F8  24420001   ADDIU V0, V0, 1
9D0027FC  AFC20000   SW V0, 0(FP)
9D002800  3C02BF80   LUI V0, -16512
9D002804  8C426010   LW V0, 24592(V0)
9D002808  7C420000   EXT V0, V0, 0, 1
9D00280C  304200FF   ANDI V0, V0, 255
9D002810  1440FFE7   BNE V0, ZERO, 0x9D0027B0
9D002814  00000000   NOP
9D002818  8FC20000   LW V0, 0(FP)
9D00281C  10000002   BEQ ZERO, ZERO, 0x9D002828
9D002820  00000000   NOP
9D002824  00001025   OR V0, ZERO, ZERO
9D002828  03C0E825   OR SP, FP, ZERO
9D00282C  8FBE000C   LW FP, 12(SP)
9D002830  27BD0010   ADDIU SP, SP, 16
9D002834  03E00008   JR RA
9D002838  00000000   NOP
---  C:/Program Files (x86)/Microchip/MPLABX/v5.35/packs/Microchip/PIC32MX_DFP/1.2.228/xc32/startup/crt0.S
                                                  1:     /*********************************************************************
                                                  2:      *
                                                  3:      *                  C Runtime Startup
                                                  4:      *
                                                  5:      *********************************************************************
                                                  6:      * Filename:        crt0.S
                                                  7:      *
                                                  8:      * Processor:       PIC32
                                                  9:      *
                                                  10:     * Compiler:        MPLAB XC32
                                                  11:     *                  MPLAB X IDE
                                                  12:     * Company:         Microchip Technology Inc.
                                                  13:     *
                                                  14:     * Software License Agreement
                                                  15:     *
                                                  16:     * Copyright (c) 2014, Microchip Technology Inc. and its subsidiaries ("Microchip")
                                                  17:     * All rights reserved.
                                                  18:     *
                                                  19:     * This software is developed by Microchip Technology Inc. and its
                                                  20:     * subsidiaries ("Microchip").
                                                  21:     *
                                                  22:     * Redistribution and use in source and binary forms, with or without
                                                  23:     * modification, are permitted provided that the following conditions are met:
                                                  24:     *
                                                  25:     * 1.      Redistributions of source code must retain the above copyright
                                                  26:     * notice, this list of conditions and the following disclaimer.
                                                  27:     *
                                                  28:     * 2.      Redistributions in binary form must reproduce the above copyright
                                                  29:     * notice, this list of conditions and the following disclaimer in the
                                                  30:     * documentation and/or other materials provided with the distribution.
                                                  31:     *
                                                  32:     * 3.      Microchip's name may not be used to endorse or promote products
                                                  33:     * derived from this software without specific prior written permission.
                                                  34:     *
                                                  35:     * THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED
                                                  36:     * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
                                                  37:     * MERCHANTABILITY AND FITNESS FOR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
                                                  38:     * MICROCHIP BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
                                                  39:     * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
                                                  40:     * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS;
                                                  41:     * OR BUSINESS INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                                  42:     * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
                                                  43:     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
                                                  44:     * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                                  45:     *
                                                  46:     ********************************************************************/
                                                  47:    
                                                  48:    #include "xc.h"
                                                  49:    #include <cp0defs.h>
                                                  50:    
                                                  51:    #ifdef __LIBBUILD__
                                                  52:       # Replace the standard debugging information with a simple filename. This
                                                  53:       # prevents the library build directory from showing up in MPLAB IDE. It
                                                  54:       # also effectively disables source-line debugging.
                                                  55:       .file 1 "libpic32/startup/crt0.S"
                                                  56:       .loc 1 0
                                                  57:    #endif
                                                  58:    
                                                  59:    #if (__XC32_VERSION > 1000) && !defined(CPP_INIT)
                                                  60:    #define CPP_INIT
                                                  61:    #endif
                                                  62:    
                                                  63:    #if !defined(PIC32_SRS_SET_COUNT)
                                                  64:    #  if defined(__PIC32_SRS_SET_COUNT)
                                                  65:    #    define PIC32_SRS_SET_COUNT __PIC32_SRS_SET_COUNT
                                                  66:    #  else
                                                  67:    #    warning PIC32_SRS_SET_COUNT not defined on build line
                                                  68:    #    define PIC32_SRS_SET_COUNT 2
                                                  69:    #  endif
                                                  70:    #endif
                                                  71:    
                                                  72:    #if defined(__PIC32MX) || defined(__PIC32MM) || defined(__PIC32MZ)
                                                  73:    #define INIT_DATA 1
                                                  74:    #endif
                                                  75:    
                                                  76:    /* This file contains 32-bit assembly code */
                                                  77:           .set nomips16
                                                  78:    
                                                  79:            ##################################################################
                                                  80:            # Entry point of the entire application
                                                  81:            ##################################################################
                                                  82:            .section .reset,code,keep
                                                  83:            .align 2
                                                  84:            .set noreorder
                                                  85:            .ent _reset
                                                  86:    
                                                  87:    ############################
                                                  88:    # Begin ISA switching code #
                                                  89:    ############################
                                                  90:    
                                                  91:    #if defined (__mips_micromips)
                                                  92:            .set micromips
                                                  93:    #endif
                                                  94:    
                                                  95:    #if (defined(__PIC32_HAS_MICROMIPS)) && (defined(__PIC32_HAS_MIPS32R2))
                                                  96:    _reset:
                                                  97:            .word 0x10000003     /* MIPS32:    branch forward 0x10 bytes from here  */
                                                  98:                                 /* MicroMIPS: ADDI32 $0, $0, 0x0007 (nop)          */
                                                  99:                                 /* DO NOT change the relative branch               */
                                                  100:   
                                                  101:           .word 0x00000000     /* NOP */
                                                  102:   __reset_micromips_isa:
                                                  103:           .set    micromips
                                                  104:           jal     _startup
                                                  105:           nop
                                                  106:   
                                                  107:           .align 2
                                                  108:           /* Device not in proper ISA mode */
                                                  109:           .set nomicromips
                                                  110:   __reset_switch_isa:
                                                  111:           jal _startup
                                                  112:           nop
                                                  113:   
                                                  114:   #else
                                                  115:   
                                                  116:   _reset:
BFC00000  0FF00002   JAL 0xBFC00008               117:           jal _startup
BFC00004  00000000   NOP                          118:           nop
                                                  119:   
                                                  120:   #endif  /* __PIC32_HAS_MICROMIPS */
                                                  121:   
                                                  122:           .align 2
                                                  123:           .end _reset
                                                  124:           .globl _reset
                                                  125:           .size _reset, .-_reset
                                                  126:   
                                                  127:           .section .reset.startup,code,keep
                                                  128:           .align 2
                                                  129:           .set noreorder
                                                  130:   
                                                  131:   #if defined (__mips_micromips)
                                                  132:           .set micromips
                                                  133:   #else
                                                  134:           .set nomicromips
                                                  135:   #endif
                                                  136:   
                                                  137:   ############################
                                                  138:   # End ISA switching code   #
                                                  139:   ############################
                                                  140:   
                                                  141:           ##################################################################
                                                  142:           # Startup code
                                                  143:           ##################################################################
                                                  144:           .align 2
                                                  145:           .globl _startup
                                                  146:           .set noreorder
                                                  147:           .ent _startup
                                                  148:   _startup:
                                                  149:           ##################################################################
                                                  150:           # If entered because of an NMI, jump to the NMI handler.
                                                  151:           ##################################################################
BFC00008  401A6000   MFC0 K0, Status              152:           mfc0    k0,_CP0_STATUS
BFC0000C  7F5A04C0   EXT K0, K0, 19, 1            153:           ext     k0,k0,19,1              # Extract NMI bit
BFC00010  13400005   BEQ K0, ZERO, 0xBFC00028     154:           beqz    k0,_no_nmi
BFC00014  00000000   NOP                          155:           nop
BFC00018  3C1A9D00   LUI K0, -25344               156:           la      k0,_nmi_handler
BFC00020  03400008   JR K0                        157:           jr      k0
BFC00024  00000000   NOP                          158:           nop
                                                  159:   _no_nmi:
                                                  160:   
                                                  161:           ##################################################################
                                                  162:           # Initialize Stack Pointer
                                                  163:           #   _stack is initialized by the linker script to point to the
                                                  164:           #    starting location of the stack in DRM
                                                  165:           ##################################################################
BFC00028  3C1DA000   LUI SP, -24576               166:           la      sp,_stack
                                                  167:   
                                                  168:           ##################################################################
                                                  169:           # Initialize Global Pointer
                                                  170:           #   _gp is initialized by the linker script to point to "middle"
                                                  171:           #   of the small variables region
                                                  172:           ##################################################################
BFC00030  3C1CA001   LUI GP, -24575               173:           la      gp,_gp
                                                  174:   
                                                  175:   #if (PIC32_SRS_SET_COUNT == 2)
                                                  176:           ##################################################################
                                                  177:           # Initialize Global Pointer in Shadow Set
                                                  178:           #   The SRSCtl's PSS field must be set to the shadow set in which
                                                  179:           #   to initialize the global pointer.  Since we have only a
                                                  180:           #   single shadow set (besides the normal), we will initialize
                                                  181:           #   SRSCtl<PSS> to SRSCtl<HSS>.  We then write the global pointer
                                                  182:           #   to the previous shadow set to ensure that on interrupt, the
                                                  183:           #   global pointer has been initialized.
                                                  184:           ##################################################################
BFC00038  40096002   MFC0 T1, SRSCtl              185:           mfc0    t1,_CP0_SRSCTL          # Read SRSCtl register
BFC0003C  01205820   ADD T3, T1, ZERO             186:           add     t3,t1,zero              # Save off current SRSCtl
BFC00040  7D2A1E80   EXT T2, T1, 26, 4            187:           ext     t2,t1,26,4              # to obtain HSS field
BFC00044  7D494984   INS T1, T2, 6, 4             188:           ins     t1,t2,6,4               # Put HSS field
BFC00048  40896002   MTC0 T1, SRSCtl              189:           mtc0    t1,_CP0_SRSCTL          # into SRSCtl<PSS>
BFC0004C  000000C0   EHB                          190:           ehb                             # Clear hazard before using new SRSCTL
BFC00050  41DCE000   WRPGPR GP, GP                191:           wrpgpr  gp,gp                   # Set global pointer in PSS
BFC00054  408B6002   MTC0 T3, SRSCtl              192:           mtc0    t3,_CP0_SRSCTL          # Restore SRSCtl
BFC00058  000000C0   EHB                          193:           ehb
                                                  194:   
                                                  195:   #elif (PIC32_SRS_SET_COUNT > 2)
                                                  196:           ##################################################################
                                                  197:           # Initialize Global Pointer in Shadow Set(s)
                                                  198:           #   The SRSCtl PSS field must be set to the shadow set in which
                                                  199:           #   to initialize the global pointer.  We will initialize
                                                  200:           #   SRSCtl<PSS> to the number of reg sets and work down to set zero.
                                                  201:           #   We write the global pointer to the previous shadow set to
                                                  202:           #   ensure that on interrupt, the global pointer has been
                                                  203:           #   initialized.
                                                  204:           ##################################################################
                                                  205:           mfc0    t1,_CP0_SRSCTL          # Read SRSCtl register
                                                  206:           add     t3,t1,zero              # Save off current SRSCtl
                                                  207:   
                                                  208:           li      t2,(PIC32_SRS_SET_COUNT-1)
                                                  209:   
                                                  210:   1:      ins     t1,t2,6,4               # Put next shadow set field
                                                  211:           mtc0    t1,_CP0_SRSCTL          # into SRSCtl<PSS>
                                                  212:           ehb                             # Clear hazard before using new SRSCTL
                                                  213:           wrpgpr  gp,gp                   # Set global pointer in PSS
                                                  214:   
                                                  215:           addiu   t2,t2,-1                # Next lower shadow set
                                                  216:                                           # Loop for all sets
                                                  217:           bne     t2,$0,1b                # Down to zero (normal GPR set)
                                                  218:           nop
                                                  219:   
                                                  220:           mtc0    t3,_CP0_SRSCTL          # Restore SRSCtl
                                                  221:           ehb
                                                  222:   
                                                  223:   #endif /* (PIC32_SRS_SET_COUNT > 2) */
                                                  224:   
                                                  225:           ##################################################################
                                                  226:           # Call the "on reset" procedure
                                                  227:           ##################################################################
BFC0005C  3C089D00   LUI T0, -25344               228:           la      t0,_on_reset
BFC00064  0100F809   JALR T0                      229:           jalr    t0
BFC00068  00000000   NOP                          230:           nop
                                                  231:   
                                                  232:   #if defined(INIT_MMU_MZ_FIXED) || defined(__PIC32_HAS_MMU_MZ_FIXED)
                                                  233:           ##################################################################
                                                  234:           # Initialize TLB for fixed mapping to EBI and SQI
                                                  235:           ##################################################################
                                                  236:           .extern __pic32_tlb_init_ebi_sqi
                                                  237:           la      t0,__pic32_tlb_init_ebi_sqi
                                                  238:           jalr    t0
                                                  239:           nop
                                                  240:   #endif
                                                  241:   
                                                  242:           ##################################################################
                                                  243:           # Clear uninitialized data sections
                                                  244:           ##################################################################
                                                  245:   _start_bss_init:
BFC0006C  3C08A000   LUI T0, -24576               246:           la      t0,_bss_begin
BFC00074  3C09A000   LUI T1, -24576               247:           la      t1,_bss_end
BFC0007C  10000003   BEQ ZERO, ZERO, 0xBFC0008C   248:           b       _bss_check
BFC00080  00000000   NOP                          249:           nop
                                                  250:   
                                                  251:   _bss_init:
BFC00084  AD000000   SW ZERO, 0(T0)               252:           sw      zero,0x0(t0)
BFC00088  25080004   ADDIU T0, T0, 4              253:           addu    t0,4
                                                  254:   _bss_check:
BFC0008C  0109082B   SLTU AT, T0, T1              255:           bltu    t0,t1,_bss_init
BFC00094  00000000   NOP                          256:           nop
                                                  257:   
                                                  258:   #if defined(INIT_L1_CACHE) || defined(__PIC32_HAS_L1CACHE)
                                                  259:           ##################################################################
                                                  260:           # Initialize L1 cache. This must be done after bss clearing
                                                  261:           # since the _bss_end symbol may not be cache-line aligned.
                                                  262:           ##################################################################
                                                  263:           .extern   __pic32_init_cache
                                                  264:           la      t0,__pic32_init_cache
                                                  265:           jalr    t0
                                                  266:           nop
                                                  267:   #endif
                                                  268:   
                                                  269:   #if defined(INIT_DATA) || defined(__PIC32_HAS_INIT_DATA)
                                                  270:   
                                                  271:   #if defined(__LIBBUILD__) /* Prebuilt crt0.o file */
                                                  272:   
                                                  273:           ##################################################################
                                                  274:           # Initialize data using the linker-generated .dinit table
                                                  275:           # For use with XC32 versions prior to XC32 v2.10 only.
                                                  276:           ##################################################################
                                                  277:           .equiv FMT_CLEAR,0
                                                  278:           .equiv FMT_COPY,1
                                                  279:   _dinit_init:
                                                  280:           la      t0,_dinit_addr
                                                  281:   
                                                  282:   #define SRC t0
                                                  283:   #define DST t1
                                                  284:   #define LEN t2
                                                  285:   #define FMT t3
                                                  286:   
                                                  287:   0:      lw      DST,0(SRC)
                                                  288:           beqz    DST,9f
                                                  289:           addu    SRC,4
                                                  290:           lw      LEN,0(SRC)
                                                  291:           addu    SRC,4
                                                  292:           lw      FMT,0(SRC)
                                                  293:           beq     FMT,$0,_dinit_clear
                                                  294:           addu    SRC,4
                                                  295:   
                                                  296:   _dinit_copy:
                                                  297:           lbu     t4,0(SRC)
                                                  298:           subu    LEN,1
                                                  299:           addu    SRC,1
                                                  300:           sb      t4,0(DST)
                                                  301:           bne     LEN,$0,_dinit_copy
                                                  302:           addu    DST,1
                                                  303:   
                                                  304:           b       _dinit_end
                                                  305:           nop
                                                  306:   
                                                  307:   _dinit_clear:
                                                  308:           sb      $0,(DST)
                                                  309:           subu    LEN,1
                                                  310:           bne     LEN,$0,_dinit_clear
                                                  311:           addu    DST,1
                                                  312:   
                                                  313:   _dinit_end:
                                                  314:           addu    SRC,3
                                                  315:           addiu   LEN,$0,-4
                                                  316:           and     SRC,LEN,SRC
                                                  317:           lw      DST,0(SRC)
                                                  318:           bne     DST,$0,0b
                                                  319:           nop
                                                  320:   9:
                                                  321:   
                                                  322:   #else
                                                  323:           #####################################################################
                                                  324:           # Initialize data using the linker-generated .dinit table
                                                  325:           # XC32 v2.10 and later provide the data-init code in a separate file
                                                  326:           # packaged with the compiler rather than the DFP. Use that init
                                                  327:           # code instead.
                                                  328:           #####################################################################
                                                  329:           .extern   __pic32_data_init
BFC00098  3C089D00   LUI T0, -25344               330:           la      t0, __pic32_data_init
BFC000A0  0100F809   JALR T0                      331:           jalr    t0
BFC000A4  00000000   NOP                          332:           nop
                                                  333:   #endif /* __LIBBUILD__ */
                                                  334:   
                                                  335:   #endif /* INIT_DATA */
                                                  336:   
                                                  337:           ##################################################################
                                                  338:           # If there are no RAM functions, skip the next section --
                                                  339:           # initializing bus matrix registers.
                                                  340:           ##################################################################
BFC000A8  3C090000   LUI T1, 0                    341:           la      t1,_ramfunc_begin
BFC000B0  11200010   BEQ T1, ZERO, 0xBFC000F4     342:           beqz    t1,_ramfunc_done
BFC000B4  00000000   NOP                          343:           nop
                                                  344:   
                                                  345:   #if defined(INIT_SSX) || defined(__PIC32_HAS_SSX)
                                                  346:     /* No initialization required */
                                                  347:   #else /* Use BMX */
                                                  348:           ##################################################################
                                                  349:           # Initialize bus matrix registers if RAM functions exist in the
                                                  350:           # application
                                                  351:           ##################################################################
BFC000B8  3C090000   LUI T1, 0                    352:           la      t1,_bmxdkpba_address
BFC000C0  3C0ABF88   LUI T2, -16504               353:           la      t2,BMXDKPBA
BFC000C8  AD490000   SW T1, 0(T2)                 354:           sw      t1,0(t2)
BFC000CC  3C090000   LUI T1, 0                    355:           la      t1,_bmxdudba_address
BFC000D4  3C0ABF88   LUI T2, -16504               356:           la      t2,BMXDUDBA
BFC000DC  AD490000   SW T1, 0(T2)                 357:           sw      t1,0(t2)
BFC000E0  3C090000   LUI T1, 0                    358:           la      t1,_bmxdupba_address
BFC000E8  3C0ABF88   LUI T2, -16504               359:           la      t2,BMXDUPBA
BFC000F0  AD490000   SW T1, 0(T2)                 360:           sw      t1,0(t2)
                                                  361:   #endif /* INIT_SSX */
                                                  362:   
                                                  363:   _ramfunc_done:
                                                  364:   
                                                  365:           ##################################################################
                                                  366:           # Initialize CP0 registers
                                                  367:           ##################################################################
                                                  368:           # Initialize Count register
                                                  369:           ##################################################################
BFC000F4  40804800   MTC0 ZERO, Count             370:           mtc0    zero,_CP0_COUNT
                                                  371:   
                                                  372:           ##################################################################
                                                  373:           # Initialize Compare register
                                                  374:           ##################################################################
BFC000F8  240AFFFF   ADDIU T2, ZERO, -1           375:           li      t2,-1
BFC000FC  408A5800   MTC0 T2, Compare             376:           mtc0    t2,_CP0_COMPARE
                                                  377:   
                                                  378:           ##################################################################
                                                  379:           # Ensure BEV set and Initialize EBase register
                                                  380:           ##################################################################
BFC00100  3C080040   LUI T0, 64                   381:           li      t0, (1<<22)
BFC00104  400A6000   MFC0 T2, Status              382:           mfc0    t2,_CP0_STATUS
BFC00108  010A5025   OR T2, T0, T2                383:           or      t2,t0,t2               # Set BEV bit 22
BFC0010C  408A6000   MTC0 T2, Status              384:           mtc0    t2,_CP0_STATUS
                                                  385:   
BFC00110  3C099FC0   LUI T1, -24640               386:           la      t1,_ebase_address
BFC00118  000000C0   EHB                          387:           ehb
BFC0011C  40897801   MTC0 T1, EBase               388:           mtc0    t1,_CP0_EBASE
                                                  389:           
                                                  390:           ##################################################################
                                                  391:           # Initialize PRISS register to a safer default for devices that 
                                                  392:           # have it. The application should re-initialize it to an
                                                  393:           # application-specific value.
                                                  394:           #
                                                  395:           # We do NOT do this by default.
                                                  396:           ##################################################################
                                                  397:   #if defined(USE_DEFAULT_PRISS_VALUE) 
                                                  398:   #if defined(_PRISS_PRI7SS_POSITION)
                                                  399:   #if (PIC32_SRS_SET_COUNT >= 7)
                                                  400:           li	    t2, 0x76540000
                                                  401:           addiu	t2, t2, 0x3210
                                                  402:           lui	    t1, %hi(PRISS)
                                                  403:           sw	    t2, %lo(PRISS)(t1)
                                                  404:   #elif (PIC32_SRS_SET_COUNT <= 2)
                                                  405:           li	    t2, 0x10000000
                                                  406:           lui	    t1, %hi(PRISS)
                                                  407:           sw	    t2, %lo(PRISS)(t1)
                                                  408:   #endif /* PIC32_SRS_SET_COUNT */
                                                  409:   #endif /* _PRISS_PRI7SS_POSITION */
                                                  410:   #endif /* USE_DEFAULT_PRISS_VALUE */
                                                  411:           
                                                  412:           ##################################################################
                                                  413:           # Initialize IntCtl/INTCON.VS register with _vector_spacing
                                                  414:           ##################################################################
BFC00120  3C090000   LUI T1, 0                    415:           la      t1,_vector_spacing
                                                  416:   #if defined(INIT_INTCONVS) || defined(__PIC32_HAS_INTCONVS)
                                                  417:           la      t0, INTCON
                                                  418:           lw      t2, 0(t0)
                                                  419:           li      t2, 0
                                                  420:           ins     t2, t1, 16, 7
                                                  421:   #if defined(__PIC32MM) && defined(_INTCON_MVEC_MASK)
                                                  422:           ori     t2, t2, _INTCON_MVEC_MASK
                                                  423:   #endif
                                                  424:           sw      t2, 0(t0)
                                                  425:   #endif
BFC00128  240A0000   ADDIU T2, ZERO, 0            426:           li      t2,0                    # Clear t2 and
BFC0012C  7D2A4944   INS T2, T1, 5, 5             427:           ins     t2,t1,5,5               # shift value to VS field
BFC00130  408A6001   MTC0 T2, IntCtl              428:           mtc0    t2,_CP0_INTCTL
                                                  429:   
                                                  430:           ##################################################################
                                                  431:           # Initialize CAUSE registers
                                                  432:           # - Enable counting of Count register <DC = 0>
                                                  433:           # - Use special exception vector <IV = 1>
                                                  434:           # - Clear pending software interrupts <IP1:IP0 = 0>
                                                  435:           ##################################################################
BFC00134  3C090080   LUI T1, 128                  436:           li      t1,0x00800000
BFC00138  40896800   MTC0 T1, Cause               437:           mtc0    t1,_CP0_CAUSE
                                                  438:   
                                                  439:           ##################################################################
                                                  440:           # Initialize STATUS register
                                                  441:           # - Access to Coprocessor 0 not allowed in user mode <CU0 = 0>
                                                  442:           # - User mode uses configured endianness <RE = 0>
                                                  443:           # - Preserve Bootstrap Exception vectors <BEV>
                                                  444:           # - Preserve soft reset <SR> and non-maskable interrupt <NMI>
                                                  445:           # - CorExtend enabled based on whether CorExtend User Defined
                                                  446:           #   Instructions have been implemented <CEE = Config<UDI>>
                                                  447:           # - Disable any pending interrupts <IM7..IM2 = 0, IM1..IM0 = 0>
                                                  448:           # - Disable hardware interrupts <IPL7:IPL2 = 0>
                                                  449:           # - Base mode is Kernel mode <UM = 0>
                                                  450:           # - Error level is normal <ERL = 0>
                                                  451:           # - Exception level is normal <EXL = 0>
                                                  452:           # - Interrupts are disabled <IE = 0>
                                                  453:           # - DSPr2 ASE is enabled for devices that support it <MX = 1>
                                                  454:           # - FPU64 is enabled for devices that support it <CU1=1> & <FR=1>
                                                  455:           ##################################################################
BFC0013C  40088000   MFC0 T0, Config              456:           mfc0    t0,_CP0_CONFIG
BFC00140  7D090580   EXT T1, T0, 22, 1            457:           ext     t1,t0,22,1              # Extract UDI from Config register
BFC00144  00094C40   SLL T1, T1, 17               458:           sll     t1,t1,17                # Move UDI to Status.CEE location
BFC00148  40086000   MFC0 T0, Status              459:           mfc0    t0,_CP0_STATUS
BFC0014C  3C010058   LUI AT, 88                   460:           and     t0,t0,0x00580000        # Preserve SR, NMI, and BEV
                                                  461:   #if defined(INIT_DSPR2) || defined(__PIC32_HAS_DSPR2)
                                                  462:           li      t2, 0x01000000          # Set the Status.MX bit to enable DSP
                                                  463:           or      t0,t2,t0
                                                  464:   #endif
                                                  465:   #if defined(INIT_FPU64) || defined(__PIC32_HAS_FPU64)
                                                  466:           li      t2, 0x24000000          # Set the Status.CU1 and Status.FR bits to
                                                  467:           or      t0,t2,t0                # enable the FPU in FR64 mode
                                                  468:   #endif
                                                  469:   
BFC00154  01284025   OR T0, T1, T0                470:           or      t0,t1,t0                # Include Status.CEE (from UDI)
BFC00158  40886000   MTC0 T0, Status              471:           mtc0    t0,_CP0_STATUS
                                                  472:           
                                                  473:   #if defined(PIC32WK) && defined(_CP0_CONFIG3) && defined (__mips_micromips)
                                                  474:           # Ensure that the ISAONEXEC bit is set for the microMIPS ISA for the PIC32WK family
                                                  475:           # _bsc0 (_CP0_CONFIG3, _CP0_CONFIG3_SELECT, ISAONEXEC_MASK)
                                                  476:           li      t1,0x10000              # ISAONEXEC bit
                                                  477:           mfc0    t0,_CP0_CONFIG3
                                                  478:           or      t1,t0,t1
                                                  479:           mtc0    t1,_CP0_CONFIG3
                                                  480:   
                                                  481:   #endif /* PIC32WK && __mips_micromips */
                                                  482:   
                                                  483:   #if defined(INIT_FPU64) || defined(__PIC32_HAS_FPU64)
                                                  484:                                           # FPU Control and Status
                                                  485:           li      t2,0x1000000            # FCSR: RM=0, FS=1, FO=0, FN=0
                                                  486:                                           # Enables: 0b00000 E=1, V=0, Z=0, O=0, U=0, I=0
                                                  487:           ctc1    t2, $31                 # High perf on denormal operands & tiny results
                                                  488:   #endif
BFC0015C  000000C0   EHB                          489:           ehb
                                                  490:   
                                                  491:           ##################################################################
                                                  492:           # Call the "on bootstrap" procedure
                                                  493:           ##################################################################
BFC00160  3C089D00   LUI T0, -25344               494:           la      t0,_on_bootstrap
BFC00168  0100F809   JALR T0                      495:           jalr    t0
BFC0016C  00000000   NOP                          496:           nop
                                                  497:   
                                                  498:           ##################################################################
                                                  499:           # Initialize Status<BEV> for normal exception vectors
                                                  500:           ##################################################################
BFC00170  40086000   MFC0 T0, Status              501:           mfc0    t0,_CP0_STATUS
BFC00174  3C01FFBF   LUI AT, -65                  502:           and     t0,t0,0xffbfffff        # Clear BEV
BFC00180  40886000   MTC0 T0, Status              503:           mtc0    t0,_CP0_STATUS
                                                  504:   
                                                  505:           ##################################################################
                                                  506:           # Call main. We do this via a thunk in the text section so that
                                                  507:           # a normal jump and link can be used, enabling the startup code
                                                  508:           # to work properly whether main is written in MIPS16 or MIPS32
                                                  509:           # code. I.e., the linker will correctly adjust the JAL to JALX if
                                                  510:           # necessary
                                                  511:           ##################################################################
BFC00184  30840000   ANDI A0, A0, 0               512:           and     a0,a0,0
BFC00188  30A50000   ANDI A1, A1, 0               513:           and     a1,a1,0
BFC0018C  3C089D00   LUI T0, -25344               514:           la      t0,_main_entry
BFC00194  01000008   JR T0                        515:           jr      t0
BFC00198  00000000   NOP                          516:           nop
                                                  517:   
                                                  518:           .end _startup
                                                  519:   
                                                  520:           ##################################################################
                                                  521:           # Boot Exception Vector Handler
                                                  522:           # Jumps to _bootstrap_exception_handler
                                                  523:           ##################################################################
                                                  524:           .section .bev_handler,code,keep
                                                  525:           .align 2
                                                  526:           .set noreorder
                                                  527:           .ent _bev_exception
                                                  528:   _bev_exception:
BFC00380  3C1A9D00   LUI K0, -25344               529:           la        k0,_bootstrap_exception_handler
BFC00388  03400008   JR K0                        530:           jr        k0
BFC0038C  00000000   NOP                          531:           nop
                                                  532:   
                                                  533:           .end _bev_exception
                                                  534:   
                                                  535:           ##################################################################
                                                  536:           # General Exception Vector Handler
                                                  537:           # Jumps to _general_exception_context
                                                  538:           ##################################################################
                                                  539:           .section .gen_handler,code
                                                  540:           .align 2
                                                  541:           .set noreorder
                                                  542:           .ent _gen_exception
                                                  543:   _gen_exception:
9FC01180  3C1A9D00   LUI K0, -25344               544:   0:      la      k0,_general_exception_context
9FC01188  03400008   JR K0                        545:           jr      k0
9FC0118C  00000000   NOP                          546:           nop
                                                  547:   
                                                  548:           .end _gen_exception
                                                  549:   
                                                  550:   #if defined(INIT_MMU_MZ_FIXED) || defined(__PIC32_HAS_MMU_MZ_FIXED)
                                                  551:           ##################################################################
                                                  552:           # Simple TLB-Refill Exception Vector
                                                  553:           # Jumps to _simple_tlb_refill_exception_context
                                                  554:           ##################################################################
                                                  555:           .section .simple_tlb_refill_vector,code,keep
                                                  556:           .align 2
                                                  557:           .set noreorder
                                                  558:           .ent simple_tlb_refill_vector
                                                  559:   simple_tlb_refill_vector:
                                                  560:           la      k0,_simple_tlb_refill_exception_context
                                                  561:           jr      k0
                                                  562:           nop
                                                  563:   
                                                  564:           .end simple_tlb_refill_vector
                                                  565:   #endif
                                                  566:   
                                                  567:   #if defined(INIT_L1_CACHE) || defined(__PIC32_HAS_L1CACHE)
                                                  568:           ##################################################################
                                                  569:           # Cache-Error Exception Vector Handler
                                                  570:           # Jumps to _cache_err_exception_context
                                                  571:           ##################################################################
                                                  572:           .section .cache_err_vector,code,keep
                                                  573:           .align 2
                                                  574:           .set noreorder
                                                  575:           .ent _cache_err_vector
                                                  576:   _cache_err_vector:
                                                  577:           la      k0,_cache_err_exception_context
                                                  578:           jr      k0
                                                  579:           nop
                                                  580:   
                                                  581:           .end _cache_err_vector
                                                  582:   #endif
                                                  583:   
                                                  584:           .section .text.main_entry,code,keep
                                                  585:           .align 2
                                                  586:           .ent _main_entry
                                                  587:   _main_entry:
                                                  588:   
                                                  589:   #if defined(CPP_INIT)
                                                  590:           .weak _init
                                                  591:           # call .init section to run constructors etc
9D003E30  3C040000   LUI A0, 0                    592:           lui	a0,%hi(_init)
9D003E34  27BDFFE8   ADDIU SP, SP, -24            593:           addiu	sp,sp,-24
9D003E38  24840000   ADDIU A0, A0, 0              594:           addiu	a0,a0,%lo(_init)
9D003E3C  10800003   BEQ A0, ZERO, 0x9D003E4C     595:           beq	a0,$0,2f
9D003E40  AFBF0014   SW RA, 20(SP)                596:           sw	$31,20(sp)	 #,
9D003E44  0080F809   JALR A0                      597:           jalr	a0
9D003E48  00000000   NOP                          598:           nop
                                                  599:   2:
                                                  600:   #endif
9D003E4C  30840000   ANDI A0, A0, 0               601:           and     a0,a0,0
9D003E50  30A50000   ANDI A1, A1, 0               602:           and     a1,a1,0
                                                  603:   
                                                  604:           ##################################################################
                                                  605:   
                                                  606:           # Call main
                                                  607:           ##################################################################
9D003E54  3C089D00   LUI T0, -25344               608:           la    	t0,main
9D003E5C  0100F809   JALR T0                      609:           jalr 	t0
9D003E60  00000000   NOP                          610:           nop
                                                  611:   
                                                  612:   #if defined(CALL_EXIT)
                                                  613:           ##################################################################
                                                  614:           # Call exit()
                                                  615:           ##################################################################
                                                  616:           jal exit
                                                  617:           nop
                                                  618:   #endif
                                                  619:   
                                                  620:           ##################################################################
                                                  621:           # Just in case, go into infinite loop
                                                  622:           # Call a software breakpoint only with -mdebugger compiler option
                                                  623:           ##################################################################
                                                  624:           .weak __exception_handler_break
                                                  625:   __crt0_exit:
                                                  626:   1:
9D003E64  3C029D00   LUI V0, -25344               627:           la      v0,__exception_handler_break
9D003E6C  10400003   BEQ V0, ZERO, 0x9D003E7C     628:           beq     v0,0,0f
9D003E70  00000000   NOP                          629:           nop
9D003E74  0040F809   JALR V0                      630:           jalr    v0
9D003E78  00000000   NOP                          631:           nop
                                                  632:   
9D003E7C  1000FFF9   BEQ ZERO, ZERO, 0x9D003E64   633:   0:      b       1b
9D003E80  00000000   NOP                          634:           nop
                                                  635:   
                                                  636:           .globl __crt0_exit
                                                  637:           .end _main_entry
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/src/gcc-8-merge/gcc/libgcc/libgcc2.c  ----
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00283C  00C04825   OR T1, A2, ZERO
9D002840  00801025   OR V0, A0, ZERO
9D002844  14E00099   BNE A3, ZERO, 0x9D002AAC
9D002848  00A01825   OR V1, A1, ZERO
9D00284C  00A6302B   SLTU A2, A1, A2
9D002850  10C00034   BEQ A2, ZERO, 0x9D002924
9D002854  712A5020   CLZ T2, T1
9D002858  51400008   BEQL T2, ZERO, 0x9D00287C
9D00285C  00092402   SRL A0, T1, 16
9D002860  01451804   SLLV V1, A1, T2
9D002864  000A2823   SUBU A1, ZERO, T2
9D002868  00A42806   SRLV A1, A0, A1
9D00286C  01494804   SLLV T1, T1, T2
9D002870  00A31825   OR V1, A1, V1
9D002874  01441004   SLLV V0, A0, T2
9D002878  00092402   SRL A0, T1, 16
9D00287C  0064001B   DIVU V1, A0
9D002880  008001F4   TEQ A0, ZERO
9D002884  3127FFFF   ANDI A3, T1, -1
9D002888  00001812   MFLO V1
9D00288C  00002810   MFHI A1
9D002890  70673002   MUL A2, V1, A3
9D002894  00051C00   SLL V1, A1, 16
9D002898  00022C02   SRL A1, V0, 16
9D00289C  00651825   OR V1, V1, A1
9D0028A0  0066282B   SLTU A1, V1, A2
9D0028A4  50A00009   BEQL A1, ZERO, 0x9D0028CC
9D0028A8  00661823   SUBU V1, V1, A2
9D0028AC  00691821   ADDU V1, V1, T1
9D0028B0  0069282B   SLTU A1, V1, T1
9D0028B4  54A00005   BNEL A1, ZERO, 0x9D0028CC
9D0028B8  00661823   SUBU V1, V1, A2
9D0028BC  0066282B   SLTU A1, V1, A2
9D0028C0  54A00001   BNEL A1, ZERO, 0x9D0028C8
9D0028C4  00691821   ADDU V1, V1, T1
9D0028C8  00661823   SUBU V1, V1, A2
9D0028CC  0064001B   DIVU V1, A0
9D0028D0  008001F4   TEQ A0, ZERO
9D0028D4  3042FFFF   ANDI V0, V0, -1
9D0028D8  00001812   MFLO V1
9D0028DC  00003010   MFHI A2
9D0028E0  70672002   MUL A0, V1, A3
9D0028E4  00061C00   SLL V1, A2, 16
9D0028E8  00621025   OR V0, V1, V0
9D0028EC  0044182B   SLTU V1, V0, A0
9D0028F0  50600009   BEQL V1, ZERO, 0x9D002918
9D0028F4  00441023   SUBU V0, V0, A0
9D0028F8  00491021   ADDU V0, V0, T1
9D0028FC  0049182B   SLTU V1, V0, T1
9D002900  54600005   BNEL V1, ZERO, 0x9D002918
9D002904  00441023   SUBU V0, V0, A0
9D002908  0044182B   SLTU V1, V0, A0
9D00290C  54600001   BNEL V1, ZERO, 0x9D002914
9D002910  00491021   ADDU V0, V0, T1
9D002914  00441023   SUBU V0, V0, A0
9D002918  01421006   SRLV V0, V0, T2
9D00291C  03E00008   JR RA
9D002920  00001825   OR V1, ZERO, ZERO
9D002924  15200005   BNE T1, ZERO, 0x9D00293C
9D002928  24030001   ADDIU V1, ZERO, 1
9D00292C  0069001B   DIVU V1, T1
9D002930  012001F4   TEQ T1, ZERO
9D002934  00004812   MFLO T1
9D002938  712A5020   CLZ T2, T1
9D00293C  1540002B   BNE T2, ZERO, 0x9D0029EC
9D002940  24070020   ADDIU A3, ZERO, 32
9D002944  00A92823   SUBU A1, A1, T1
9D002948  00092402   SRL A0, T1, 16
9D00294C  00A4001B   DIVU A1, A0
9D002950  008001F4   TEQ A0, ZERO
9D002954  3127FFFF   ANDI A3, T1, -1
9D002958  00002812   MFLO A1
9D00295C  00001810   MFHI V1
9D002960  70A73002   MUL A2, A1, A3
9D002964  00032C00   SLL A1, V1, 16
9D002968  00021C02   SRL V1, V0, 16
9D00296C  00A32825   OR A1, A1, V1
9D002970  00A6182B   SLTU V1, A1, A2
9D002974  50600009   BEQL V1, ZERO, 0x9D00299C
9D002978  00A63023   SUBU A2, A1, A2
9D00297C  00A92821   ADDU A1, A1, T1
9D002980  00A9182B   SLTU V1, A1, T1
9D002984  54600005   BNEL V1, ZERO, 0x9D00299C
9D002988  00A63023   SUBU A2, A1, A2
9D00298C  00A6182B   SLTU V1, A1, A2
9D002990  54600001   BNEL V1, ZERO, 0x9D002998
9D002994  00A92821   ADDU A1, A1, T1
9D002998  00A63023   SUBU A2, A1, A2
9D00299C  00C4001B   DIVU A2, A0
9D0029A0  008001F4   TEQ A0, ZERO
9D0029A4  3042FFFF   ANDI V0, V0, -1
9D0029A8  00003012   MFLO A2
9D0029AC  00002810   MFHI A1
9D0029B0  70C71802   MUL V1, A2, A3
9D0029B4  00053400   SLL A2, A1, 16
9D0029B8  00C21025   OR V0, A2, V0
9D0029BC  0043202B   SLTU A0, V0, V1
9D0029C0  5080FFD5   BEQL A0, ZERO, 0x9D002918
9D0029C4  00431023   SUBU V0, V0, V1
9D0029C8  00491021   ADDU V0, V0, T1
9D0029CC  0049202B   SLTU A0, V0, T1
9D0029D0  5480FFD1   BNEL A0, ZERO, 0x9D002918
9D0029D4  00431023   SUBU V0, V0, V1
9D0029D8  0043202B   SLTU A0, V0, V1
9D0029DC  54800001   BNEL A0, ZERO, 0x9D0029E4
9D0029E0  00491021   ADDU V0, V0, T1
9D0029E4  1000FFCC   BEQ ZERO, ZERO, 0x9D002918
9D0029E8  00431023   SUBU V0, V0, V1
9D0029EC  00EA3823   SUBU A3, A3, T2
9D0029F0  01494804   SLLV T1, T1, T2
9D0029F4  00E41806   SRLV V1, A0, A3
9D0029F8  00093402   SRL A2, T1, 16
9D0029FC  00E53806   SRLV A3, A1, A3
9D002A00  00E6001B   DIVU A3, A2
9D002A04  00C001F4   TEQ A2, ZERO
9D002A08  01451004   SLLV V0, A1, T2
9D002A0C  312BFFFF   ANDI T3, T1, -1
9D002A10  00621825   OR V1, V1, V0
9D002A14  01441004   SLLV V0, A0, T2
9D002A18  00032C02   SRL A1, V1, 16
9D002A1C  00003812   MFLO A3
9D002A20  00002010   MFHI A0
9D002A24  70EB4002   MUL T0, A3, T3
9D002A28  00043C00   SLL A3, A0, 16
9D002A2C  00E53825   OR A3, A3, A1
9D002A30  00E8202B   SLTU A0, A3, T0
9D002A34  50800009   BEQL A0, ZERO, 0x9D002A5C
9D002A38  00E83823   SUBU A3, A3, T0
9D002A3C  00E93821   ADDU A3, A3, T1
9D002A40  00E9202B   SLTU A0, A3, T1
9D002A44  54800005   BNEL A0, ZERO, 0x9D002A5C
9D002A48  00E83823   SUBU A3, A3, T0
9D002A4C  00E8202B   SLTU A0, A3, T0
9D002A50  54800001   BNEL A0, ZERO, 0x9D002A58
9D002A54  00E93821   ADDU A3, A3, T1
9D002A58  00E83823   SUBU A3, A3, T0
9D002A5C  00E6001B   DIVU A3, A2
9D002A60  00C001F4   TEQ A2, ZERO
9D002A64  3065FFFF   ANDI A1, V1, -1
9D002A68  00003012   MFLO A2
9D002A6C  00003810   MFHI A3
9D002A70  00073C00   SLL A3, A3, 16
9D002A74  00E52825   OR A1, A3, A1
9D002A78  70CB3002   MUL A2, A2, T3
9D002A7C  00A6182B   SLTU V1, A1, A2
9D002A80  5060FFB1   BEQL V1, ZERO, 0x9D002948
9D002A84  00A62823   SUBU A1, A1, A2
9D002A88  00A92821   ADDU A1, A1, T1
9D002A8C  00A9182B   SLTU V1, A1, T1
9D002A90  5460FFAD   BNEL V1, ZERO, 0x9D002948
9D002A94  00A62823   SUBU A1, A1, A2
9D002A98  00A6182B   SLTU V1, A1, A2
9D002A9C  54600001   BNEL V1, ZERO, 0x9D002AA4
9D002AA0  00A92821   ADDU A1, A1, T1
9D002AA4  1000FFA8   BEQ ZERO, ZERO, 0x9D002948
9D002AA8  00A62823   SUBU A1, A1, A2
9D002AAC  00A7402B   SLTU T0, A1, A3
9D002AB0  1500005E   BNE T0, ZERO, 0x9D002C2C
9D002AB4  70EE7020   CLZ T6, A3
9D002AB8  15C0000C   BNE T6, ZERO, 0x9D002AEC
9D002ABC  240B0020   ADDIU T3, ZERO, 32
9D002AC0  00E5402B   SLTU T0, A3, A1
9D002AC4  55000005   BNEL T0, ZERO, 0x9D002ADC
9D002AC8  00861023   SUBU V0, A0, A2
9D002ACC  0086402B   SLTU T0, A0, A2
9D002AD0  15000056   BNE T0, ZERO, 0x9D002C2C
9D002AD4  00000000   NOP
9D002AD8  00861023   SUBU V0, A0, A2
9D002ADC  00A72823   SUBU A1, A1, A3
9D002AE0  0082182B   SLTU V1, A0, V0
9D002AE4  03E00008   JR RA
9D002AE8  00A31823   SUBU V1, A1, V1
9D002AEC  016E5823   SUBU T3, T3, T6
9D002AF0  01666006   SRLV T4, A2, T3
9D002AF4  01C73804   SLLV A3, A3, T6
9D002AF8  01873825   OR A3, T4, A3
9D002AFC  01C51804   SLLV V1, A1, T6
9D002B00  00074C02   SRL T1, A3, 16
9D002B04  01652806   SRLV A1, A1, T3
9D002B08  00A9001B   DIVU A1, T1
9D002B0C  012001F4   TEQ T1, ZERO
9D002B10  01C61004   SLLV V0, A2, T6
9D002B14  30E8FFFF   ANDI T0, A3, -1
9D002B18  01643006   SRLV A2, A0, T3
9D002B1C  00C33025   OR A2, A2, V1
9D002B20  00066402   SRL T4, A2, 16
9D002B24  01C42004   SLLV A0, A0, T6
9D002B28  00002812   MFLO A1
9D002B2C  00005010   MFHI T2
9D002B30  000A5400   SLL T2, T2, 16
9D002B34  014C5025   OR T2, T2, T4
9D002B38  71051802   MUL V1, T0, A1
9D002B3C  0143602B   SLTU T4, T2, V1
9D002B40  1180000A   BEQ T4, ZERO, 0x9D002B6C
9D002B44  00A06825   OR T5, A1, ZERO
9D002B48  01475021   ADDU T2, T2, A3
9D002B4C  0147602B   SLTU T4, T2, A3
9D002B50  15800006   BNE T4, ZERO, 0x9D002B6C
9D002B54  24ADFFFF   ADDIU T5, A1, -1
9D002B58  0143602B   SLTU T4, T2, V1
9D002B5C  51800004   BEQL T4, ZERO, 0x9D002B70
9D002B60  01435023   SUBU T2, T2, V1
9D002B64  24ADFFFE   ADDIU T5, A1, -2
9D002B68  01475021   ADDU T2, T2, A3
9D002B6C  01435023   SUBU T2, T2, V1
9D002B70  0149001B   DIVU T2, T1
9D002B74  012001F4   TEQ T1, ZERO
9D002B78  00004812   MFLO T1
9D002B7C  00005010   MFHI T2
9D002B80  000A5400   SLL T2, T2, 16
9D002B84  71091802   MUL V1, T0, T1
9D002B88  30C8FFFF   ANDI T0, A2, -1
9D002B8C  01484025   OR T0, T2, T0
9D002B90  0103302B   SLTU A2, T0, V1
9D002B94  10C0000A   BEQ A2, ZERO, 0x9D002BC0
9D002B98  01202825   OR A1, T1, ZERO
9D002B9C  01074021   ADDU T0, T0, A3
9D002BA0  0107302B   SLTU A2, T0, A3
9D002BA4  14C00006   BNE A2, ZERO, 0x9D002BC0
9D002BA8  2525FFFF   ADDIU A1, T1, -1
9D002BAC  0103302B   SLTU A2, T0, V1
9D002BB0  10C00004   BEQ A2, ZERO, 0x9D002BC4
9D002BB4  000D6400   SLL T4, T5, 16
9D002BB8  2525FFFE   ADDIU A1, T1, -2
9D002BBC  01074021   ADDU T0, T0, A3
9D002BC0  000D6400   SLL T4, T5, 16
9D002BC4  01856025   OR T4, T4, A1
9D002BC8  01820019   MULTU 0, T4, V0
9D002BCC  01034023   SUBU T0, T0, V1
9D002BD0  00006810   MFHI T5
9D002BD4  010D282B   SLTU A1, T0, T5
9D002BD8  01A01825   OR V1, T5, ZERO
9D002BDC  00006012   MFLO T4
9D002BE0  14A00006   BNE A1, ZERO, 0x9D002BFC
9D002BE4  00003012   MFLO A2
9D002BE8  150D0009   BNE T0, T5, 0x9D002C10
9D002BEC  00863023   SUBU A2, A0, A2
9D002BF0  008C282B   SLTU A1, A0, T4
9D002BF4  50A00007   BEQL A1, ZERO, 0x9D002C14
9D002BF8  01034023   SUBU T0, T0, V1
9D002BFC  01823023   SUBU A2, T4, V0
9D002C00  01A73823   SUBU A3, T5, A3
9D002C04  0186602B   SLTU T4, T4, A2
9D002C08  00EC1823   SUBU V1, A3, T4
9D002C0C  00863023   SUBU A2, A0, A2
9D002C10  01034023   SUBU T0, T0, V1
9D002C14  0086182B   SLTU V1, A0, A2
9D002C18  01031823   SUBU V1, T0, V1
9D002C1C  01631004   SLLV V0, V1, T3
9D002C20  01C63006   SRLV A2, A2, T6
9D002C24  00461025   OR V0, V0, A2
9D002C28  01C31806   SRLV V1, V1, T6
9D002C2C  03E00008   JR RA
9D002C30  00000000   NOP
9D002C34  00C04025   OR T0, A2, ZERO
9D002C38  00E01825   OR V1, A3, ZERO
9D002C3C  00805025   OR T2, A0, ZERO
9D002C40  14E000A3   BNE A3, ZERO, 0x9D002ED0
9D002C44  00A01025   OR V0, A1, ZERO
9D002C48  00A6302B   SLTU A2, A1, A2
9D002C4C  10C00034   BEQ A2, ZERO, 0x9D002D20
9D002C50  00000000   NOP
9D002C54  71052820   CLZ A1, T0
9D002C58  50A00008   BEQL A1, ZERO, 0x9D002C7C
9D002C5C  00082C02   SRL A1, T0, 16
9D002C60  00052023   SUBU A0, ZERO, A1
9D002C64  008A2006   SRLV A0, T2, A0
9D002C68  00A21004   SLLV V0, V0, A1
9D002C6C  00A84004   SLLV T0, T0, A1
9D002C70  00821025   OR V0, A0, V0
9D002C74  00AA5004   SLLV T2, T2, A1
9D002C78  00082C02   SRL A1, T0, 16
9D002C7C  0045001B   DIVU V0, A1
9D002C80  00A001F4   TEQ A1, ZERO
9D002C84  3107FFFF   ANDI A3, T0, -1
9D002C88  000A2402   SRL A0, T2, 16
9D002C8C  00003012   MFLO A2
9D002C90  00001010   MFHI V0
9D002C94  00021400   SLL V0, V0, 16
9D002C98  00442025   OR A0, V0, A0
9D002C9C  70E64802   MUL T1, A3, A2
9D002CA0  0089582B   SLTU T3, A0, T1
9D002CA4  1160000A   BEQ T3, ZERO, 0x9D002CD0
9D002CA8  00C01025   OR V0, A2, ZERO
9D002CAC  00882021   ADDU A0, A0, T0
9D002CB0  0088582B   SLTU T3, A0, T0
9D002CB4  15600006   BNE T3, ZERO, 0x9D002CD0
9D002CB8  24C2FFFF   ADDIU V0, A2, -1
9D002CBC  0089582B   SLTU T3, A0, T1
9D002CC0  51600004   BEQL T3, ZERO, 0x9D002CD4
9D002CC4  00892023   SUBU A0, A0, T1
9D002CC8  24C2FFFE   ADDIU V0, A2, -2
9D002CCC  00882021   ADDU A0, A0, T0
9D002CD0  00892023   SUBU A0, A0, T1
9D002CD4  0085001B   DIVU A0, A1
9D002CD8  00A001F4   TEQ A1, ZERO
9D002CDC  314AFFFF   ANDI T2, T2, -1
9D002CE0  00002012   MFLO A0
9D002CE4  00002810   MFHI A1
9D002CE8  00052C00   SLL A1, A1, 16
9D002CEC  00AA5025   OR T2, A1, T2
9D002CF0  70E43802   MUL A3, A3, A0
9D002CF4  0147282B   SLTU A1, T2, A3
9D002CF8  10A00006   BEQ A1, ZERO, 0x9D002D14
9D002CFC  00803025   OR A2, A0, ZERO
9D002D00  010A5021   ADDU T2, T0, T2
9D002D04  0148402B   SLTU T0, T2, T0
9D002D08  2486FFFF   ADDIU A2, A0, -1
9D002D0C  11000036   BEQ T0, ZERO, 0x9D002DE8
9D002D10  0147502B   SLTU T2, T2, A3
9D002D14  00021400   SLL V0, V0, 16
9D002D18  03E00008   JR RA
9D002D1C  00461025   OR V0, V0, A2
9D002D20  15000006   BNE T0, ZERO, 0x9D002D3C
9D002D24  71021020   CLZ V0, T0
9D002D28  24020001   ADDIU V0, ZERO, 1
9D002D2C  0048001B   DIVU V0, T0
9D002D30  010001F4   TEQ T0, ZERO
9D002D34  00004012   MFLO T0
9D002D38  71021020   CLZ V0, T0
9D002D3C  1440002E   BNE V0, ZERO, 0x9D002DF8
9D002D40  24090020   ADDIU T1, ZERO, 32
9D002D44  00A82823   SUBU A1, A1, T0
9D002D48  24030001   ADDIU V1, ZERO, 1
9D002D4C  00083402   SRL A2, T0, 16
9D002D50  00A6001B   DIVU A1, A2
9D002D54  00C001F4   TEQ A2, ZERO
9D002D58  3107FFFF   ANDI A3, T0, -1
9D002D5C  000A2402   SRL A0, T2, 16
9D002D60  00002812   MFLO A1
9D002D64  00001010   MFHI V0
9D002D68  00021400   SLL V0, V0, 16
9D002D6C  00442025   OR A0, V0, A0
9D002D70  70E54802   MUL T1, A3, A1
9D002D74  0089582B   SLTU T3, A0, T1
9D002D78  1160000A   BEQ T3, ZERO, 0x9D002DA4
9D002D7C  00A01025   OR V0, A1, ZERO
9D002D80  00882021   ADDU A0, A0, T0
9D002D84  0088582B   SLTU T3, A0, T0
9D002D88  15600006   BNE T3, ZERO, 0x9D002DA4
9D002D8C  24A2FFFF   ADDIU V0, A1, -1
9D002D90  0089582B   SLTU T3, A0, T1
9D002D94  51600004   BEQL T3, ZERO, 0x9D002DA8
9D002D98  00892023   SUBU A0, A0, T1
9D002D9C  24A2FFFE   ADDIU V0, A1, -2
9D002DA0  00882021   ADDU A0, A0, T0
9D002DA4  00892023   SUBU A0, A0, T1
9D002DA8  0086001B   DIVU A0, A2
9D002DAC  00C001F4   TEQ A2, ZERO
9D002DB0  314AFFFF   ANDI T2, T2, -1
9D002DB4  00002012   MFLO A0
9D002DB8  00003010   MFHI A2
9D002DBC  00063400   SLL A2, A2, 16
9D002DC0  00CA5025   OR T2, A2, T2
9D002DC4  70E42802   MUL A1, A3, A0
9D002DC8  0145382B   SLTU A3, T2, A1
9D002DCC  10E0FFD1   BEQ A3, ZERO, 0x9D002D14
9D002DD0  00803025   OR A2, A0, ZERO
9D002DD4  010A5021   ADDU T2, T0, T2
9D002DD8  0148402B   SLTU T0, T2, T0
9D002DDC  1500FFCD   BNE T0, ZERO, 0x9D002D14
9D002DE0  2486FFFF   ADDIU A2, A0, -1
9D002DE4  0145502B   SLTU T2, T2, A1
9D002DE8  5540FFCA   BNEL T2, ZERO, 0x9D002D14
9D002DEC  2486FFFE   ADDIU A2, A0, -2
9D002DF0  1000FFC9   BEQ ZERO, ZERO, 0x9D002D18
9D002DF4  00021400   SLL V0, V0, 16
9D002DF8  01224823   SUBU T1, T1, V0
9D002DFC  00484004   SLLV T0, T0, V0
9D002E00  00451804   SLLV V1, A1, V0
9D002E04  00445004   SLLV T2, A0, V0
9D002E08  01252806   SRLV A1, A1, T1
9D002E0C  00081402   SRL V0, T0, 16
9D002E10  00A2001B   DIVU A1, V0
9D002E14  004001F4   TEQ V0, ZERO
9D002E18  3106FFFF   ANDI A2, T0, -1
9D002E1C  01243806   SRLV A3, A0, T1
9D002E20  00E33825   OR A3, A3, V1
9D002E24  00071C02   SRL V1, A3, 16
9D002E28  00002812   MFLO A1
9D002E2C  00002010   MFHI A0
9D002E30  00042400   SLL A0, A0, 16
9D002E34  00832025   OR A0, A0, V1
9D002E38  70C54802   MUL T1, A2, A1
9D002E3C  0089582B   SLTU T3, A0, T1
9D002E40  1160000A   BEQ T3, ZERO, 0x9D002E6C
9D002E44  00A01825   OR V1, A1, ZERO
9D002E48  00882021   ADDU A0, A0, T0
9D002E4C  0088582B   SLTU T3, A0, T0
9D002E50  15600006   BNE T3, ZERO, 0x9D002E6C
9D002E54  24A3FFFF   ADDIU V1, A1, -1
9D002E58  0089582B   SLTU T3, A0, T1
9D002E5C  51600004   BEQL T3, ZERO, 0x9D002E70
9D002E60  00892023   SUBU A0, A0, T1
9D002E64  24A3FFFE   ADDIU V1, A1, -2
9D002E68  00882021   ADDU A0, A0, T0
9D002E6C  00892023   SUBU A0, A0, T1
9D002E70  0082001B   DIVU A0, V0
9D002E74  004001F4   TEQ V0, ZERO
9D002E78  30E5FFFF   ANDI A1, A3, -1
9D002E7C  00001012   MFLO V0
9D002E80  00002010   MFHI A0
9D002E84  00042400   SLL A0, A0, 16
9D002E88  00852825   OR A1, A0, A1
9D002E8C  70C23002   MUL A2, A2, V0
9D002E90  00A6382B   SLTU A3, A1, A2
9D002E94  10E0000A   BEQ A3, ZERO, 0x9D002EC0
9D002E98  00402025   OR A0, V0, ZERO
9D002E9C  00A82821   ADDU A1, A1, T0
9D002EA0  00A8382B   SLTU A3, A1, T0
9D002EA4  14E00006   BNE A3, ZERO, 0x9D002EC0
9D002EA8  2444FFFF   ADDIU A0, V0, -1
9D002EAC  00A6382B   SLTU A3, A1, A2
9D002EB0  50E00004   BEQL A3, ZERO, 0x9D002EC4
9D002EB4  00031C00   SLL V1, V1, 16
9D002EB8  2444FFFE   ADDIU A0, V0, -2
9D002EBC  00A82821   ADDU A1, A1, T0
9D002EC0  00031C00   SLL V1, V1, 16
9D002EC4  00A62823   SUBU A1, A1, A2
9D002EC8  1000FFA0   BEQ ZERO, ZERO, 0x9D002D4C
9D002ECC  00641825   OR V1, V1, A0
9D002ED0  00A7102B   SLTU V0, A1, A3
9D002ED4  1440004F   BNE V0, ZERO, 0x9D003014
9D002ED8  00001825   OR V1, ZERO, ZERO
9D002EDC  70EA5020   CLZ T2, A3
9D002EE0  15400008   BNE T2, ZERO, 0x9D002F04
9D002EE4  24090020   ADDIU T1, ZERO, 32
9D002EE8  00E5282B   SLTU A1, A3, A1
9D002EEC  54A0004A   BNEL A1, ZERO, 0x9D003018
9D002EF0  24020001   ADDIU V0, ZERO, 1
9D002EF4  0086102B   SLTU V0, A0, A2
9D002EF8  38420001   XORI V0, V0, 1
9D002EFC  03E00008   JR RA
9D002F00  00001825   OR V1, ZERO, ZERO
9D002F04  012A4823   SUBU T1, T1, T2
9D002F08  01261006   SRLV V0, A2, T1
9D002F0C  01473804   SLLV A3, A3, T2
9D002F10  00473825   OR A3, V0, A3
9D002F14  00074402   SRL T0, A3, 16
9D002F18  01451004   SLLV V0, A1, T2
9D002F1C  01252806   SRLV A1, A1, T1
9D002F20  00A8001B   DIVU A1, T0
9D002F24  010001F4   TEQ T0, ZERO
9D002F28  01246006   SRLV T4, A0, T1
9D002F2C  30EBFFFF   ANDI T3, A3, -1
9D002F30  01826025   OR T4, T4, V0
9D002F34  000C1C02   SRL V1, T4, 16
9D002F38  01463004   SLLV A2, A2, T2
9D002F3C  00002812   MFLO A1
9D002F40  00004810   MFHI T1
9D002F44  00094C00   SLL T1, T1, 16
9D002F48  01234825   OR T1, T1, V1
9D002F4C  71651002   MUL V0, T3, A1
9D002F50  0122682B   SLTU T5, T1, V0
9D002F54  11A0000A   BEQ T5, ZERO, 0x9D002F80
9D002F58  00A01825   OR V1, A1, ZERO
9D002F5C  01274821   ADDU T1, T1, A3
9D002F60  0127682B   SLTU T5, T1, A3
9D002F64  15A00006   BNE T5, ZERO, 0x9D002F80
9D002F68  24A3FFFF   ADDIU V1, A1, -1
9D002F6C  0122682B   SLTU T5, T1, V0
9D002F70  51A00004   BEQL T5, ZERO, 0x9D002F84
9D002F74  01224823   SUBU T1, T1, V0
9D002F78  24A3FFFE   ADDIU V1, A1, -2
9D002F7C  01274821   ADDU T1, T1, A3
9D002F80  01224823   SUBU T1, T1, V0
9D002F84  0128001B   DIVU T1, T0
9D002F88  010001F4   TEQ T0, ZERO
9D002F8C  3185FFFF   ANDI A1, T4, -1
9D002F90  00004012   MFLO T0
9D002F94  00004810   MFHI T1
9D002F98  00094C00   SLL T1, T1, 16
9D002F9C  01252825   OR A1, T1, A1
9D002FA0  71685802   MUL T3, T3, T0
9D002FA4  00AB102B   SLTU V0, A1, T3
9D002FA8  1040000A   BEQ V0, ZERO, 0x9D002FD4
9D002FAC  01004825   OR T1, T0, ZERO
9D002FB0  00A72821   ADDU A1, A1, A3
9D002FB4  00A7102B   SLTU V0, A1, A3
9D002FB8  14400006   BNE V0, ZERO, 0x9D002FD4
9D002FBC  2509FFFF   ADDIU T1, T0, -1
9D002FC0  00AB102B   SLTU V0, A1, T3
9D002FC4  10400004   BEQ V0, ZERO, 0x9D002FD8
9D002FC8  00031400   SLL V0, V1, 16
9D002FCC  2509FFFE   ADDIU T1, T0, -2
9D002FD0  00A72821   ADDU A1, A1, A3
9D002FD4  00031400   SLL V0, V1, 16
9D002FD8  00491025   OR V0, V0, T1
9D002FDC  00460019   MULTU 0, V0, A2
9D002FE0  00AB2823   SUBU A1, A1, T3
9D002FE4  00003810   MFHI A3
9D002FE8  00A7182B   SLTU V1, A1, A3
9D002FEC  14600007   BNE V1, ZERO, 0x9D00300C
9D002FF0  00003012   MFLO A2
9D002FF4  14A70008   BNE A1, A3, 0x9D003018
9D002FF8  00001825   OR V1, ZERO, ZERO
9D002FFC  01442004   SLLV A0, A0, T2
9D003000  0086202B   SLTU A0, A0, A2
9D003004  10800004   BEQ A0, ZERO, 0x9D003018
9D003008  00000000   NOP
9D00300C  1000FFBB   BEQ ZERO, ZERO, 0x9D002EFC
9D003010  2442FFFF   ADDIU V0, V0, -1
9D003014  00001025   OR V0, ZERO, ZERO
9D003018  03E00008   JR RA
9D00301C  00000000   NOP
9D003FA0  10C00008   BEQ A2, ZERO, 0x9D003FC4
9D003FA4  00801025   OR V0, A0, ZERO
9D003FA8  24030020   ADDIU V1, ZERO, 32
9D003FAC  00661823   SUBU V1, V1, A2
9D003FB0  1C600006   BGTZ V1, 0x9D003FCC
9D003FB4  00C52006   SRLV A0, A1, A2
9D003FB8  00002025   OR A0, ZERO, ZERO
9D003FBC  00C51006   SRLV V0, A1, A2
9D003FC0  00802825   OR A1, A0, ZERO
9D003FC4  03E00008   JR RA
9D003FC8  00A01825   OR V1, A1, ZERO
9D003FCC  00C21006   SRLV V0, V0, A2
9D003FD0  00652804   SLLV A1, A1, V1
9D003FD4  1000FFFA   BEQ ZERO, ZERO, 0x9D003FC0
9D003FD8  00451025   OR V0, V0, A1
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/pic32m-libs/libpic32/stubs/write.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D003BC8  27BDFFE0   ADDIU SP, SP, -32
9D003BCC  AFB10014   SW S1, 20(SP)
9D003BD0  AFBF001C   SW RA, 28(SP)
9D003BD4  AFB20018   SW S2, 24(SP)
9D003BD8  AFB00010   SW S0, 16(SP)
9D003BDC  10A0000D   BEQ A1, ZERO, 0x9D003C14
9D003BE0  00008825   OR S1, ZERO, ZERO
9D003BE4  50C0000C   BEQL A2, ZERO, 0x9D003C18
9D003BE8  8FBF001C   LW RA, 28(SP)
9D003BEC  2C840003   SLTIU A0, A0, 3
9D003BF0  10800008   BEQ A0, ZERO, 0x9D003C14
9D003BF4  00C08825   OR S1, A2, ZERO
9D003BF8  3C020000   LUI V0, 0
9D003BFC  24420000   ADDIU V0, V0, 0
9D003C00  1040000B   BEQ V0, ZERO, 0x9D003C30
9D003C04  00A08025   OR S0, A1, ZERO
9D003C08  00C02825   OR A1, A2, ZERO
9D003C0C  0C000000   JAL 0x90000000
9D003C10  02002025   OR A0, S0, ZERO
9D003C14  8FBF001C   LW RA, 28(SP)
9D003C18  02201025   OR V0, S1, ZERO
9D003C1C  8FB20018   LW S2, 24(SP)
9D003C20  8FB10014   LW S1, 20(SP)
9D003C24  8FB00010   LW S0, 16(SP)
9D003C28  03E00008   JR RA
9D003C2C  27BD0020   ADDIU SP, SP, 32
9D003C30  00A69021   ADDU S2, A1, A2
9D003C34  82040000   LB A0, 0(S0)
9D003C38  0F400D36   JAL _mon_putc
9D003C3C  26100001   ADDIU S0, S0, 1
9D003C40  5650FFFD   BNEL S2, S0, 0x9D003C38
9D003C44  82040000   LB A0, 0(S0)
9D003C48  1000FFF3   BEQ ZERO, ZERO, 0x9D003C18
9D003C4C  8FBF001C   LW RA, 28(SP)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/pic32m-libs/libpic32/stubs/default-on-reset.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0040C8  03E00008   JR RA
9D0040CC  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/pic32m-libs/libpic32/stubs/default-on-bootstrap.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0040D0  03E00008   JR RA
9D0040D4  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/pic32m-libs/libpic32/stubs/default-general-exception-handler.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D003ECC  3C020000   LUI V0, 0
9D003ED0  24420000   ADDIU V0, V0, 0
9D003ED4  10400005   BEQ V0, ZERO, 0x9D003EEC
9D003ED8  3C029D00   LUI V0, -25344
9D003EDC  244240B0   ADDIU V0, V0, 16560
9D003EE0  10400003   BEQ V0, ZERO, 0x9D003EF0
9D003EE4  3C029D00   LUI V0, -25344
9D003EE8  7000003F   SDBBP 0
9D003EEC  3C029D00   LUI V0, -25344
9D003EF0  24423F5C   ADDIU V0, V0, 16220
9D003EF4  10400005   BEQ V0, ZERO, 0x9D003F0C
9D003EF8  00000000   NOP
9D003EFC  27BDFFE8   ADDIU SP, SP, -24
9D003F00  AFBF0014   SW RA, 20(SP)
9D003F04  0040F809   JALR V0
9D003F08  00000000   NOP
9D003F0C  1000FFFF   BEQ ZERO, ZERO, 0x9D003F0C
9D003F10  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/pic32m-libs/libpic32/stubs/default-bootstrap-exception-handler.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D003E84  3C020000   LUI V0, 0
9D003E88  24420000   ADDIU V0, V0, 0
9D003E8C  10400005   BEQ V0, ZERO, 0x9D003EA4
9D003E90  3C029D00   LUI V0, -25344
9D003E94  244240B0   ADDIU V0, V0, 16560
9D003E98  10400003   BEQ V0, ZERO, 0x9D003EA8
9D003E9C  3C029D00   LUI V0, -25344
9D003EA0  7000003F   SDBBP 0
9D003EA4  3C029D00   LUI V0, -25344
9D003EA8  24423F5C   ADDIU V0, V0, 16220
9D003EAC  10400005   BEQ V0, ZERO, 0x9D003EC4
9D003EB0  00000000   NOP
9D003EB4  27BDFFE8   ADDIU SP, SP, -24
9D003EB8  AFBF0014   SW RA, 20(SP)
9D003EBC  0040F809   JALR V0
9D003EC0  00000000   NOP
9D003EC4  1000FFFF   BEQ ZERO, ZERO, 0x9D003EC4
9D003EC8  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/pic32m-libs/libpic32/stubs/_mon_putc.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0034D8  3C02A000   LUI V0, -24576
9D0034DC  8C430200   LW V1, 512(V0)
9D0034E0  14600013   BNE V1, ZERO, 0x9D003530
9D0034E4  00803025   OR A2, A0, ZERO
9D0034E8  3C020000   LUI V0, 0
9D0034EC  27BDFFE8   ADDIU SP, SP, -24
9D0034F0  24420000   ADDIU V0, V0, 0
9D0034F4  10400006   BEQ V0, ZERO, 0x9D003510
9D0034F8  AFBF0014   SW RA, 20(SP)
9D0034FC  0C000000   JAL 0x90000000
9D003500  00000000   NOP
9D003504  8FBF0014   LW RA, 20(SP)
9D003508  03E00008   JR RA
9D00350C  27BD0018   ADDIU SP, SP, 24
9D003510  3C020000   LUI V0, 0
9D003514  24420000   ADDIU V0, V0, 0
9D003518  10400025   BEQ V0, ZERO, 0x9D0035B0
9D00351C  3C05BF80   LUI A1, -16512
9D003520  0C000000   JAL 0x90000000
9D003524  00000000   NOP
9D003528  1000FFF7   BEQ ZERO, ZERO, 0x9D003508
9D00352C  8FBF0014   LW RA, 20(SP)
9D003530  3C02BF80   LUI V0, -16512
9D003534  24426010   ADDIU V0, V0, 24592
9D003538  1040002F   BEQ V0, ZERO, 0x9D0035F8
9D00353C  00000000   NOP
9D003540  24040001   ADDIU A0, ZERO, 1
9D003544  14640012   BNE V1, A0, 0x9D003590
9D003548  3C03BF80   LUI V1, -16512
9D00354C  3C03BF80   LUI V1, -16512
9D003550  3C04BF80   LUI A0, -16512
9D003554  3C05BF80   LUI A1, -16512
9D003558  24636020   ADDIU V1, V1, 24608
9D00355C  24846018   ADDIU A0, A0, 24600
9D003560  24A56008   ADDIU A1, A1, 24584
9D003564  34078000   ORI A3, ZERO, -32768
9D003568  ACA70000   SW A3, 0(A1)
9D00356C  24050400   ADDIU A1, ZERO, 1024
9D003570  AC850000   SW A1, 0(A0)
9D003574  8C440000   LW A0, 0(V0)
9D003578  30840100   ANDI A0, A0, 256
9D00357C  1080FFFD   BEQ A0, ZERO, 0x9D003574
9D003580  00000000   NOP
9D003584  AC660000   SW A2, 0(V1)
9D003588  03E00008   JR RA
9D00358C  00000000   NOP
9D003590  3C04BF80   LUI A0, -16512
9D003594  3C05BF80   LUI A1, -16512
9D003598  3C02BF80   LUI V0, -16512
9D00359C  24636220   ADDIU V1, V1, 25120
9D0035A0  24846218   ADDIU A0, A0, 25112
9D0035A4  24A56208   ADDIU A1, A1, 25096
9D0035A8  1000FFEE   BEQ ZERO, ZERO, 0x9D003564
9D0035AC  24426210   ADDIU V0, V0, 25104
9D0035B0  24A56208   ADDIU A1, A1, 25096
9D0035B4  3C04BF80   LUI A0, -16512
9D0035B8  34078000   ORI A3, ZERO, -32768
9D0035BC  ACA70000   SW A3, 0(A1)
9D0035C0  3C03BF80   LUI V1, -16512
9D0035C4  24846218   ADDIU A0, A0, 25112
9D0035C8  3C02BF80   LUI V0, -16512
9D0035CC  24050400   ADDIU A1, ZERO, 1024
9D0035D0  24636220   ADDIU V1, V1, 25120
9D0035D4  24426210   ADDIU V0, V0, 25104
9D0035D8  AC850000   SW A1, 0(A0)
9D0035DC  8C440000   LW A0, 0(V0)
9D0035E0  30840100   ANDI A0, A0, 256
9D0035E4  1080FFFD   BEQ A0, ZERO, 0x9D0035DC
9D0035E8  00000000   NOP
9D0035EC  AC660000   SW A2, 0(V1)
9D0035F0  1000FFC5   BEQ ZERO, ZERO, 0x9D003508
9D0035F4  8FBF0014   LW RA, 20(SP)
9D0035F8  03E00008   JR RA
9D0035FC  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/pic32m-libs/libpic32/startup/software-debug-break.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0040B0  7000003F   SDBBP 0
9D0040B4  03E00008   JR RA
9D0040B8  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/pic32m-libs/libpic32/default_vector_dispatch/defaultinterrupt.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D003F14  3C020000   LUI V0, 0
9D003F18  24420000   ADDIU V0, V0, 0
9D003F1C  10400007   BEQ V0, ZERO, 0x9D003F3C
9D003F20  3C029D00   LUI V0, -25344
9D003F24  244240B0   ADDIU V0, V0, 16560
9D003F28  50400005   BEQL V0, ZERO, 0x9D003F40
9D003F2C  3C029D00   LUI V0, -25344
9D003F30  7000003F   SDBBP 0
9D003F34  03E00008   JR RA
9D003F38  00000000   NOP
9D003F3C  3C029D00   LUI V0, -25344
9D003F40  24423F5C   ADDIU V0, V0, 16220
9D003F44  10400003   BEQ V0, ZERO, 0x9D003F54
9D003F48  00000000   NOP
9D003F4C  0040F809   JALR V0
9D003F50  00000000   NOP
9D003F54  03E00008   JR RA
9D003F58  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/XC-libs/htc/src/sprintf.c  ---
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D003DCC  27BDFFD0   ADDIU SP, SP, -48
9D003DD0  24027FFF   ADDIU V0, ZERO, 32767
9D003DD4  AFB00028   SW S0, 40(SP)
9D003DD8  AFA60038   SW A2, 56(SP)
9D003DDC  00808025   OR S0, A0, ZERO
9D003DE0  27A60038   ADDIU A2, SP, 56
9D003DE4  AFA20020   SW V0, 32(SP)
9D003DE8  AFA40010   SW A0, 16(SP)
9D003DEC  AFA40018   SW A0, 24(SP)
9D003DF0  240200C2   ADDIU V0, ZERO, 194
9D003DF4  27A40010   ADDIU A0, SP, 16
9D003DF8  AFBF002C   SW RA, 44(SP)
9D003DFC  AFA7003C   SW A3, 60(SP)
9D003E00  AFA60024   SW A2, 36(SP)
9D003E04  AFA00014   SW ZERO, 20(SP)
9D003E08  0F400000   JAL _vfprintf_cdnopuxX
9D003E0C  A7A2001C   SH V0, 28(SP)
9D003E10  8FA20010   LW V0, 16(SP)
9D003E14  A0400000   SB ZERO, 0(V0)
9D003E18  8FA20010   LW V0, 16(SP)
9D003E1C  8FBF002C   LW RA, 44(SP)
9D003E20  00501023   SUBU V0, V0, S0
9D003E24  8FB00028   LW S0, 40(SP)
9D003E28  03E00008   JR RA
9D003E2C  27BD0030   ADDIU SP, SP, 48
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/XC-libs/htc/src/rand.c  ------
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D003D54  3C02A000   LUI V0, -24576
9D003D58  804204F0   LB V0, 1264(V0)
9D003D5C  27BDFFE8   ADDIU SP, SP, -24
9D003D60  14400003   BNE V0, ZERO, 0x9D003D70
9D003D64  AFBF0014   SW RA, 20(SP)
9D003D68  0F401011   JAL srand
9D003D6C  24040001   ADDIU A0, ZERO, 1
9D003D70  3C06A000   LUI A2, -24576
9D003D74  3C044C95   LUI A0, 19605
9D003D78  24857F2D   ADDIU A1, A0, 32557
9D003D7C  8CC404F8   LW A0, 1272(A2)
9D003D80  3C025851   LUI V0, 22609
9D003D84  3442F42D   ORI V0, V0, -3027
9D003D88  00820018   MULT 0, A0, V0
9D003D8C  8CC304FC   LW V1, 1276(A2)
9D003D90  8FBF0014   LW RA, 20(SP)
9D003D94  27BD0018   ADDIU SP, SP, 24
9D003D98  70650000   MADD 0, V1, A1
9D003D9C  00001012   MFLO V0
9D003DA0  00850019   MULTU 0, A0, A1
9D003DA4  00002012   MFLO A0
9D003DA8  24830001   ADDIU V1, A0, 1
9D003DAC  0064202B   SLTU A0, V1, A0
9D003DB0  00002810   MFHI A1
9D003DB4  00451021   ADDU V0, V0, A1
9D003DB8  00821021   ADDU V0, A0, V0
9D003DBC  ACC204FC   SW V0, 1276(A2)
9D003DC0  ACC304F8   SW V1, 1272(A2)
9D003DC4  03E00008   JR RA
9D003DC8  7C42F000   EXT V0, V0, 0, 31
9D004044  3C02A000   LUI V0, -24576
9D004048  AC4404F8   SW A0, 1272(V0)
9D00404C  AC4004FC   SW ZERO, 1276(V0)
9D004050  24030001   ADDIU V1, ZERO, 1
9D004054  3C02A000   LUI V0, -24576
9D004058  03E00008   JR RA
9D00405C  A04304F0   SB V1, 1264(V0)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/XC-libs/htc/src/printf.c  ----
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D003FDC  27BDFFE0   ADDIU SP, SP, -32
9D003FE4  00802825   OR A1, A0, ZERO
9D003FE8  3C04A000   LUI A0, -24576
9D003FEC  AFA60028   SW A2, 40(SP)
9D003FF0  24840420   ADDIU A0, A0, 1056
9D003FF4  27A60024   ADDIU A2, SP, 36
9D003FF8  AFBF001C   SW RA, 28(SP)
9D003FFC  AFA7002C   SW A3, 44(SP)
9D004000  0F40044D   JAL _vfprintf_s
9D004004  AFA60010   SW A2, 16(SP)
9D004008  8FBF001C   LW RA, 28(SP)
9D00400C  03E00008   JR RA
9D004010  27BD0020   ADDIU SP, SP, 32
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/XC-libs/htc/src/fputc.c  -----
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0033B0  94A2000C   LHU V0, 12(A1)
9D0033B4  27BDFFE0   ADDIU SP, SP, -32
9D0033B8  AFB20018   SW S2, 24(SP)
9D0033BC  30430002   ANDI V1, V0, 2
9D0033C0  AFBF001C   SW RA, 28(SP)
9D0033C4  AFB10014   SW S1, 20(SP)
9D0033C8  AFB00010   SW S0, 16(SP)
9D0033CC  1060003B   BEQ V1, ZERO, 0x9D0034BC
9D0033D0  2412FFFF   ADDIU S2, ZERO, -1
9D0033D4  30460200   ANDI A2, V0, 512
9D0033D8  14C00003   BNE A2, ZERO, 0x9D0033E8
9D0033DC  8CA30004   LW V1, 4(A1)
9D0033E0  14600037   BNE V1, ZERO, 0x9D0034C0
9D0033E4  8FBF001C   LW RA, 28(SP)
9D0033E8  34460200   ORI A2, V0, 512
9D0033EC  A4A6000C   SH A2, 12(A1)
9D0033F0  14600003   BNE V1, ZERO, 0x9D003400
9D0033F4  309200FF   ANDI S2, A0, 255
9D0033F8  8CA30008   LW V1, 8(A1)
9D0033FC  ACA30000   SW V1, 0(A1)
9D003400  2403000A   ADDIU V1, ZERO, 10
9D003404  00A08025   OR S0, A1, ZERO
9D003408  16430006   BNE S2, V1, 0x9D003424
9D00340C  00808825   OR S1, A0, ZERO
9D003410  30420080   ANDI V0, V0, 128
9D003414  54400004   BNEL V0, ZERO, 0x9D003428
9D003418  8E020004   LW V0, 4(S0)
9D00341C  0F400CEC   JAL fputc
9D003420  2404000D   ADDIU A0, ZERO, 13
9D003424  8E020004   LW V0, 4(S0)
9D003428  8E030010   LW V1, 16(S0)
9D00342C  10430020   BEQ V0, V1, 0x9D0034B0
9D003430  7C112420   SEB A0, S1
9D003434  24420001   ADDIU V0, V0, 1
9D003438  AE020004   SW V0, 4(S0)
9D00343C  8E020000   LW V0, 0(S0)
9D003440  24430001   ADDIU V1, V0, 1
9D003444  AE030000   SW V1, 0(S0)
9D003448  A0440000   SB A0, 0(V0)
9D00344C  24030001   ADDIU V1, ZERO, 1
9D003450  3C02A000   LUI V0, -24576
9D003454  A04304EC   SB V1, 1260(V0)
9D003458  2402000A   ADDIU V0, ZERO, 10
9D00345C  16420018   BNE S2, V0, 0x9D0034C0
9D003460  8FBF001C   LW RA, 28(SP)
9D003464  9602000C   LHU V0, 12(S0)
9D003468  30420100   ANDI V0, V0, 256
9D00346C  10400015   BEQ V0, ZERO, 0x9D0034C4
9D003470  02401025   OR V0, S2, ZERO
9D003474  8E060004   LW A2, 4(S0)
9D003478  8E050008   LW A1, 8(S0)
9D00347C  0F400EF2   JAL write
9D003480  9604000E   LHU A0, 14(S0)
9D003484  8E030004   LW V1, 4(S0)
9D003488  50430006   BEQL V0, V1, 0x9D0034A4
9D00348C  8E020008   LW V0, 8(S0)
9D003490  9602000C   LHU V0, 12(S0)
9D003494  2412FFFF   ADDIU S2, ZERO, -1
9D003498  34420030   ORI V0, V0, 48
9D00349C  A602000C   SH V0, 12(S0)
9D0034A0  8E020008   LW V0, 8(S0)
9D0034A4  AE000004   SW ZERO, 4(S0)
9D0034A8  10000004   BEQ ZERO, ZERO, 0x9D0034BC
9D0034AC  AE020000   SW V0, 0(S0)
9D0034B0  0F400D80   JAL _flsbuf
9D0034B4  02002825   OR A1, S0, ZERO
9D0034B8  00409025   OR S2, V0, ZERO
9D0034BC  8FBF001C   LW RA, 28(SP)
9D0034C0  02401025   OR V0, S2, ZERO
9D0034C4  8FB10014   LW S1, 20(SP)
9D0034C8  8FB20018   LW S2, 24(SP)
9D0034CC  8FB00010   LW S0, 16(SP)
9D0034D0  03E00008   JR RA
9D0034D4  27BD0020   ADDIU SP, SP, 32
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/XC-libs/htc/src/flsbuf.c  ----
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D003600  94A2000C   LHU V0, 12(A1)
9D003604  27BDFFE8   ADDIU SP, SP, -24
9D003608  AFBF0014   SW RA, 20(SP)
9D00360C  30430040   ANDI V1, V0, 64
9D003610  AFB00010   SW S0, 16(SP)
9D003614  10600006   BEQ V1, ZERO, 0x9D003630
9D003618  A3A40018   SB A0, 24(SP)
9D00361C  7C041420   SEB V0, A0
9D003620  8FBF0014   LW RA, 20(SP)
9D003624  8FB00010   LW S0, 16(SP)
9D003628  03E00008   JR RA
9D00362C  27BD0018   ADDIU SP, SP, 24
9D003630  30430002   ANDI V1, V0, 2
9D003634  54600006   BNEL V1, ZERO, 0x9D003650
9D003638  8CA30010   LW V1, 16(A1)
9D00363C  34420030   ORI V0, V0, 48
9D003640  A4A2000C   SH V0, 12(A1)
9D003644  ACA00004   SW ZERO, 4(A1)
9D003648  1000FFF5   BEQ ZERO, ZERO, 0x9D003620
9D00364C  2402FFFF   ADDIU V0, ZERO, -1
9D003650  00A08025   OR S0, A1, ZERO
9D003654  14600007   BNE V1, ZERO, 0x9D003674
9D003658  94A4000E   LHU A0, 14(A1)
9D00365C  24060001   ADDIU A2, ZERO, 1
9D003660  0F400EF2   JAL write
9D003664  27A50018   ADDIU A1, SP, 24
9D003668  AE000004   SW ZERO, 4(S0)
9D00366C  1000FFEC   BEQ ZERO, ZERO, 0x9D003620
9D003670  83A20018   LB V0, 24(SP)
9D003674  8CA30008   LW V1, 8(A1)
9D003678  5460000B   BNEL V1, ZERO, 0x9D0036A8
9D00367C  8E060004   LW A2, 4(S0)
9D003680  3C03A000   LUI V1, -24576
9D003684  246304AC   ADDIU V1, V1, 1196
9D003688  ACA30008   SW V1, 8(A1)
9D00368C  ACA30000   SW V1, 0(A1)
9D003690  34420008   ORI V0, V0, 8
9D003694  24030020   ADDIU V1, ZERO, 32
9D003698  ACA30010   SW V1, 16(A1)
9D00369C  ACA30004   SW V1, 4(A1)
9D0036A0  A4A2000C   SH V0, 12(A1)
9D0036A4  8E060004   LW A2, 4(S0)
9D0036A8  0F400EF2   JAL write
9D0036AC  8E050008   LW A1, 8(S0)
9D0036B0  8E020008   LW V0, 8(S0)
9D0036B4  2403FFFF   ADDIU V1, ZERO, -1
9D0036B8  AE030004   SW V1, 4(S0)
9D0036BC  24430001   ADDIU V1, V0, 1
9D0036C0  AE030000   SW V1, 0(S0)
9D0036C4  83A30018   LB V1, 24(SP)
9D0036C8  A0430000   SB V1, 0(V0)
9D0036CC  83A30018   LB V1, 24(SP)
9D0036D0  2402000A   ADDIU V0, ZERO, 10
9D0036D4  1462FFD2   BNE V1, V0, 0x9D003620
9D0036D8  83A20018   LB V0, 24(SP)
9D0036DC  9602000C   LHU V0, 12(S0)
9D0036E0  30420100   ANDI V0, V0, 256
9D0036E4  5040FFCE   BEQL V0, ZERO, 0x9D003620
9D0036E8  83A20018   LB V0, 24(SP)
9D0036EC  8E060004   LW A2, 4(S0)
9D0036F0  8E050008   LW A1, 8(S0)
9D0036F4  0F400EF2   JAL write
9D0036F8  9604000E   LHU A0, 14(S0)
9D0036FC  8E020008   LW V0, 8(S0)
9D003700  AE000004   SW ZERO, 4(S0)
9D003704  1000FFD9   BEQ ZERO, ZERO, 0x9D00366C
9D003708  AE020000   SW V0, 0(S0)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/XC-libs/htc/src/doprnt.c  ----
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D000000  27BDFFA8   ADDIU SP, SP, -88
9D000004  AFBE0050   SW FP, 80(SP)
9D000008  3C1E9D00   LUI FP, -25344
9D00000C  27C2370D   ADDIU V0, FP, 14093
9D000010  AFA2001C   SW V0, 28(SP)
9D000014  3C029D00   LUI V0, -25344
9D000018  2442401C   ADDIU V0, V0, 16412
9D00001C  AFB50044   SW S5, 68(SP)
9D000020  AFB20038   SW S2, 56(SP)
9D000024  AFB10034   SW S1, 52(SP)
9D000028  AFBF0054   SW RA, 84(SP)
9D00002C  AFB7004C   SW S7, 76(SP)
9D000030  AFB60048   SW S6, 72(SP)
9D000034  AFB40040   SW S4, 64(SP)
9D000038  AFB3003C   SW S3, 60(SP)
9D00003C  AFB00030   SW S0, 48(SP)
9D000040  0080A825   OR S5, A0, ZERO
9D000044  00C09025   OR S2, A2, ZERO
9D000048  00008825   OR S1, ZERO, ZERO
9D00004C  AFA2002C   SW V0, 44(SP)
9D000050  80A40000   LB A0, 0(A1)
9D000054  24B30001   ADDIU S3, A1, 1
9D000058  1480000E   BNE A0, ZERO, 0x9D000094
9D00005C  A3A40012   SB A0, 18(SP)
9D000060  8FBF0054   LW RA, 84(SP)
9D000064  02201025   OR V0, S1, ZERO
9D000068  8FBE0050   LW FP, 80(SP)
9D00006C  8FB7004C   LW S7, 76(SP)
9D000070  8FB60048   LW S6, 72(SP)
9D000074  8FB50044   LW S5, 68(SP)
9D000078  8FB40040   LW S4, 64(SP)
9D00007C  8FB3003C   LW S3, 60(SP)
9D000080  8FB20038   LW S2, 56(SP)
9D000084  8FB10034   LW S1, 52(SP)
9D000088  8FB00030   LW S0, 48(SP)
9D00008C  03E00008   JR RA
9D000090  27BD0058   ADDIU SP, SP, 88
9D000094  24020025   ADDIU V0, ZERO, 37
9D000098  10820008   BEQ A0, V0, 0x9D0000BC
9D00009C  0000B825   OR S7, ZERO, ZERO
9D0000A0  0F400CEC   JAL fputc
9D0000A4  02A02825   OR A1, S5, ZERO
9D0000A8  2403FFFF   ADDIU V1, ZERO, -1
9D0000AC  54430001   BNEL V0, V1, 0x9D0000B4
9D0000B0  26310001   ADDIU S1, S1, 1
9D0000B4  1000FFE6   BEQ ZERO, ZERO, 0x9D000050
9D0000B8  02602825   OR A1, S3, ZERO
9D0000BC  2404002B   ADDIU A0, ZERO, 43
9D0000C0  2406002D   ADDIU A2, ZERO, 45
9D0000C4  24070030   ADDIU A3, ZERO, 48
9D0000C8  10000007   BEQ ZERO, ZERO, 0x9D0000E8
9D0000CC  24080020   ADDIU T0, ZERO, 32
9D0000D0  50460004   BEQL V0, A2, 0x9D0000E4
9D0000D4  36F70008   ORI S7, S7, 8
9D0000D8  5447000C   BNEL V0, A3, 0x9D00010C
9D0000DC  32E40002   ANDI A0, S7, 2
9D0000E0  36F70004   ORI S7, S7, 4
9D0000E4  00A09825   OR S3, A1, ZERO
9D0000E8  82620000   LB V0, 0(S3)
9D0000EC  10440035   BEQ V0, A0, 0x9D0001C4
9D0000F0  26650001   ADDIU A1, S3, 1
9D0000F4  2849002C   SLTI T1, V0, 44
9D0000F8  1120FFF5   BEQ T1, ZERO, 0x9D0000D0
9D0000FC  00000000   NOP
9D000100  5048FFF8   BEQL V0, T0, 0x9D0000E4
9D000104  36F70001   ORI S7, S7, 1
9D000108  32E40002   ANDI A0, S7, 2
9D00010C  54800001   BNEL A0, ZERO, 0x9D000114
9D000110  32F7FFFE   ANDI S7, S7, -2
9D000114  32E40008   ANDI A0, S7, 8
9D000118  54800001   BNEL A0, ZERO, 0x9D000120
9D00011C  32F7FFFB   ANDI S7, S7, -5
9D000120  8FA3001C   LW V1, 28(SP)
9D000124  00432021   ADDU A0, V0, V1
9D000128  90840000   LBU A0, 0(A0)
9D00012C  30840004   ANDI A0, A0, 4
9D000130  50800026   BEQL A0, ZERO, 0x9D0001CC
9D000134  2406002A   ADDIU A2, ZERO, 42
9D000138  00002025   OR A0, ZERO, ZERO
9D00013C  2405000A   ADDIU A1, ZERO, 10
9D000140  70851802   MUL V1, A0, A1
9D000144  26730001   ADDIU S3, S3, 1
9D000148  8262FFFF   LB V0, -1(S3)
9D00014C  00622021   ADDU A0, V1, V0
9D000150  82620000   LB V0, 0(S3)
9D000154  8FA3001C   LW V1, 28(SP)
9D000158  00621021   ADDU V0, V1, V0
9D00015C  90420000   LBU V0, 0(V0)
9D000160  30420004   ANDI V0, V0, 4
9D000164  1440FFF6   BNE V0, ZERO, 0x9D000140
9D000168  2484FFD0   ADDIU A0, A0, -48
9D00016C  82660000   LB A2, 0(S3)
9D000170  2402002E   ADDIU V0, ZERO, 46
9D000174  14C2001E   BNE A2, V0, 0x9D0001F0
9D000178  00002825   OR A1, ZERO, ZERO
9D00017C  82660001   LB A2, 1(S3)
9D000180  2402002A   ADDIU V0, ZERO, 42
9D000184  10C20017   BEQ A2, V0, 0x9D0001E4
9D000188  36F74000   ORI S7, S7, 16384
9D00018C  26730001   ADDIU S3, S3, 1
9D000190  2408000A   ADDIU T0, ZERO, 10
9D000194  82620000   LB V0, 0(S3)
9D000198  8FA3001C   LW V1, 28(SP)
9D00019C  00623021   ADDU A2, V1, V0
9D0001A0  90C60000   LBU A2, 0(A2)
9D0001A4  30C60004   ANDI A2, A2, 4
9D0001A8  10C00011   BEQ A2, ZERO, 0x9D0001F0
9D0001AC  26670001   ADDIU A3, S3, 1
9D0001B0  70A81802   MUL V1, A1, T0
9D0001B4  00E09825   OR S3, A3, ZERO
9D0001B8  00622821   ADDU A1, V1, V0
9D0001BC  1000FFF5   BEQ ZERO, ZERO, 0x9D000194
9D0001C0  24A5FFD0   ADDIU A1, A1, -48
9D0001C4  1000FFC7   BEQ ZERO, ZERO, 0x9D0000E4
9D0001C8  36F70002   ORI S7, S7, 2
9D0001CC  1446FFE7   BNE V0, A2, 0x9D00016C
9D0001D0  00002025   OR A0, ZERO, ZERO
9D0001D4  8E440000   LW A0, 0(S2)
9D0001D8  00A09825   OR S3, A1, ZERO
9D0001DC  1000FFE3   BEQ ZERO, ZERO, 0x9D00016C
9D0001E0  26520004   ADDIU S2, S2, 4
9D0001E4  8E450000   LW A1, 0(S2)
9D0001E8  26730002   ADDIU S3, S3, 2
9D0001EC  26520004   ADDIU S2, S2, 4
9D0001F0  24080069   ADDIU T0, ZERO, 105
9D0001F4  24090070   ADDIU T1, ZERO, 112
9D0001F8  240A006C   ADDIU T2, ZERO, 108
9D0001FC  240B0058   ADDIU T3, ZERO, 88
9D000200  240C004C   ADDIU T4, ZERO, 76
9D000204  24078000   ADDIU A3, ZERO, -32768
9D000208  24060010   ADDIU A2, ZERO, 16
9D00020C  26730001   ADDIU S3, S3, 1
9D000210  8262FFFF   LB V0, -1(S3)
9D000214  10480014   BEQ V0, T0, 0x9D000268
9D000218  284D006A   SLTI T5, V0, 106
9D00021C  11A00062   BEQ T5, ZERO, 0x9D0003A8
9D000220  00000000   NOP
9D000224  104B0096   BEQ V0, T3, 0x9D000480
9D000228  284D0059   SLTI T5, V0, 89
9D00022C  51A00009   BEQL T5, ZERO, 0x9D000254
9D000230  24060063   ADDIU A2, ZERO, 99
9D000234  1040FF8B   BEQ V0, ZERO, 0x9D000064
9D000238  8FBF0054   LW RA, 84(SP)
9D00023C  504C008B   BEQL V0, T4, 0x9D00046C
9D000240  32E20010   ANDI V0, S7, 16
9D000244  A3A20012   SB V0, 18(SP)
9D000248  27B00012   ADDIU S0, SP, 18
9D00024C  10000077   BEQ ZERO, ZERO, 0x9D00042C
9D000250  241E0001   ADDIU FP, ZERO, 1
9D000254  504600AD   BEQL V0, A2, 0x9D00050C
9D000258  8E460000   LW A2, 0(S2)
9D00025C  24060064   ADDIU A2, ZERO, 100
9D000260  5446FFF9   BNEL V0, A2, 0x9D000248
9D000264  A3A20012   SB V0, 18(SP)
9D000268  A3A20012   SB V0, 18(SP)
9D00026C  32E600C0   ANDI A2, S7, 192
9D000270  14C000C3   BNE A2, ZERO, 0x9D000580
9D000274  7C171620   SEH V0, S7
9D000278  044300BE   BGEZL V0, 0x9D000574
9D00027C  8E500000   LW S0, 0(S2)
9D000280  26520007   ADDIU S2, S2, 7
9D000284  02401025   OR V0, S2, ZERO
9D000288  7C021004   INS V0, ZERO, 0, 3
9D00028C  8C500000   LW S0, 0(V0)
9D000290  8C5E0004   LW FP, 4(V0)
9D000294  24520008   ADDIU S2, V0, 8
9D000298  07C10005   BGEZ FP, 0x9D0002B0
9D00029C  001E4023   SUBU T0, ZERO, FP
9D0002A0  00108023   SUBU S0, ZERO, S0
9D0002A4  0010102B   SLTU V0, ZERO, S0
9D0002A8  36F70003   ORI S7, S7, 3
9D0002AC  0102F023   SUBU FP, T0, V0
9D0002B0  14A00003   BNE A1, ZERO, 0x9D0002C0
9D0002B4  32E200C0   ANDI V0, S7, 192
9D0002B8  021E2825   OR A1, S0, FP
9D0002BC  2CA50001   SLTIU A1, A1, 1
9D0002C0  AFA20018   SW V0, 24(SP)
9D0002C4  32E300C0   ANDI V1, S7, 192
9D0002C8  24020040   ADDIU V0, ZERO, 64
9D0002CC  106200F1   BEQ V1, V0, 0x9D000694
9D0002D0  2C620041   SLTIU V0, V1, 65
9D0002D4  104000B6   BEQ V0, ZERO, 0x9D0005B0
9D0002D8  24020080   ADDIU V0, ZERO, 128
9D0002DC  106000BB   BEQ V1, ZERO, 0x9D0005CC
9D0002E0  24020001   ADDIU V0, ZERO, 1
9D0002E4  83B60012   LB S6, 18(SP)
9D0002E8  02C5102A   SLT V0, S6, A1
9D0002EC  10400003   BEQ V0, ZERO, 0x9D0002FC
9D0002F0  00000000   NOP
9D0002F4  A3A50012   SB A1, 18(SP)
9D0002F8  00A0B025   OR S6, A1, ZERO
9D0002FC  10800005   BEQ A0, ZERO, 0x9D000314
9D000300  32E24000   ANDI V0, S7, 16384
9D000304  32E20003   ANDI V0, S7, 3
9D000308  54400001   BNEL V0, ZERO, 0x9D000310
9D00030C  2484FFFF   ADDIU A0, A0, -1
9D000310  32E24000   ANDI V0, S7, 16384
9D000314  10400006   BEQ V0, ZERO, 0x9D000330
9D000318  83A20012   LB V0, 18(SP)
9D00031C  02C4102A   SLT V0, S6, A0
9D000320  14400002   BNE V0, ZERO, 0x9D00032C
9D000324  00962023   SUBU A0, A0, S6
9D000328  00002025   OR A0, ZERO, ZERO
9D00032C  83A20012   LB V0, 18(SP)
9D000330  0044282A   SLT A1, V0, A0
9D000334  10A00002   BEQ A1, ZERO, 0x9D000340
9D000338  0000A025   OR S4, ZERO, ZERO
9D00033C  0082A023   SUBU S4, A0, V0
9D000340  32E20008   ANDI V0, S7, 8
9D000344  AFA20020   SW V0, 32(SP)
9D000348  32E20004   ANDI V0, S7, 4
9D00034C  32E70002   ANDI A3, S7, 2
9D000350  104000EC   BEQ V0, ZERO, 0x9D000704
9D000354  32E60001   ANDI A2, S7, 1
9D000358  10E000E6   BEQ A3, ZERO, 0x9D0006F4
9D00035C  2404002D   ADDIU A0, ZERO, 45
9D000360  2402002B   ADDIU V0, ZERO, 43
9D000364  02A02825   OR A1, S5, ZERO
9D000368  0046200A   MOVZ A0, V0, A2
9D00036C  0F400CEC   JAL fputc
9D000370  00000000   NOP
9D000374  2404FFFF   ADDIU A0, ZERO, -1
9D000378  54440001   BNEL V0, A0, 0x9D000380
9D00037C  26310001   ADDIU S1, S1, 1
9D000380  128000FB   BEQ S4, ZERO, 0x9D000770
9D000384  8FA4002C   LW A0, 44(SP)
9D000388  02A02825   OR A1, S5, ZERO
9D00038C  0F400CEC   JAL fputc
9D000390  24040030   ADDIU A0, ZERO, 48
9D000394  2406FFFF   ADDIU A2, ZERO, -1
9D000398  54460001   BNEL V0, A2, 0x9D0003A0
9D00039C  26310001   ADDIU S1, S1, 1
9D0003A0  1000FFF7   BEQ ZERO, ZERO, 0x9D000380
9D0003A4  2694FFFF   ADDIU S4, S4, -1
9D0003A8  10490035   BEQ V0, T1, 0x9D000480
9D0003AC  284D0071   SLTI T5, V0, 113
9D0003B0  51A00008   BEQL T5, ZERO, 0x9D0003D4
9D0003B4  24060075   ADDIU A2, ZERO, 117
9D0003B8  504A002C   BEQL V0, T2, 0x9D00046C
9D0003BC  32E20010   ANDI V0, S7, 16
9D0003C0  2406006F   ADDIU A2, ZERO, 111
9D0003C4  1446FFA0   BNE V0, A2, 0x9D000248
9D0003C8  A3A20012   SB V0, 18(SP)
9D0003CC  1000FFA7   BEQ ZERO, ZERO, 0x9D00026C
9D0003D0  36F70040   ORI S7, S7, 64
9D0003D4  10460064   BEQ V0, A2, 0x9D000568
9D0003D8  24060078   ADDIU A2, ZERO, 120
9D0003DC  10460020   BEQ V0, A2, 0x9D000460
9D0003E0  24060073   ADDIU A2, ZERO, 115
9D0003E4  5446FF98   BNEL V0, A2, 0x9D000248
9D0003E8  A3A20012   SB V0, 18(SP)
9D0003EC  8E500000   LW S0, 0(S2)
9D0003F0  A3A20012   SB V0, 18(SP)
9D0003F4  16000003   BNE S0, ZERO, 0x9D000404
9D0003F8  26470004   ADDIU A3, S2, 4
9D0003FC  3C109D00   LUI S0, -25344
9D000400  26104014   ADDIU S0, S0, 16404
9D000404  00001025   OR V0, ZERO, ZERO
9D000408  00004025   OR T0, ZERO, ZERO
9D00040C  24460001   ADDIU A2, V0, 1
9D000410  02064821   ADDU T1, S0, A2
9D000414  8129FFFF   LB T1, -1(T1)
9D000418  5520001C   BNEL T1, ZERO, 0x9D00048C
9D00041C  00C01025   OR V0, A2, ZERO
9D000420  0008100A   MOVZ V0, ZERO, T0
9D000424  0040F025   OR FP, V0, ZERO
9D000428  00E09025   OR S2, A3, ZERO
9D00042C  10A00004   BEQ A1, ZERO, 0x9D000440
9D000430  03C4102B   SLTU V0, FP, A0
9D000434  00BE102B   SLTU V0, A1, FP
9D000438  00A2F00B   MOVN FP, A1, V0
9D00043C  03C4102B   SLTU V0, FP, A0
9D000440  10400002   BEQ V0, ZERO, 0x9D00044C
9D000444  0000B025   OR S6, ZERO, ZERO
9D000448  009EB023   SUBU S6, A0, FP
9D00044C  32F40008   ANDI S4, S7, 8
9D000450  12800014   BEQ S4, ZERO, 0x9D0004A4
9D000454  2417FFFF   ADDIU S7, ZERO, -1
9D000458  1000001E   BEQ ZERO, ZERO, 0x9D0004D4
9D00045C  03C01025   OR V0, FP, ZERO
9D000460  A3A20012   SB V0, 18(SP)
9D000464  1000FF81   BEQ ZERO, ZERO, 0x9D00026C
9D000468  36F70080   ORI S7, S7, 128
9D00046C  00C01825   OR V1, A2, ZERO
9D000470  00E2180B   MOVN V1, A3, V0
9D000474  00771825   OR V1, V1, S7
9D000478  1000FF64   BEQ ZERO, ZERO, 0x9D00020C
9D00047C  3077FFFF   ANDI S7, V1, -1
9D000480  A3A20012   SB V0, 18(SP)
9D000484  1000FFF7   BEQ ZERO, ZERO, 0x9D000464
9D000488  36F70020   ORI S7, S7, 32
9D00048C  1000FFDF   BEQ ZERO, ZERO, 0x9D00040C
9D000490  24080001   ADDIU T0, ZERO, 1
9D000494  0F400CEC   JAL fputc
9D000498  24040020   ADDIU A0, ZERO, 32
9D00049C  54570001   BNEL V0, S7, 0x9D0004A4
9D0004A0  26310001   ADDIU S1, S1, 1
9D0004A4  26D6FFFF   ADDIU S6, S6, -1
9D0004A8  16D7FFFA   BNE S6, S7, 0x9D000494
9D0004AC  02A02825   OR A1, S5, ZERO
9D0004B0  10000007   BEQ ZERO, ZERO, 0x9D0004D0
9D0004B4  2417FFFF   ADDIU S7, ZERO, -1
9D0004B8  82040000   LB A0, 0(S0)
9D0004BC  02A02825   OR A1, S5, ZERO
9D0004C0  0F400CEC   JAL fputc
9D0004C4  26100001   ADDIU S0, S0, 1
9D0004C8  54570001   BNEL V0, S7, 0x9D0004D0
9D0004CC  26310001   ADDIU S1, S1, 1
9D0004D0  03C01025   OR V0, FP, ZERO
9D0004D4  1440FFF8   BNE V0, ZERO, 0x9D0004B8
9D0004D8  27DEFFFF   ADDIU FP, FP, -1
9D0004DC  1280FEF5   BEQ S4, ZERO, 0x9D0000B4
9D0004E0  2410FFFF   ADDIU S0, ZERO, -1
9D0004E4  26D6FFFF   ADDIU S6, S6, -1
9D0004E8  12D0FED9   BEQ S6, S0, 0x9D000050
9D0004EC  02602825   OR A1, S3, ZERO
9D0004F0  02A02825   OR A1, S5, ZERO
9D0004F4  0F400CEC   JAL fputc
9D0004F8  24040020   ADDIU A0, ZERO, 32
9D0004FC  5450FFF9   BNEL V0, S0, 0x9D0004E4
9D000500  26310001   ADDIU S1, S1, 1
9D000504  1000FFF8   BEQ ZERO, ZERO, 0x9D0004E8
9D000508  26D6FFFF   ADDIU S6, S6, -1
9D00050C  96470000   LHU A3, 0(S2)
9D000510  26490004   ADDIU T1, S2, 4
9D000514  000647C3   SRA T0, A2, 31
9D000518  00084600   SLL T0, T0, 24
9D00051C  00061202   SRL V0, A2, 8
9D000520  01021025   OR V0, T0, V0
9D000524  32E80010   ANDI T0, S7, 16
9D000528  7C0738A0   WSBH A3, A3
9D00052C  1100000B   BEQ T0, ZERO, 0x9D00055C
9D000530  A3A20012   SB V0, 18(SP)
9D000534  24420001   ADDIU V0, V0, 1
9D000538  304200FF   ANDI V0, V0, 255
9D00053C  2C420002   SLTIU V0, V0, 2
9D000540  54400007   BNEL V0, ZERO, 0x9D000560
9D000544  A3A60010   SB A2, 16(SP)
9D000548  A7A70010   SH A3, 16(SP)
9D00054C  241E0002   ADDIU FP, ZERO, 2
9D000550  27B00010   ADDIU S0, SP, 16
9D000554  1000FFB5   BEQ ZERO, ZERO, 0x9D00042C
9D000558  01209025   OR S2, T1, ZERO
9D00055C  A3A60010   SB A2, 16(SP)
9D000560  1000FFFB   BEQ ZERO, ZERO, 0x9D000550
9D000564  241E0001   ADDIU FP, ZERO, 1
9D000568  A3A20012   SB V0, 18(SP)
9D00056C  1000FF3F   BEQ ZERO, ZERO, 0x9D00026C
9D000570  36F700C0   ORI S7, S7, 192
9D000574  26520004   ADDIU S2, S2, 4
9D000578  1000FF47   BEQ ZERO, ZERO, 0x9D000298
9D00057C  0010F7C3   SRA FP, S0, 31
9D000580  04430008   BGEZL V0, 0x9D0005A4
9D000584  8E500000   LW S0, 0(S2)
9D000588  26520007   ADDIU S2, S2, 7
9D00058C  02401025   OR V0, S2, ZERO
9D000590  7C021004   INS V0, ZERO, 0, 3
9D000594  24520008   ADDIU S2, V0, 8
9D000598  8C500000   LW S0, 0(V0)
9D00059C  1000FF44   BEQ ZERO, ZERO, 0x9D0002B0
9D0005A0  8C5E0004   LW FP, 4(V0)
9D0005A4  0000F025   OR FP, ZERO, ZERO
9D0005A8  1000FF41   BEQ ZERO, ZERO, 0x9D0002B0
9D0005AC  26520004   ADDIU S2, S2, 4
9D0005B0  32E300C0   ANDI V1, S7, 192
9D0005B4  1062001C   BEQ V1, V0, 0x9D000628
9D0005B8  24020001   ADDIU V0, ZERO, 1
9D0005BC  240200C0   ADDIU V0, ZERO, 192
9D0005C0  1462FF49   BNE V1, V0, 0x9D0002E8
9D0005C4  83B60012   LB S6, 18(SP)
9D0005C8  24020001   ADDIU V0, ZERO, 1
9D0005CC  A3A20012   SB V0, 18(SP)
9D0005D0  3C029D00   LUI V0, -25344
9D0005D4  244239F0   ADDIU V0, V0, 14832
9D0005D8  24060001   ADDIU A2, ZERO, 1
9D0005DC  00003825   OR A3, ZERO, ZERO
9D0005E0  240C0014   ADDIU T4, ZERO, 20
9D0005E4  10CC000C   BEQ A2, T4, 0x9D000618
9D0005E8  7C065420   SEB T2, A2
9D0005EC  8C4B000C   LW T3, 12(V0)
9D0005F0  8C490008   LW T1, 8(V0)
9D0005F4  24C60001   ADDIU A2, A2, 1
9D0005F8  03CB682B   SLTU T5, FP, T3
9D0005FC  15A00006   BNE T5, ZERO, 0x9D000618
9D000600  24420008   ADDIU V0, V0, 8
9D000604  557EFFF7   BNEL T3, FP, 0x9D0005E4
9D000608  24070001   ADDIU A3, ZERO, 1
9D00060C  0209482B   SLTU T1, S0, T1
9D000610  5120FFF4   BEQL T1, ZERO, 0x9D0005E4
9D000614  24070001   ADDIU A3, ZERO, 1
9D000618  54E0FF32   BNEL A3, ZERO, 0x9D0002E4
9D00061C  A3AA0012   SB T2, 18(SP)
9D000620  1000FF31   BEQ ZERO, ZERO, 0x9D0002E8
9D000624  83B60012   LB S6, 18(SP)
9D000628  A3A20012   SB V0, 18(SP)
9D00062C  00003825   OR A3, ZERO, ZERO
9D000630  24020001   ADDIU V0, ZERO, 1
9D000634  24090010   ADDIU T1, ZERO, 16
9D000638  00003025   OR A2, ZERO, ZERO
9D00063C  240B0010   ADDIU T3, ZERO, 16
9D000640  144B0005   BNE V0, T3, 0x9D000658
9D000644  7C025420   SEB T2, V0
9D000648  54E0FF26   BNEL A3, ZERO, 0x9D0002E4
9D00064C  A3A20012   SB V0, 18(SP)
9D000650  1000FF25   BEQ ZERO, ZERO, 0x9D0002E8
9D000654  83B60012   LB S6, 18(SP)
9D000658  24420001   ADDIU V0, V0, 1
9D00065C  03C6602B   SLTU T4, FP, A2
9D000660  1580FFED   BNE T4, ZERO, 0x9D000618
9D000664  304200FF   ANDI V0, V0, 255
9D000668  54DE0005   BNEL A2, FP, 0x9D000680
9D00066C  00095702   SRL T2, T1, 28
9D000670  0209602B   SLTU T4, S0, T1
9D000674  1580FFE8   BNE T4, ZERO, 0x9D000618
9D000678  00000000   NOP
9D00067C  00095702   SRL T2, T1, 28
9D000680  00063900   SLL A3, A2, 4
9D000684  01473025   OR A2, T2, A3
9D000688  00094900   SLL T1, T1, 4
9D00068C  1000FFEC   BEQ ZERO, ZERO, 0x9D000640
9D000690  24070001   ADDIU A3, ZERO, 1
9D000694  24020001   ADDIU V0, ZERO, 1
9D000698  A3A20012   SB V0, 18(SP)
9D00069C  00003825   OR A3, ZERO, ZERO
9D0006A0  24020001   ADDIU V0, ZERO, 1
9D0006A4  24090008   ADDIU T1, ZERO, 8
9D0006A8  00003025   OR A2, ZERO, ZERO
9D0006AC  240B0015   ADDIU T3, ZERO, 21
9D0006B0  104BFFE5   BEQ V0, T3, 0x9D000648
9D0006B4  7C025420   SEB T2, V0
9D0006B8  24420001   ADDIU V0, V0, 1
9D0006BC  03C6602B   SLTU T4, FP, A2
9D0006C0  1580FFD5   BNE T4, ZERO, 0x9D000618
9D0006C4  304200FF   ANDI V0, V0, 255
9D0006C8  54DE0005   BNEL A2, FP, 0x9D0006E0
9D0006CC  00095742   SRL T2, T1, 29
9D0006D0  0209602B   SLTU T4, S0, T1
9D0006D4  1580FFD0   BNE T4, ZERO, 0x9D000618
9D0006D8  00000000   NOP
9D0006DC  00095742   SRL T2, T1, 29
9D0006E0  000638C0   SLL A3, A2, 3
9D0006E4  01473025   OR A2, T2, A3
9D0006E8  000948C0   SLL T1, T1, 3
9D0006EC  1000FFF0   BEQ ZERO, ZERO, 0x9D0006B0
9D0006F0  24070001   ADDIU A3, ZERO, 1
9D0006F4  10C0FF22   BEQ A2, ZERO, 0x9D000380
9D0006F8  02A02825   OR A1, S5, ZERO
9D0006FC  1000FF1B   BEQ ZERO, ZERO, 0x9D00036C
9D000700  24040020   ADDIU A0, ZERO, 32
9D000704  1280000F   BEQ S4, ZERO, 0x9D000744
9D000708  32E20008   ANDI V0, S7, 8
9D00070C  1440000D   BNE V0, ZERO, 0x9D000744
9D000710  02A02825   OR A1, S5, ZERO
9D000714  24040020   ADDIU A0, ZERO, 32
9D000718  AFA60028   SW A2, 40(SP)
9D00071C  0F400CEC   JAL fputc
9D000720  AFA70024   SW A3, 36(SP)
9D000724  2409FFFF   ADDIU T1, ZERO, -1
9D000728  8FA70024   LW A3, 36(SP)
9D00072C  10490002   BEQ V0, T1, 0x9D000738
9D000730  8FA60028   LW A2, 40(SP)
9D000734  26310001   ADDIU S1, S1, 1
9D000738  2694FFFF   ADDIU S4, S4, -1
9D00073C  1680FFF5   BNE S4, ZERO, 0x9D000714
9D000740  02A02825   OR A1, S5, ZERO
9D000744  10E00016   BEQ A3, ZERO, 0x9D0007A0
9D000748  2404002D   ADDIU A0, ZERO, 45
9D00074C  2402002B   ADDIU V0, ZERO, 43
9D000750  02A02825   OR A1, S5, ZERO
9D000754  0046200A   MOVZ A0, V0, A2
9D000758  0F400CEC   JAL fputc
9D00075C  00000000   NOP
9D000760  2404FFFF   ADDIU A0, ZERO, -1
9D000764  54440001   BNEL V0, A0, 0x9D00076C
9D000768  26310001   ADDIU S1, S1, 1
9D00076C  8FA4002C   LW A0, 44(SP)
9D000770  3C029D00   LUI V0, -25344
9D000774  32E30020   ANDI V1, S7, 32
9D000778  24424030   ADDIU V0, V0, 16432
9D00077C  0083100B   MOVN V0, A0, V1
9D000780  0040B825   OR S7, V0, ZERO
9D000784  8FA20018   LW V0, 24(SP)
9D000788  2C420041   SLTIU V0, V0, 65
9D00078C  AFA20024   SW V0, 36(SP)
9D000790  3C029D00   LUI V0, -25344
9D000794  244239F0   ADDIU V0, V0, 14832
9D000798  10000015   BEQ ZERO, ZERO, 0x9D0007F0
9D00079C  AFA20028   SW V0, 40(SP)
9D0007A0  50C0FFF3   BEQL A2, ZERO, 0x9D000770
9D0007A4  8FA4002C   LW A0, 44(SP)
9D0007A8  02A02825   OR A1, S5, ZERO
9D0007AC  1000FFEA   BEQ ZERO, ZERO, 0x9D000758
9D0007B0  24040020   ADDIU A0, ZERO, 32
9D0007B4  24030040   ADDIU V1, ZERO, 64
9D0007B8  1043003E   BEQ V0, V1, 0x9D0008B4
9D0007BC  00163040   SLL A2, S6, 1
9D0007C0  8FA20024   LW V0, 36(SP)
9D0007C4  1040001E   BEQ V0, ZERO, 0x9D000840
9D0007C8  8FA30018   LW V1, 24(SP)
9D0007CC  8FA20018   LW V0, 24(SP)
9D0007D0  10400022   BEQ V0, ZERO, 0x9D00085C
9D0007D4  8FA30028   LW V1, 40(SP)
9D0007D8  83A40012   LB A0, 18(SP)
9D0007DC  0F400CEC   JAL fputc
9D0007E0  02A02825   OR A1, S5, ZERO
9D0007E4  2403FFFF   ADDIU V1, ZERO, -1
9D0007E8  54430001   BNEL V0, V1, 0x9D0007F0
9D0007EC  26310001   ADDIU S1, S1, 1
9D0007F0  26D6FFFF   ADDIU S6, S6, -1
9D0007F4  2402FFFF   ADDIU V0, ZERO, -1
9D0007F8  16C2FFEE   BNE S6, V0, 0x9D0007B4
9D0007FC  8FA20018   LW V0, 24(SP)
9D000800  8FA20020   LW V0, 32(SP)
9D000804  1040FE12   BEQ V0, ZERO, 0x9D000050
9D000808  02602825   OR A1, S3, ZERO
9D00080C  5280FE11   BEQL S4, ZERO, 0x9D000054
9D000810  80A40000   LB A0, 0(A1)
9D000814  2410FFFF   ADDIU S0, ZERO, -1
9D000818  02A02825   OR A1, S5, ZERO
9D00081C  0F400CEC   JAL fputc
9D000820  24040020   ADDIU A0, ZERO, 32
9D000824  54500001   BNEL V0, S0, 0x9D00082C
9D000828  26310001   ADDIU S1, S1, 1
9D00082C  2694FFFF   ADDIU S4, S4, -1
9D000830  5680FFFA   BNEL S4, ZERO, 0x9D00081C
9D000834  02A02825   OR A1, S5, ZERO
9D000838  1000FE05   BEQ ZERO, ZERO, 0x9D000050
9D00083C  02602825   OR A1, S3, ZERO
9D000840  24020080   ADDIU V0, ZERO, 128
9D000844  10620013   BEQ V1, V0, 0x9D000894
9D000848  00163080   SLL A2, S6, 2
9D00084C  240200C0   ADDIU V0, ZERO, 192
9D000850  1462FFE2   BNE V1, V0, 0x9D0007DC
9D000854  83A40012   LB A0, 18(SP)
9D000858  8FA30028   LW V1, 40(SP)
9D00085C  001610C0   SLL V0, S6, 3
9D000860  02002025   OR A0, S0, ZERO
9D000864  00621021   ADDU V0, V1, V0
9D000868  8C460000   LW A2, 0(V0)
9D00086C  8C470004   LW A3, 4(V0)
9D000870  0F400B0D   JAL __udivdi3
9D000874  03C02825   OR A1, FP, ZERO
9D000878  00402025   OR A0, V0, ZERO
9D00087C  2406000A   ADDIU A2, ZERO, 10
9D000880  00003825   OR A3, ZERO, ZERO
9D000884  0F400A0F   JAL __umoddi3
9D000888  00602825   OR A1, V1, ZERO
9D00088C  10000007   BEQ ZERO, ZERO, 0x9D0008AC
9D000890  24420030   ADDIU V0, V0, 48
9D000894  02002025   OR A0, S0, ZERO
9D000898  0F400FE8   JAL __lshrdi3
9D00089C  03C02825   OR A1, FP, ZERO
9D0008A0  3042000F   ANDI V0, V0, 15
9D0008A4  02E21021   ADDU V0, S7, V0
9D0008A8  90420000   LBU V0, 0(V0)
9D0008AC  1000FFCA   BEQ ZERO, ZERO, 0x9D0007D8
9D0008B0  A3A20012   SB V0, 18(SP)
9D0008B4  00D63021   ADDU A2, A2, S6
9D0008B8  02002025   OR A0, S0, ZERO
9D0008BC  0F400FE8   JAL __lshrdi3
9D0008C0  03C02825   OR A1, FP, ZERO
9D0008C4  1000FFF1   BEQ ZERO, ZERO, 0x9D00088C
9D0008C8  30420007   ANDI V0, V0, 7
9D001134  27BDFFB0   ADDIU SP, SP, -80
9D001138  3C029D00   LUI V0, -25344
9D00113C  AFB60040   SW S6, 64(SP)
9D001140  24424068   ADDIU V0, V0, 16488
9D001144  3C169D00   LUI S6, -25344
9D001148  AFB40038   SW S4, 56(SP)
9D00114C  AFB20030   SW S2, 48(SP)
9D001150  AFB00028   SW S0, 40(SP)
9D001154  AFBF004C   SW RA, 76(SP)
9D001158  AFBE0048   SW FP, 72(SP)
9D00115C  AFB70044   SW S7, 68(SP)
9D001160  AFB5003C   SW S5, 60(SP)
9D001164  AFB30034   SW S3, 52(SP)
9D001168  AFB1002C   SW S1, 44(SP)
9D00116C  0080A025   OR S4, A0, ZERO
9D001170  00C09025   OR S2, A2, ZERO
9D001174  00008025   OR S0, ZERO, ZERO
9D001178  26D6370D   ADDIU S6, S6, 14093
9D00117C  AFA20020   SW V0, 32(SP)
9D001180  80A40000   LB A0, 0(A1)
9D001184  24B10001   ADDIU S1, A1, 1
9D001188  10800063   BEQ A0, ZERO, 0x9D001318
9D00118C  A3A40012   SB A0, 18(SP)
9D001190  24020025   ADDIU V0, ZERO, 37
9D001194  10820008   BEQ A0, V0, 0x9D0011B8
9D001198  00001025   OR V0, ZERO, ZERO
9D00119C  0F400CEC   JAL fputc
9D0011A0  02802825   OR A1, S4, ZERO
9D0011A4  2403FFFF   ADDIU V1, ZERO, -1
9D0011A8  54430001   BNEL V0, V1, 0x9D0011B0
9D0011AC  26100001   ADDIU S0, S0, 1
9D0011B0  1000FFF3   BEQ ZERO, ZERO, 0x9D001180
9D0011B4  02202825   OR A1, S1, ZERO
9D0011B8  2404002B   ADDIU A0, ZERO, 43
9D0011BC  2406002D   ADDIU A2, ZERO, 45
9D0011C0  24070030   ADDIU A3, ZERO, 48
9D0011C4  10000007   BEQ ZERO, ZERO, 0x9D0011E4
9D0011C8  24080020   ADDIU T0, ZERO, 32
9D0011CC  50660004   BEQL V1, A2, 0x9D0011E0
9D0011D0  34420008   ORI V0, V0, 8
9D0011D4  5467000C   BNEL V1, A3, 0x9D001208
9D0011D8  30440002   ANDI A0, V0, 2
9D0011DC  34420004   ORI V0, V0, 4
9D0011E0  00A08825   OR S1, A1, ZERO
9D0011E4  82230000   LB V1, 0(S1)
9D0011E8  10640032   BEQ V1, A0, 0x9D0012B4
9D0011EC  26250001   ADDIU A1, S1, 1
9D0011F0  2869002C   SLTI T1, V1, 44
9D0011F4  1120FFF5   BEQ T1, ZERO, 0x9D0011CC
9D0011F8  00000000   NOP
9D0011FC  5068FFF8   BEQL V1, T0, 0x9D0011E0
9D001200  34420001   ORI V0, V0, 1
9D001204  30440002   ANDI A0, V0, 2
9D001208  54800001   BNEL A0, ZERO, 0x9D001210
9D00120C  304200FE   ANDI V0, V0, 254
9D001210  30440008   ANDI A0, V0, 8
9D001214  54800001   BNEL A0, ZERO, 0x9D00121C
9D001218  304200FB   ANDI V0, V0, 251
9D00121C  00762021   ADDU A0, V1, S6
9D001220  90840000   LBU A0, 0(A0)
9D001224  30840004   ANDI A0, A0, 4
9D001228  10800024   BEQ A0, ZERO, 0x9D0012BC
9D00122C  2406002A   ADDIU A2, ZERO, 42
9D001230  00002025   OR A0, ZERO, ZERO
9D001234  2405000A   ADDIU A1, ZERO, 10
9D001238  70853002   MUL A2, A0, A1
9D00123C  26310001   ADDIU S1, S1, 1
9D001240  8223FFFF   LB V1, -1(S1)
9D001244  00C32021   ADDU A0, A2, V1
9D001248  82230000   LB V1, 0(S1)
9D00124C  02C31821   ADDU V1, S6, V1
9D001250  90630000   LBU V1, 0(V1)
9D001254  30630004   ANDI V1, V1, 4
9D001258  1460FFF7   BNE V1, ZERO, 0x9D001238
9D00125C  2484FFD0   ADDIU A0, A0, -48
9D001260  82260000   LB A2, 0(S1)
9D001264  2403002E   ADDIU V1, ZERO, 46
9D001268  14C3001C   BNE A2, V1, 0x9D0012DC
9D00126C  00002825   OR A1, ZERO, ZERO
9D001270  82260001   LB A2, 1(S1)
9D001274  2403002A   ADDIU V1, ZERO, 42
9D001278  50C30016   BEQL A2, V1, 0x9D0012D4
9D00127C  8E450000   LW A1, 0(S2)
9D001280  26310001   ADDIU S1, S1, 1
9D001284  2408000A   ADDIU T0, ZERO, 10
9D001288  82230000   LB V1, 0(S1)
9D00128C  02C33021   ADDU A2, S6, V1
9D001290  90C60000   LBU A2, 0(A2)
9D001294  30C60004   ANDI A2, A2, 4
9D001298  10C00010   BEQ A2, ZERO, 0x9D0012DC
9D00129C  26270001   ADDIU A3, S1, 1
9D0012A0  70A83002   MUL A2, A1, T0
9D0012A4  00E08825   OR S1, A3, ZERO
9D0012A8  00C32821   ADDU A1, A2, V1
9D0012AC  1000FFF6   BEQ ZERO, ZERO, 0x9D001288
9D0012B0  24A5FFD0   ADDIU A1, A1, -48
9D0012B4  1000FFCA   BEQ ZERO, ZERO, 0x9D0011E0
9D0012B8  34420002   ORI V0, V0, 2
9D0012BC  1466FFE8   BNE V1, A2, 0x9D001260
9D0012C0  00002025   OR A0, ZERO, ZERO
9D0012C4  8E440000   LW A0, 0(S2)
9D0012C8  00A08825   OR S1, A1, ZERO
9D0012CC  1000FFE4   BEQ ZERO, ZERO, 0x9D001260
9D0012D0  26520004   ADDIU S2, S2, 4
9D0012D4  26310002   ADDIU S1, S1, 2
9D0012D8  26520004   ADDIU S2, S2, 4
9D0012DC  2406006C   ADDIU A2, ZERO, 108
9D0012E0  2407004C   ADDIU A3, ZERO, 76
9D0012E4  26310001   ADDIU S1, S1, 1
9D0012E8  8223FFFF   LB V1, -1(S1)
9D0012EC  1066003C   BEQ V1, A2, 0x9D0013E0
9D0012F0  2868006D   SLTI T0, V1, 109
9D0012F4  51000015   BEQL T0, ZERO, 0x9D00134C
9D0012F8  24060075   ADDIU A2, ZERO, 117
9D0012FC  50670039   BEQL V1, A3, 0x9D0013E4
9D001300  30430010   ANDI V1, V0, 16
9D001304  24060063   ADDIU A2, ZERO, 99
9D001308  506600A5   BEQL V1, A2, 0x9D0015A0
9D00130C  8E460000   LW A2, 0(S2)
9D001310  546000BA   BNEL V1, ZERO, 0x9D0015FC
9D001314  A3A30012   SB V1, 18(SP)
9D001318  8FBF004C   LW RA, 76(SP)
9D00131C  02001025   OR V0, S0, ZERO
9D001320  8FBE0048   LW FP, 72(SP)
9D001324  8FB70044   LW S7, 68(SP)
9D001328  8FB60040   LW S6, 64(SP)
9D00132C  8FB5003C   LW S5, 60(SP)
9D001330  8FB40038   LW S4, 56(SP)
9D001334  8FB30034   LW S3, 52(SP)
9D001338  8FB20030   LW S2, 48(SP)
9D00133C  8FB1002C   LW S1, 44(SP)
9D001340  8FB00028   LW S0, 40(SP)
9D001344  03E00008   JR RA
9D001348  27BD0050   ADDIU SP, SP, 80
9D00134C  106600AE   BEQ V1, A2, 0x9D001608
9D001350  24060078   ADDIU A2, ZERO, 120
9D001354  10660027   BEQ V1, A2, 0x9D0013F4
9D001358  24060073   ADDIU A2, ZERO, 115
9D00135C  546600A7   BNEL V1, A2, 0x9D0015FC
9D001360  A3A30012   SB V1, 18(SP)
9D001364  8E460000   LW A2, 0(S2)
9D001368  A3A30012   SB V1, 18(SP)
9D00136C  26480004   ADDIU T0, S2, 4
9D001370  14C00003   BNE A2, ZERO, 0x9D001380
9D001374  00C0B825   OR S7, A2, ZERO
9D001378  3C069D00   LUI A2, -25344
9D00137C  24D74060   ADDIU S7, A2, 16480
9D001380  00001825   OR V1, ZERO, ZERO
9D001384  00009825   OR S3, ZERO, ZERO
9D001388  24670001   ADDIU A3, V1, 1
9D00138C  02E74821   ADDU T1, S7, A3
9D001390  8129FFFF   LB T1, -1(T1)
9D001394  55200061   BNEL T1, ZERO, 0x9D00151C
9D001398  00E01825   OR V1, A3, ZERO
9D00139C  0013180A   MOVZ V1, ZERO, S3
9D0013A0  00609825   OR S3, V1, ZERO
9D0013A4  01009025   OR S2, T0, ZERO
9D0013A8  10A00004   BEQ A1, ZERO, 0x9D0013BC
9D0013AC  0264182B   SLTU V1, S3, A0
9D0013B0  00B3182B   SLTU V1, A1, S3
9D0013B4  00A3980B   MOVN S3, A1, V1
9D0013B8  0264182B   SLTU V1, S3, A0
9D0013BC  10600002   BEQ V1, ZERO, 0x9D0013C8
9D0013C0  0000A825   OR S5, ZERO, ZERO
9D0013C4  0093A823   SUBU S5, A0, S3
9D0013C8  30420008   ANDI V0, V0, 8
9D0013CC  AFA20018   SW V0, 24(SP)
9D0013D0  10400058   BEQ V0, ZERO, 0x9D001534
9D0013D4  241EFFFF   ADDIU FP, ZERO, -1
9D0013D8  10000062   BEQ ZERO, ZERO, 0x9D001564
9D0013DC  02601025   OR V0, S3, ZERO
9D0013E0  30430010   ANDI V1, V0, 16
9D0013E4  2C630001   SLTIU V1, V1, 1
9D0013E8  00031900   SLL V1, V1, 4
9D0013EC  1000FFBD   BEQ ZERO, ZERO, 0x9D0012E4
9D0013F0  00621025   OR V0, V1, V0
9D0013F4  A3A30012   SB V1, 18(SP)
9D0013F8  34420080   ORI V0, V0, 128
9D0013FC  8E570000   LW S7, 0(S2)
9D001400  14A00002   BNE A1, ZERO, 0x9D00140C
9D001404  26520004   ADDIU S2, S2, 4
9D001408  2EE50001   SLTIU A1, S7, 1
9D00140C  305E00C0   ANDI FP, V0, 192
9D001410  24030080   ADDIU V1, ZERO, 128
9D001414  13C3007F   BEQ FP, V1, 0x9D001614
9D001418  240300C0   ADDIU V1, ZERO, 192
9D00141C  17C30015   BNE FP, V1, 0x9D001474
9D001420  83B50012   LB S5, 18(SP)
9D001424  24030001   ADDIU V1, ZERO, 1
9D001428  A3A30012   SB V1, 18(SP)
9D00142C  3C039D00   LUI V1, -25344
9D001430  24633A90   ADDIU V1, V1, 14992
9D001434  24060001   ADDIU A2, ZERO, 1
9D001438  00003825   OR A3, ZERO, ZERO
9D00143C  240A0014   ADDIU T2, ZERO, 20
9D001440  10CA0009   BEQ A2, T2, 0x9D001468
9D001444  7C064C20   SEB T1, A2
9D001448  8C6B000C   LW T3, 12(V1)
9D00144C  8C680008   LW T0, 8(V1)
9D001450  24C60001   ADDIU A2, A2, 1
9D001454  15600004   BNE T3, ZERO, 0x9D001468
9D001458  24630008   ADDIU V1, V1, 8
9D00145C  02E8402B   SLTU T0, S7, T0
9D001460  5100FFF7   BEQL T0, ZERO, 0x9D001440
9D001464  24070001   ADDIU A3, ZERO, 1
9D001468  54E00001   BNEL A3, ZERO, 0x9D001470
9D00146C  A3A90012   SB T1, 18(SP)
9D001470  83B50012   LB S5, 18(SP)
9D001474  02A5182A   SLT V1, S5, A1
9D001478  10600003   BEQ V1, ZERO, 0x9D001488
9D00147C  00000000   NOP
9D001480  A3A50012   SB A1, 18(SP)
9D001484  00A0A825   OR S5, A1, ZERO
9D001488  10800005   BEQ A0, ZERO, 0x9D0014A0
9D00148C  83A30012   LB V1, 18(SP)
9D001490  30430003   ANDI V1, V0, 3
9D001494  54600001   BNEL V1, ZERO, 0x9D00149C
9D001498  2484FFFF   ADDIU A0, A0, -1
9D00149C  83A30012   LB V1, 18(SP)
9D0014A0  0064282A   SLT A1, V1, A0
9D0014A4  10A00002   BEQ A1, ZERO, 0x9D0014B0
9D0014A8  00009825   OR S3, ZERO, ZERO
9D0014AC  00839823   SUBU S3, A0, V1
9D0014B0  30430008   ANDI V1, V0, 8
9D0014B4  30460002   ANDI A2, V0, 2
9D0014B8  AFA30018   SW V1, 24(SP)
9D0014BC  30430001   ANDI V1, V0, 1
9D0014C0  30420004   ANDI V0, V0, 4
9D0014C4  10400071   BEQ V0, ZERO, 0x9D00168C
9D0014C8  00000000   NOP
9D0014CC  10C0006B   BEQ A2, ZERO, 0x9D00167C
9D0014D0  2404002B   ADDIU A0, ZERO, 43
9D0014D4  2402002D   ADDIU V0, ZERO, 45
9D0014D8  02802825   OR A1, S4, ZERO
9D0014DC  0043200B   MOVN A0, V0, V1
9D0014E0  0F400CEC   JAL fputc
9D0014E4  00000000   NOP
9D0014E8  2403FFFF   ADDIU V1, ZERO, -1
9D0014EC  54430001   BNEL V0, V1, 0x9D0014F4
9D0014F0  26100001   ADDIU S0, S0, 1
9D0014F4  12600080   BEQ S3, ZERO, 0x9D0016F8
9D0014F8  3C029D00   LUI V0, -25344
9D0014FC  02802825   OR A1, S4, ZERO
9D001500  0F400CEC   JAL fputc
9D001504  24040030   ADDIU A0, ZERO, 48
9D001508  2403FFFF   ADDIU V1, ZERO, -1
9D00150C  54430001   BNEL V0, V1, 0x9D001514
9D001510  26100001   ADDIU S0, S0, 1
9D001514  1000FFF7   BEQ ZERO, ZERO, 0x9D0014F4
9D001518  2673FFFF   ADDIU S3, S3, -1
9D00151C  1000FF9A   BEQ ZERO, ZERO, 0x9D001388
9D001520  24130001   ADDIU S3, ZERO, 1
9D001524  0F400CEC   JAL fputc
9D001528  24040020   ADDIU A0, ZERO, 32
9D00152C  545E0001   BNEL V0, FP, 0x9D001534
9D001530  26100001   ADDIU S0, S0, 1
9D001534  26B5FFFF   ADDIU S5, S5, -1
9D001538  16BEFFFA   BNE S5, FP, 0x9D001524
9D00153C  02802825   OR A1, S4, ZERO
9D001540  10000007   BEQ ZERO, ZERO, 0x9D001560
9D001544  241EFFFF   ADDIU FP, ZERO, -1
9D001548  82E40000   LB A0, 0(S7)
9D00154C  02802825   OR A1, S4, ZERO
9D001550  0F400CEC   JAL fputc
9D001554  26F70001   ADDIU S7, S7, 1
9D001558  545E0001   BNEL V0, FP, 0x9D001560
9D00155C  26100001   ADDIU S0, S0, 1
9D001560  02601025   OR V0, S3, ZERO
9D001564  1440FFF8   BNE V0, ZERO, 0x9D001548
9D001568  2673FFFF   ADDIU S3, S3, -1
9D00156C  8FA20018   LW V0, 24(SP)
9D001570  1040FF0F   BEQ V0, ZERO, 0x9D0011B0
9D001574  2413FFFF   ADDIU S3, ZERO, -1
9D001578  26B5FFFF   ADDIU S5, S5, -1
9D00157C  12B3FF00   BEQ S5, S3, 0x9D001180
9D001580  02202825   OR A1, S1, ZERO
9D001584  02802825   OR A1, S4, ZERO
9D001588  0F400CEC   JAL fputc
9D00158C  24040020   ADDIU A0, ZERO, 32
9D001590  5453FFF9   BNEL V0, S3, 0x9D001578
9D001594  26100001   ADDIU S0, S0, 1
9D001598  1000FFF8   BEQ ZERO, ZERO, 0x9D00157C
9D00159C  26B5FFFF   ADDIU S5, S5, -1
9D0015A0  96470000   LHU A3, 0(S2)
9D0015A4  26490004   ADDIU T1, S2, 4
9D0015A8  000647C3   SRA T0, A2, 31
9D0015AC  00084600   SLL T0, T0, 24
9D0015B0  00061A02   SRL V1, A2, 8
9D0015B4  01031825   OR V1, T0, V1
9D0015B8  30480010   ANDI T0, V0, 16
9D0015BC  7C0738A0   WSBH A3, A3
9D0015C0  1100000B   BEQ T0, ZERO, 0x9D0015F0
9D0015C4  A3A30012   SB V1, 18(SP)
9D0015C8  24630001   ADDIU V1, V1, 1
9D0015CC  306300FF   ANDI V1, V1, 255
9D0015D0  2C630002   SLTIU V1, V1, 2
9D0015D4  54600007   BNEL V1, ZERO, 0x9D0015F4
9D0015D8  A3A60010   SB A2, 16(SP)
9D0015DC  A7A70010   SH A3, 16(SP)
9D0015E0  24130002   ADDIU S3, ZERO, 2
9D0015E4  27B70010   ADDIU S7, SP, 16
9D0015E8  1000FF6F   BEQ ZERO, ZERO, 0x9D0013A8
9D0015EC  01209025   OR S2, T1, ZERO
9D0015F0  A3A60010   SB A2, 16(SP)
9D0015F4  1000FFFB   BEQ ZERO, ZERO, 0x9D0015E4
9D0015F8  24130001   ADDIU S3, ZERO, 1
9D0015FC  27B70012   ADDIU S7, SP, 18
9D001600  1000FF69   BEQ ZERO, ZERO, 0x9D0013A8
9D001604  24130001   ADDIU S3, ZERO, 1
9D001608  A3A30012   SB V1, 18(SP)
9D00160C  1000FF7B   BEQ ZERO, ZERO, 0x9D0013FC
9D001610  344200C0   ORI V0, V0, 192
9D001614  24030001   ADDIU V1, ZERO, 1
9D001618  A3A30012   SB V1, 18(SP)
9D00161C  00004025   OR T0, ZERO, ZERO
9D001620  24030001   ADDIU V1, ZERO, 1
9D001624  24070010   ADDIU A3, ZERO, 16
9D001628  00003025   OR A2, ZERO, ZERO
9D00162C  24090010   ADDIU T1, ZERO, 16
9D001630  14690005   BNE V1, T1, 0x9D001648
9D001634  7C035420   SEB T2, V1
9D001638  5500FF8D   BNEL T0, ZERO, 0x9D001470
9D00163C  A3A30012   SB V1, 18(SP)
9D001640  1000FF8C   BEQ ZERO, ZERO, 0x9D001474
9D001644  83B50012   LB S5, 18(SP)
9D001648  24630001   ADDIU V1, V1, 1
9D00164C  14C00004   BNE A2, ZERO, 0x9D001660
9D001650  306300FF   ANDI V1, V1, 255
9D001654  02E7302B   SLTU A2, S7, A3
9D001658  10C00005   BEQ A2, ZERO, 0x9D001670
9D00165C  00073702   SRL A2, A3, 28
9D001660  5500FF83   BNEL T0, ZERO, 0x9D001470
9D001664  A3AA0012   SB T2, 18(SP)
9D001668  1000FF82   BEQ ZERO, ZERO, 0x9D001474
9D00166C  83B50012   LB S5, 18(SP)
9D001670  24080001   ADDIU T0, ZERO, 1
9D001674  1000FFEE   BEQ ZERO, ZERO, 0x9D001630
9D001678  00073900   SLL A3, A3, 4
9D00167C  1060FF9D   BEQ V1, ZERO, 0x9D0014F4
9D001680  02802825   OR A1, S4, ZERO
9D001684  1000FF96   BEQ ZERO, ZERO, 0x9D0014E0
9D001688  24040020   ADDIU A0, ZERO, 32
9D00168C  1260000F   BEQ S3, ZERO, 0x9D0016CC
9D001690  8FA20018   LW V0, 24(SP)
9D001694  1440000D   BNE V0, ZERO, 0x9D0016CC
9D001698  02802825   OR A1, S4, ZERO
9D00169C  24040020   ADDIU A0, ZERO, 32
9D0016A0  AFA30024   SW V1, 36(SP)
9D0016A4  0F400CEC   JAL fputc
9D0016A8  AFA6001C   SW A2, 28(SP)
9D0016AC  2407FFFF   ADDIU A3, ZERO, -1
9D0016B0  8FA6001C   LW A2, 28(SP)
9D0016B4  10470002   BEQ V0, A3, 0x9D0016C0
9D0016B8  8FA30024   LW V1, 36(SP)
9D0016BC  26100001   ADDIU S0, S0, 1
9D0016C0  2673FFFF   ADDIU S3, S3, -1
9D0016C4  1660FFF5   BNE S3, ZERO, 0x9D00169C
9D0016C8  02802825   OR A1, S4, ZERO
9D0016CC  10C0000D   BEQ A2, ZERO, 0x9D001704
9D0016D0  2404002B   ADDIU A0, ZERO, 43
9D0016D4  2402002D   ADDIU V0, ZERO, 45
9D0016D8  02802825   OR A1, S4, ZERO
9D0016DC  0043200B   MOVN A0, V0, V1
9D0016E0  0F400CEC   JAL fputc
9D0016E4  00000000   NOP
9D0016E8  2403FFFF   ADDIU V1, ZERO, -1
9D0016EC  54430001   BNEL V0, V1, 0x9D0016F4
9D0016F0  26100001   ADDIU S0, S0, 1
9D0016F4  3C029D00   LUI V0, -25344
9D0016F8  24423A90   ADDIU V0, V0, 14992
9D0016FC  10000020   BEQ ZERO, ZERO, 0x9D001780
9D001700  AFA2001C   SW V0, 28(SP)
9D001704  1060FFFC   BEQ V1, ZERO, 0x9D0016F8
9D001708  3C029D00   LUI V0, -25344
9D00170C  02802825   OR A1, S4, ZERO
9D001710  1000FFF3   BEQ ZERO, ZERO, 0x9D0016E0
9D001714  24040020   ADDIU A0, ZERO, 32
9D001718  13C2002D   BEQ FP, V0, 0x9D0017D0
9D00171C  00153080   SLL A2, S5, 2
9D001720  240200C0   ADDIU V0, ZERO, 192
9D001724  17C20011   BNE FP, V0, 0x9D00176C
9D001728  83A40012   LB A0, 18(SP)
9D00172C  8FA3001C   LW V1, 28(SP)
9D001730  001510C0   SLL V0, S5, 3
9D001734  02E02025   OR A0, S7, ZERO
9D001738  00621021   ADDU V0, V1, V0
9D00173C  8C460000   LW A2, 0(V0)
9D001740  8C470004   LW A3, 4(V0)
9D001744  0F400B0D   JAL __udivdi3
9D001748  00002825   OR A1, ZERO, ZERO
9D00174C  00402025   OR A0, V0, ZERO
9D001750  2406000A   ADDIU A2, ZERO, 10
9D001754  00003825   OR A3, ZERO, ZERO
9D001758  0F400A0F   JAL __umoddi3
9D00175C  00602825   OR A1, V1, ZERO
9D001760  24420030   ADDIU V0, V0, 48
9D001764  A3A20012   SB V0, 18(SP)
9D001768  83A40012   LB A0, 18(SP)
9D00176C  0F400CEC   JAL fputc
9D001770  02802825   OR A1, S4, ZERO
9D001774  2403FFFF   ADDIU V1, ZERO, -1
9D001778  54430001   BNEL V0, V1, 0x9D001780
9D00177C  26100001   ADDIU S0, S0, 1
9D001780  26B5FFFF   ADDIU S5, S5, -1
9D001784  2402FFFF   ADDIU V0, ZERO, -1
9D001788  16A2FFE3   BNE S5, V0, 0x9D001718
9D00178C  24020080   ADDIU V0, ZERO, 128
9D001790  8FA20018   LW V0, 24(SP)
9D001794  1040FE7A   BEQ V0, ZERO, 0x9D001180
9D001798  02202825   OR A1, S1, ZERO
9D00179C  5260FE79   BEQL S3, ZERO, 0x9D001184
9D0017A0  80A40000   LB A0, 0(A1)
9D0017A4  2415FFFF   ADDIU S5, ZERO, -1
9D0017A8  02802825   OR A1, S4, ZERO
9D0017AC  0F400CEC   JAL fputc
9D0017B0  24040020   ADDIU A0, ZERO, 32
9D0017B4  54550001   BNEL V0, S5, 0x9D0017BC
9D0017B8  26100001   ADDIU S0, S0, 1
9D0017BC  2673FFFF   ADDIU S3, S3, -1
9D0017C0  5660FFFA   BNEL S3, ZERO, 0x9D0017AC
9D0017C4  02802825   OR A1, S4, ZERO
9D0017C8  1000FE6D   BEQ ZERO, ZERO, 0x9D001180
9D0017CC  02202825   OR A1, S1, ZERO
9D0017D0  02E02025   OR A0, S7, ZERO
9D0017D4  0F400FE8   JAL __lshrdi3
9D0017D8  00002825   OR A1, ZERO, ZERO
9D0017DC  8FA30020   LW V1, 32(SP)
9D0017E0  3042000F   ANDI V0, V0, 15
9D0017E4  00621021   ADDU V0, V1, V0
9D0017E8  1000FFDE   BEQ ZERO, ZERO, 0x9D001764
9D0017EC  90420000   LBU V0, 0(V0)
