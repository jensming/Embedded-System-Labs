Disassembly Listing for Lab9
Generated From:
C:/Users/James/Desktop/ECE13/jensming/Lab09/Lab9.X/dist/default/debug/Lab9.X.debug.elf
Mar 11, 2022 2:24:03 PM

---  c:/users/james/desktop/ece13/jensming/lab09/lab9.x/uart1.c  ----------------------------------------
1:                   #include "CircularBuffer.h"
2:                   #include "Uart1.h"
3:                   
4:                   //CSE13E Support Library
5:                   #include "BOARD.h"
6:                   
7:                   #include <xc.h>
8:                   #include <sys/attribs.h>
9:                   
10:                  static CircularBuffer uart1RxBuffer;
11:                  static uint8_t u1RxBuf[1024];
12:                  static CircularBuffer uart1TxBuffer;
13:                  static uint8_t u1TxBuf[1024];
14:                  
15:                  /*
16:                   * Private functions.
17:                   */
18:                  void Uart1StartTransmission(void);
19:                  
20:                  /**
21:                   * Initialization function for the UART_USED peripheral.
22:                   * Should be called in initialization code for the
23:                   * model. This function configures the UART
24:                   * for whatever baud rate is specified. It also configures two circular buffers
25:                   * for transmission and reception.
26:                   */
27:                  void Uart1Init(uint32_t baudRate)
28:                  {
29:                      // First initialize the necessary circular buffers.
30:                      CB_Init(&uart1RxBuffer, u1RxBuf, sizeof (u1RxBuf));
31:                      CB_Init(&uart1TxBuffer, u1TxBuf, sizeof (u1TxBuf));
32:                  
33:                  #ifdef PIC32MX
34:                      //the next few lines below are redundant with actions performed in BOARD_Init():
35:                      U1MODEbits.ON = 1; //turn on UART
36:                      U1STAbits.UTXEN = 1; //enable TX pin
37:                      U1STAbits.URXEN = 1; //enable RX oun
38:                  
39:                      // The FIFO mode here for transmission is not set to `*_TX_BUFFER_EMPTY` as that seems to fail
40:                      // with some characters dropped. This method, waiting until transmission is finished, is
41:                      // technically slower, but works quite nicely.
42:                      
43:                      U1STAbits.UTXISEL = 0b01; //interrupt when transmission is complete
44:                      U1STAbits.URXISEL = 0b00; //interrupt when RX is not empty (has at least 1 character)
45:                  
46:                  
47:                      // Configure UART interrupt for both RX and TX
48:                      IEC0bits.U1RXIE = 1; //enable RX interrupt
49:                      IEC0bits.U1TXIE = 1; //enable TX interrupt
50:                      IPC6bits.U1IP = 6; //set UART interrupt priority to 6
51:                      IPC6bits.U1IS = 0; //set interrupt subpriority to 0
52:                  #endif
53:                  }
54:                  
55:                  void Uart1ChangeBaudRate(uint16_t brgRegister)
56:                  {
57:                      uint8_t utxen = U1STAbits.UTXEN;
58:                  
59:                      // Disable the port;
60:                      U1MODEbits.UARTEN = 0;
61:                  
62:                      // Change the BRG register to set the new baud rate
63:                      U1BRG = brgRegister;
64:                  
65:                      // Enable the port restoring the previous transmission settings
66:                      U1MODEbits.UARTEN = 1;
67:                      U1STAbits.UTXEN = utxen;
68:                  }
69:                  
70:                  uint8_t Uart1HasData(void)
71:                  {
72:                      return (uart1RxBuffer.dataSize > 0);
73:                  }
74:                  
75:                  /**
76:                   * This function actually initiates transmission. It
77:                   * attempts to start transmission with the first element
78:                   * in the queue if transmission isn't already proceeding.
79:                   * Once transmission starts the interrupt handler will
80:                   * keep things moving from there. The buffer is checked
81:                   * for new data and the transmission buffer is checked that
82:                   * it has room for new data before attempting to transmit.
83:                   */
84:                  void Uart1StartTransmission(void)
85:                  {
86:                      while (uart1TxBuffer.dataSize > 0 && !U1STAbits.UTXBF) {
87:                          // A temporary variable is used here because writing directly into U1TXREG causes some weird issues.
88:                          uint8_t c;
89:                          CB_ReadByte(&uart1TxBuffer, &c);
90:                          U1TXREG = c;
91:                      }
92:                  }
93:                  
94:                  int Uart1ReadByte(uint8_t *datum)
95:                  {
96:                      return CB_ReadByte(&uart1RxBuffer, datum);
97:                  }
98:                  
99:                  /**
100:                  * This function supplements the uart1EnqueueData() function by also
101:                  * providing an interface that only enqueues a single byte.
102:                  */
103:                 void Uart1WriteByte(uint8_t datum)
104:                 {
105:                     CB_WriteByte(&uart1TxBuffer, datum);
106:                     Uart1StartTransmission();
107:                 }
108:                 
109:                 /**
110:                  * This function enqueues all bytes in the passed data character array according to the passed
111:                  * length.
112:                  */
113:                 int Uart1WriteData(const void *data, size_t length)
114:                 {
115:                     int success = CB_WriteMany(&uart1TxBuffer, data, length, FALSE);
116:                 
117:                     Uart1StartTransmission();
118:                 
119:                     return success;
120:                 }
121:                 
122:                 #ifdef PIC32MX
123:                 
124:                 void __ISR(_UART_1_VECTOR, ipl6auto) Uart1Interrupt(void)
125:                 {
126:                     // if receive flag is set, handle received character input
127:                     if (IFS0bits.U1RXIF) {
128:                         // Keep receiving new bytes while the buffer has data.
129:                         while (U1STAbits.URXDA == 1) {
130:                             CB_WriteByte(&uart1RxBuffer, (uint8_t) U1RXREG);
131:                         }
132:                 
133:                         // Clear buffer overflow bit if triggered
134:                         if (U1STAbits.OERR == 1) {
135:                             U1STAbits.OERR = 0;
136:                         }
137:                 
138:                         // Clear the interrupt flag
139:                         IFS0bits.U1RXIF = 0;
140:                     }
141:                 
142:                     // Handle transmission interrupt
143:                     if (IFS0bits.U1TXIF) {
144:                         Uart1StartTransmission();
145:                 
146:                         // Clear the interrupt flag
147:                         IFS0bits.U1TXIF = 0;
148:                     }
149:                 }
150:                 #endif
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D005B80  27BDFFE8   ADDIU SP, SP, -24
9D005B84  AFBF0014   SW RA, 20(SP)
9D005B88  AFBE0010   SW FP, 16(SP)
9D005B8C  03A0F025   OR FP, SP, ZERO
9D005B90  AFC40018   SW A0, 24(FP)
9D005B94  24060400   ADDIU A2, ZERO, 1024
9D005B98  3C02A000   LUI V0, -24576
9D005B9C  24450470   ADDIU A1, V0, 1136
9D005BA0  3C02A000   LUI V0, -24576
9D005BA4  24440460   ADDIU A0, V0, 1120
9D005BA8  0F400A1C   JAL CB_Init
9D005BAC  00000000   NOP
9D005BB0  24060400   ADDIU A2, ZERO, 1024
9D005BB4  3C02A000   LUI V0, -24576
9D005BB8  24450880   ADDIU A1, V0, 2176
9D005BBC  3C02A000   LUI V0, -24576
9D005BC0  24440870   ADDIU A0, V0, 2160
9D005BC4  0F400A1C   JAL CB_Init
9D005BC8  00000000   NOP
9D005BCC  3C03BF80   LUI V1, -16512
9D005BD0  94626000   LHU V0, 24576(V1)
9D005BD4  24040001   ADDIU A0, ZERO, 1
9D005BD8  7C827BC4   INS V0, A0, 15, 1
9D005BDC  A4626000   SH V0, 24576(V1)
9D005BE0  3C03BF80   LUI V1, -16512
9D005BE4  8C626010   LW V0, 24592(V1)
9D005BE8  24040001   ADDIU A0, ZERO, 1
9D005BEC  7C825284   INS V0, A0, 10, 1
9D005BF0  AC626010   SW V0, 24592(V1)
9D005BF4  3C03BF80   LUI V1, -16512
9D005BF8  8C626010   LW V0, 24592(V1)
9D005BFC  24040001   ADDIU A0, ZERO, 1
9D005C00  7C826304   INS V0, A0, 12, 1
9D005C04  AC626010   SW V0, 24592(V1)
9D005C08  3C03BF80   LUI V1, -16512
9D005C0C  8C626010   LW V0, 24592(V1)
9D005C10  24040001   ADDIU A0, ZERO, 1
9D005C14  7C827B84   INS V0, A0, 14, 2
9D005C18  AC626010   SW V0, 24592(V1)
9D005C1C  3C03BF80   LUI V1, -16512
9D005C20  8C626010   LW V0, 24592(V1)
9D005C24  7C023984   INS V0, ZERO, 6, 2
9D005C28  AC626010   SW V0, 24592(V1)
9D005C2C  3C03BF88   LUI V1, -16504
9D005C30  8C621060   LW V0, 4192(V1)
9D005C34  24040001   ADDIU A0, ZERO, 1
9D005C38  7C82DEC4   INS V0, A0, 27, 1
9D005C3C  AC621060   SW V0, 4192(V1)
9D005C40  3C03BF88   LUI V1, -16504
9D005C44  8C621060   LW V0, 4192(V1)
9D005C48  24040001   ADDIU A0, ZERO, 1
9D005C4C  7C82E704   INS V0, A0, 28, 1
9D005C50  AC621060   SW V0, 4192(V1)
9D005C54  3C03BF88   LUI V1, -16504
9D005C58  8C6210F0   LW V0, 4336(V1)
9D005C5C  24040006   ADDIU A0, ZERO, 6
9D005C60  7C822084   INS V0, A0, 2, 3
9D005C64  AC6210F0   SW V0, 4336(V1)
9D005C68  3C03BF88   LUI V1, -16504
9D005C6C  8C6210F0   LW V0, 4336(V1)
9D005C70  7C020804   INS V0, ZERO, 0, 2
9D005C74  AC6210F0   SW V0, 4336(V1)
9D005C78  00000000   NOP
9D005C7C  03C0E825   OR SP, FP, ZERO
9D005C80  8FBF0014   LW RA, 20(SP)
9D005C84  8FBE0010   LW FP, 16(SP)
9D005C88  27BD0018   ADDIU SP, SP, 24
9D005C8C  03E00008   JR RA
9D005C90  00000000   NOP
9D005C94  27BDFFF0   ADDIU SP, SP, -16
9D005C98  AFBE000C   SW FP, 12(SP)
9D005C9C  03A0F025   OR FP, SP, ZERO
9D005CA0  00801025   OR V0, A0, ZERO
9D005CA4  A7C20010   SH V0, 16(FP)
9D005CA8  3C02BF80   LUI V0, -16512
9D005CAC  8C426010   LW V0, 24592(V0)
9D005CB0  7C420280   EXT V0, V0, 10, 1
9D005CB4  304200FF   ANDI V0, V0, 255
9D005CB8  A3C20000   SB V0, 0(FP)
9D005CBC  3C03BF80   LUI V1, -16512
9D005CC0  94626000   LHU V0, 24576(V1)
9D005CC4  7C027BC4   INS V0, ZERO, 15, 1
9D005CC8  A4626000   SH V0, 24576(V1)
9D005CCC  97C30010   LHU V1, 16(FP)
9D005CD0  3C02BF80   LUI V0, -16512
9D005CD4  AC436040   SW V1, 24640(V0)
9D005CD8  3C03BF80   LUI V1, -16512
9D005CDC  94626000   LHU V0, 24576(V1)
9D005CE0  24040001   ADDIU A0, ZERO, 1
9D005CE4  7C827BC4   INS V0, A0, 15, 1
9D005CE8  A4626000   SH V0, 24576(V1)
9D005CEC  93C20000   LBU V0, 0(FP)
9D005CF0  30420001   ANDI V0, V0, 1
9D005CF4  304400FF   ANDI A0, V0, 255
9D005CF8  3C03BF80   LUI V1, -16512
9D005CFC  8C626010   LW V0, 24592(V1)
9D005D00  7C825284   INS V0, A0, 10, 1
9D005D04  AC626010   SW V0, 24592(V1)
9D005D08  00000000   NOP
9D005D0C  03C0E825   OR SP, FP, ZERO
9D005D10  8FBE000C   LW FP, 12(SP)
9D005D14  27BD0010   ADDIU SP, SP, 16
9D005D18  03E00008   JR RA
9D005D1C  00000000   NOP
9D005D20  27BDFFF8   ADDIU SP, SP, -8
9D005D24  AFBE0004   SW FP, 4(SP)
9D005D28  03A0F025   OR FP, SP, ZERO
9D005D2C  3C02A000   LUI V0, -24576
9D005D30  24420460   ADDIU V0, V0, 1120
9D005D34  94420006   LHU V0, 6(V0)
9D005D38  0002102B   SLTU V0, ZERO, V0
9D005D3C  304200FF   ANDI V0, V0, 255
9D005D40  03C0E825   OR SP, FP, ZERO
9D005D44  8FBE0004   LW FP, 4(SP)
9D005D48  27BD0008   ADDIU SP, SP, 8
9D005D4C  03E00008   JR RA
9D005D50  00000000   NOP
9D005D54  27BDFFE0   ADDIU SP, SP, -32
9D005D58  AFBF001C   SW RA, 28(SP)
9D005D5C  AFBE0018   SW FP, 24(SP)
9D005D60  03A0F025   OR FP, SP, ZERO
9D005D64  1000000B   BEQ ZERO, ZERO, 0x9D005D94
9D005D68  00000000   NOP
9D005D6C  27C20010   ADDIU V0, FP, 16
9D005D70  00402825   OR A1, V0, ZERO
9D005D74  3C02A000   LUI V0, -24576
9D005D78  24440870   ADDIU A0, V0, 2160
9D005D7C  0F400A57   JAL CB_ReadByte
9D005D80  00000000   NOP
9D005D84  93C20010   LBU V0, 16(FP)
9D005D88  00401825   OR V1, V0, ZERO
9D005D8C  3C02BF80   LUI V0, -16512
9D005D90  AC436020   SW V1, 24608(V0)
9D005D94  3C02A000   LUI V0, -24576
9D005D98  24420870   ADDIU V0, V0, 2160
9D005D9C  94420006   LHU V0, 6(V0)
9D005DA0  10400007   BEQ V0, ZERO, 0x9D005DC0
9D005DA4  00000000   NOP
9D005DA8  3C02BF80   LUI V0, -16512
9D005DAC  8C426010   LW V0, 24592(V0)
9D005DB0  7C420240   EXT V0, V0, 9, 1
9D005DB4  304200FF   ANDI V0, V0, 255
9D005DB8  1040FFEC   BEQ V0, ZERO, 0x9D005D6C
9D005DBC  00000000   NOP
9D005DC0  00000000   NOP
9D005DC4  03C0E825   OR SP, FP, ZERO
9D005DC8  8FBF001C   LW RA, 28(SP)
9D005DCC  8FBE0018   LW FP, 24(SP)
9D005DD0  27BD0020   ADDIU SP, SP, 32
9D005DD4  03E00008   JR RA
9D005DD8  00000000   NOP
9D005DDC  27BDFFE8   ADDIU SP, SP, -24
9D005DE0  AFBF0014   SW RA, 20(SP)
9D005DE4  AFBE0010   SW FP, 16(SP)
9D005DE8  03A0F025   OR FP, SP, ZERO
9D005DEC  AFC40018   SW A0, 24(FP)
9D005DF0  8FC50018   LW A1, 24(FP)
9D005DF4  3C02A000   LUI V0, -24576
9D005DF8  24440460   ADDIU A0, V0, 1120
9D005DFC  0F400A57   JAL CB_ReadByte
9D005E00  00000000   NOP
9D005E04  03C0E825   OR SP, FP, ZERO
9D005E08  8FBF0014   LW RA, 20(SP)
9D005E0C  8FBE0010   LW FP, 16(SP)
9D005E10  27BD0018   ADDIU SP, SP, 24
9D005E14  03E00008   JR RA
9D005E18  00000000   NOP
9D005E1C  27BDFFE8   ADDIU SP, SP, -24
9D005E20  AFBF0014   SW RA, 20(SP)
9D005E24  AFBE0010   SW FP, 16(SP)
9D005E28  03A0F025   OR FP, SP, ZERO
9D005E2C  00801025   OR V0, A0, ZERO
9D005E30  A3C20018   SB V0, 24(FP)
9D005E34  93C20018   LBU V0, 24(FP)
9D005E38  00402825   OR A1, V0, ZERO
9D005E3C  3C02A000   LUI V0, -24576
9D005E40  24440870   ADDIU A0, V0, 2160
9D005E44  0F400AF3   JAL CB_WriteByte
9D005E48  00000000   NOP
9D005E4C  0F401755   JAL Uart1StartTransmission
9D005E50  00000000   NOP
9D005E54  00000000   NOP
9D005E58  03C0E825   OR SP, FP, ZERO
9D005E5C  8FBF0014   LW RA, 20(SP)
9D005E60  8FBE0010   LW FP, 16(SP)
9D005E64  27BD0018   ADDIU SP, SP, 24
9D005E68  03E00008   JR RA
9D005E6C  00000000   NOP
9D005E70  27BDFFE0   ADDIU SP, SP, -32
9D005E74  AFBF001C   SW RA, 28(SP)
9D005E78  AFBE0018   SW FP, 24(SP)
9D005E7C  03A0F025   OR FP, SP, ZERO
9D005E80  AFC40020   SW A0, 32(FP)
9D005E84  AFC50024   SW A1, 36(FP)
9D005E88  8FC20024   LW V0, 36(FP)
9D005E8C  3042FFFF   ANDI V0, V0, -1
9D005E90  00003825   OR A3, ZERO, ZERO
9D005E94  00403025   OR A2, V0, ZERO
9D005E98  8FC50020   LW A1, 32(FP)
9D005E9C  3C02A000   LUI V0, -24576
9D005EA0  24440870   ADDIU A0, V0, 2160
9D005EA4  0F400B33   JAL CB_WriteMany
9D005EA8  00000000   NOP
9D005EAC  AFC20010   SW V0, 16(FP)
9D005EB0  0F401755   JAL Uart1StartTransmission
9D005EB4  00000000   NOP
9D005EB8  8FC20010   LW V0, 16(FP)
9D005EBC  03C0E825   OR SP, FP, ZERO
9D005EC0  8FBF001C   LW RA, 28(SP)
9D005EC4  8FBE0018   LW FP, 24(SP)
9D005EC8  27BD0020   ADDIU SP, SP, 32
9D005ECC  03E00008   JR RA
9D005ED0  00000000   NOP
9D005ED4  415DE800   RDPGPR SP, SP
9D005ED8  401B7000   MFC0 K1, EPC
9D005EDC  401A6002   MFC0 K0, SRSCtl
9D005EE0  27BDFF88   ADDIU SP, SP, -120
9D005EE4  AFBB0074   SW K1, 116(SP)
9D005EE8  401B6000   MFC0 K1, Status
9D005EEC  AFBA006C   SW K0, 108(SP)
9D005EF0  AFBB0070   SW K1, 112(SP)
9D005EF4  7C1B7844   INS K1, ZERO, 1, 15
9D005EF8  377B1800   ORI K1, K1, 6144
9D005EFC  409B6000   MTC0 K1, Status
9D005F00  AFA3001C   SW V1, 28(SP)
9D005F04  AFA20018   SW V0, 24(SP)
9D005F08  8FA3006C   LW V1, 108(SP)
9D005F0C  3063000F   ANDI V1, V1, 15
9D005F10  14600012   BNE V1, ZERO, 0x9D005F5C
9D005F14  00000000   NOP
9D005F18  AFBF005C   SW RA, 92(SP)
9D005F1C  AFBE0058   SW FP, 88(SP)
9D005F20  AFB90054   SW T9, 84(SP)
9D005F24  AFB80050   SW T8, 80(SP)
9D005F28  AFAF004C   SW T7, 76(SP)
9D005F2C  AFAE0048   SW T6, 72(SP)
9D005F30  AFAD0044   SW T5, 68(SP)
9D005F34  AFAC0040   SW T4, 64(SP)
9D005F38  AFAB003C   SW T3, 60(SP)
9D005F3C  AFAA0038   SW T2, 56(SP)
9D005F40  AFA90034   SW T1, 52(SP)
9D005F44  AFA80030   SW T0, 48(SP)
9D005F48  AFA7002C   SW A3, 44(SP)
9D005F4C  AFA60028   SW A2, 40(SP)
9D005F50  AFA50024   SW A1, 36(SP)
9D005F54  AFA40020   SW A0, 32(SP)
9D005F58  AFA10014   SW AT, 20(SP)
9D005F5C  00000000   NOP
9D005F60  00001012   MFLO V0
9D005F64  AFA20064   SW V0, 100(SP)
9D005F68  00001810   MFHI V1
9D005F6C  AFA30060   SW V1, 96(SP)
9D005F70  03A0F025   OR FP, SP, ZERO
9D005F74  3C02BF88   LUI V0, -16504
9D005F78  8C421030   LW V0, 4144(V0)
9D005F7C  7C4206C0   EXT V0, V0, 27, 1
9D005F80  304200FF   ANDI V0, V0, 255
9D005F84  10400021   BEQ V0, ZERO, 0x9D00600C
9D005F88  00000000   NOP
9D005F8C  10000009   BEQ ZERO, ZERO, 0x9D005FB4
9D005F90  00000000   NOP
9D005F94  3C02BF80   LUI V0, -16512
9D005F98  8C426030   LW V0, 24624(V0)
9D005F9C  304200FF   ANDI V0, V0, 255
9D005FA0  00402825   OR A1, V0, ZERO
9D005FA4  3C02A000   LUI V0, -24576
9D005FA8  24440460   ADDIU A0, V0, 1120
9D005FAC  0F400AF3   JAL CB_WriteByte
9D005FB0  00000000   NOP
9D005FB4  3C02BF80   LUI V0, -16512
9D005FB8  8C426010   LW V0, 24592(V0)
9D005FBC  7C420000   EXT V0, V0, 0, 1
9D005FC0  304300FF   ANDI V1, V0, 255
9D005FC4  24020001   ADDIU V0, ZERO, 1
9D005FC8  1062FFF2   BEQ V1, V0, 0x9D005F94
9D005FCC  00000000   NOP
9D005FD0  3C02BF80   LUI V0, -16512
9D005FD4  8C426010   LW V0, 24592(V0)
9D005FD8  7C420040   EXT V0, V0, 1, 1
9D005FDC  304300FF   ANDI V1, V0, 255
9D005FE0  24020001   ADDIU V0, ZERO, 1
9D005FE4  14620005   BNE V1, V0, 0x9D005FFC
9D005FE8  00000000   NOP
9D005FEC  3C03BF80   LUI V1, -16512
9D005FF0  8C626010   LW V0, 24592(V1)
9D005FF4  7C020844   INS V0, ZERO, 1, 1
9D005FF8  AC626010   SW V0, 24592(V1)
9D005FFC  3C03BF88   LUI V1, -16504
9D006000  8C621030   LW V0, 4144(V1)
9D006004  7C02DEC4   INS V0, ZERO, 27, 1
9D006008  AC621030   SW V0, 4144(V1)
9D00600C  3C02BF88   LUI V0, -16504
9D006010  8C421030   LW V0, 4144(V0)
9D006014  7C420700   EXT V0, V0, 28, 1
9D006018  304200FF   ANDI V0, V0, 255
9D00601C  10400007   BEQ V0, ZERO, 0x9D00603C
9D006020  00000000   NOP
9D006024  0F401755   JAL Uart1StartTransmission
9D006028  00000000   NOP
9D00602C  3C03BF88   LUI V1, -16504
9D006030  8C621030   LW V0, 4144(V1)
9D006034  7C02E704   INS V0, ZERO, 28, 1
9D006038  AC621030   SW V0, 4144(V1)
9D00603C  00000000   NOP
9D006040  03C0E825   OR SP, FP, ZERO
9D006044  8FA20064   LW V0, 100(SP)
9D006048  00400013   MTLO V0
9D00604C  8FA30060   LW V1, 96(SP)
9D006050  00600011   MTHI V1
9D006054  8FA2006C   LW V0, 108(SP)
9D006058  3042000F   ANDI V0, V0, 15
9D00605C  14400014   BNE V0, ZERO, 0x9D0060B0
9D006060  00000000   NOP
9D006064  8FBF005C   LW RA, 92(SP)
9D006068  8FBE0058   LW FP, 88(SP)
9D00606C  8FB90054   LW T9, 84(SP)
9D006070  8FB80050   LW T8, 80(SP)
9D006074  8FAF004C   LW T7, 76(SP)
9D006078  8FAE0048   LW T6, 72(SP)
9D00607C  8FAD0044   LW T5, 68(SP)
9D006080  8FAC0040   LW T4, 64(SP)
9D006084  8FAB003C   LW T3, 60(SP)
9D006088  8FAA0038   LW T2, 56(SP)
9D00608C  8FA90034   LW T1, 52(SP)
9D006090  8FA80030   LW T0, 48(SP)
9D006094  8FA7002C   LW A3, 44(SP)
9D006098  8FA60028   LW A2, 40(SP)
9D00609C  8FA50024   LW A1, 36(SP)
9D0060A0  8FA40020   LW A0, 32(SP)
9D0060A4  8FA3001C   LW V1, 28(SP)
9D0060A8  8FA20018   LW V0, 24(SP)
9D0060AC  8FA10014   LW AT, 20(SP)
9D0060B0  00000000   NOP
9D0060B4  41606000   DI ZERO
9D0060B8  000000C0   EHB
9D0060BC  8FBA0074   LW K0, 116(SP)
9D0060C0  8FBB0070   LW K1, 112(SP)
9D0060C4  409A7000   MTC0 K0, EPC
9D0060C8  8FBA006C   LW K0, 108(SP)
9D0060CC  27BD0078   ADDIU SP, SP, 120
9D0060D0  409A6002   MTC0 K0, SRSCtl
9D0060D4  41DDE800   WRPGPR SP, SP
9D0060D8  409B6000   MTC0 K1, Status
9D0060DC  42000018   ERET
---  c:/users/james/desktop/ece13/jensming/lab09/lab9.x/oleddriver.c  -----------------------------------
1:                   #include <stdint.h>
2:                   
3:                   //CSE13E Support Library
4:                   #include "BOARD.h"
5:                   
6:                   #include <xc.h>
7:                   
8:                   
9:                   #include "OledDriver.h"
10:                  
11:                  #define SPI_CHANNEL SPI_CHANNEL2
12:                  
13:                  /**
14:                   * Constants for the various command values that can be sent to the OLED driver.
15:                   */
16:                  typedef enum {
17:                      OLED_COMMAND_SET_DISPLAY_LOWER_COLUMN_0 = 0x00,
18:                      OLED_COMMAND_SET_DISPLAY_UPPER_COLUMN_0 = 0x10,
19:                      OLED_COMMAND_SET_PAGE = 0x22,
20:                      OLED_COMMAND_SET_CHARGE_PUMP = 0x8D,
21:                      OLED_COMMAND_SET_SEGMENT_REMAP = 0xA1,
22:                      OLED_COMMAND_DISPLAY_NORMAL = 0xA6,
23:                      OLED_COMMAND_DISPLAY_INVERTED = 0xA7,
24:                      OLED_COMMAND_DISPLAY_OFF = 0xAE,
25:                      OLED_COMMAND_DISPLAY_ON = 0xAF,
26:                      OLED_COMMAND_SET_PRECHARGE_PERIOD = 0xD9,
27:                      OLED_COMMAND_SET_COM_PINS_CONFIG = 0xDA
28:                  } OledCommand;
29:                  
30:                  /**
31:                   * Store constants for all settings used with the OLED driver.
32:                   */
33:                  typedef enum {
34:                      OLED_SETTING_ENABLE_CHARGE_PUMP = 0x14,
35:                      OLED_SETTING_MAXIMUM_PRECHARGE = 0xF1,
36:                      OLED_SETTING_SEQUENTIAL_COM_NON_INTERLEAVED = 0x20,
37:                      OLED_SETTING_REVERSE_ROW_ORDERING = 0xC8
38:                  } OledSetting;
39:                  
40:                  #define OLED_DRIVER_PAGES 4
41:                  
42:                  /**
43:                   * This array is the off-screen frame buffer used for rendering.
44:                   * It isn't possible to read back from the OLED display device,
45:                   * so display data is rendered into this off-screen buffer and then
46:                   * copied to the display.
47:                   * @note Any time this is updated, An `OledDriverUpdateDisplay()` call must be performed.
48:                   */
49:                  uint8_t rgbOledBmp[OLED_DRIVER_BUFFER_SIZE];
50:                  
51:                  // Function prototypes for internal-use functions.
52:                  void OledPutBuffer(int size, uint8_t *buffer);
53:                  uint8_t Spi2Put(uint8_t bVal);
54:                  void DelayMs(unsigned int msec);
55:                  
56:                  /**
57:                   * Initialize the PIC32MX to communicate with the UG-23832HSWEG04 OLED display through the SSD1306
58:                   * display controller.
59:                   */
60:                  void OledHostInit(void)
61:                  {
62:                      // Open SPI2 as a master in 1-byte mode running at 10MHz.
63:                      // The peripheral bus is running at 10Mhz, and we want a 10MHz SPI bus clock.
64:                      int pbClkDiv = 20000000 / 10000000;
65:                      SPI2CON = 0; // reset and clear the SPI config register
66:                      SPI2CONbits.MSTEN = 1; // We are a Master
67:                      SPI2CONbits.CKP = 1; // Idle is high level
68:                      SPI2BRG = (pbClkDiv >> 1) - 1; // set the baud rate to the correct setting.
69:                      SPI2CONbits.ON = 1; // turn it on
70:                  
71:                  
72:                      // Set RF4-6 as digital outputs for controlling data/command selection, logic power, and display
73:                      // power. They're all initialized high beforehand, because that disables power.
74:                      OLED_DRIVER_CONTROLLER_POWER_PORT = 1;
75:                      OLED_DRIVER_OLED_POWER_PORT = 1;
76:                      OLED_DRIVER_MODE_PORT = 1;
77:                  
78:                      OLED_DRIVER_MODE_TRIS = 0;
79:                      OLED_DRIVER_CONTROLLER_POWER_TRIS = 0;
80:                      OLED_DRIVER_OLED_POWER_TRIS = 0;
81:                  
82:                      // Set RG9 as a digital output, tied to the reset pin on the SG1306 controller, low => reset.
83:                      OLED_DRIVER_RESET_PORT = 1;
84:                      OLED_DRIVER_RESET_TRIS = 0;
85:                  }
86:                  
87:                  /**
88:                   * Initialize the OLED display and driver circuitry.
89:                   */
90:                  void OledDriverInitDisplay(void)
91:                  {
92:                      // Set the OLED into command mode.
93:                      OLED_DRIVER_MODE_PORT = 0;
94:                  
95:                      // Power on the display logic, waiting 1ms for it to start up.
96:                      OLED_DRIVER_CONTROLLER_POWER_PORT = 0;
97:                      DelayMs(1);
98:                  
99:                      // Turn off the display.
100:                     Spi2Put(OLED_COMMAND_DISPLAY_OFF);
101:                 
102:                     // Toggle the reset pin.
103:                     OLED_DRIVER_RESET_PORT = 0;
104:                     DelayMs(1);
105:                     OLED_DRIVER_RESET_PORT = 1;
106:                 
107:                     // Enable the charge pump and
108:                     Spi2Put(OLED_COMMAND_SET_CHARGE_PUMP);
109:                     Spi2Put(OLED_SETTING_ENABLE_CHARGE_PUMP);
110:                     Spi2Put(OLED_COMMAND_SET_PRECHARGE_PERIOD);
111:                     Spi2Put(OLED_SETTING_MAXIMUM_PRECHARGE);
112:                 
113:                     // Power on the display, giving it 100ms to start up.
114:                     OLED_DRIVER_OLED_POWER_PORT = 0;
115:                 
116:                     DelayMs(100);
117:                 
118:                     // Invert row numbering so that (0,0) is upper-right.
119:                     Spi2Put(OLED_COMMAND_SET_SEGMENT_REMAP);
120:                     Spi2Put(OLED_SETTING_REVERSE_ROW_ORDERING);
121:                 
122:                     // Set sequential COM configuration with non-interleaved memory.
123:                     Spi2Put(OLED_COMMAND_SET_COM_PINS_CONFIG);
124:                     Spi2Put(OLED_SETTING_SEQUENTIAL_COM_NON_INTERLEAVED);
125:                 
126:                     // And turn on the display.
127:                     Spi2Put(OLED_COMMAND_DISPLAY_ON);
128:                 }
129:                 
130:                 /**
131:                  * Set the LCD to display pixel values as the opposite of how they are actually stored in NVRAM. So
132:                  * pixels set to black (0) will display as white, and pixels set to white (1) will display as black.
133:                  */
134:                 void OledDriverSetDisplayInverted(void)
135:                 {
136:                     // Set the OLED into command mode.
137:                     OLED_DRIVER_MODE_PORT = 0;
138:                 
139:                     Spi2Put(OLED_COMMAND_DISPLAY_INVERTED);
140:                 }
141:                 
142:                 /**
143:                  * Set the LCD to display pixel values normally, where a 1 indicates white and a 0 indicates black.
144:                  * This is the default operating mode of the LCD and the mode it starts up in.
145:                  */
146:                 void OledDriverSetDisplayNormal(void)
147:                 {
148:                     // Set the OLED into command mode.
149:                     OLED_DRIVER_MODE_PORT = 0;
150:                 
151:                     Spi2Put(OLED_COMMAND_DISPLAY_NORMAL);
152:                 }
153:                 
154:                 /**
155:                  * Disable the Oled display before power-off. This means powering it up, sending the display off
156:                  * command, and finally disabling Vbat.
157:                  */
158:                 void OledDriverDisableDisplay(void)
159:                 {
160:                     // Set the OLED into command mode.
161:                     OLED_DRIVER_MODE_PORT = 0;
162:                 
163:                     // Power on the OLED display logic, waiting for 1ms for it to start up.
164:                     OLED_DRIVER_CONTROLLER_POWER_PORT = 0;
165:                     DelayMs(1);
166:                 
167:                     // Send the display off command.
168:                     Spi2Put(OLED_COMMAND_DISPLAY_OFF);
169:                 
170:                     // And finally power off the display, giving it 100ms to do so.
171:                     OLED_DRIVER_CONTROLLER_POWER_PORT = 1;
172:                     DelayMs(100);
173:                 }
174:                 
175:                 /**
176:                  * Update the display with the contents of rgb0ledBmp.
177:                  */
178:                 void OledDriverUpdateDisplay(void)
179:                 {
180:                     uint8_t *pb = rgbOledBmp;
181:                     int page;
182:                     for (page = 0; page < OLED_DRIVER_PAGES; page++) {
183:                         // Set the LCD into command mode.
184:                         //        PORTClearBits(OLED_DRIVER_MODE_PORT, OLED_DRIVER_MODE_BIT);
185:                         OLED_DRIVER_MODE_PORT = 0;
186:                 
187:                         // Set the desired page.
188:                         Spi2Put(OLED_COMMAND_SET_PAGE);
189:                         Spi2Put(page);
190:                 
191:                         // Set the starting column back to the origin.
192:                         Spi2Put(OLED_COMMAND_SET_DISPLAY_LOWER_COLUMN_0);
193:                         Spi2Put(OLED_COMMAND_SET_DISPLAY_UPPER_COLUMN_0);
194:                 
195:                         // Return the LCD to data mode.
196:                         //        PORTSetBits(OLED_DRIVER_MODE_PORT, OLED_DRIVER_MODE_BIT);
197:                         OLED_DRIVER_MODE_PORT = 1;
198:                 
199:                         // Finally write this entire column to the OLED.
200:                         //		SpiChnPutS()
201:                         OledPutBuffer(OLED_DRIVER_PIXEL_COLUMNS, pb);
202:                         pb += OLED_DRIVER_PIXEL_COLUMNS;
203:                     }
204:                 }
205:                 
206:                 /**
207:                  * Write an entire array of uint8_ts over SPI2.
208:                  * @param size The number of uint8_ts to write.
209:                  * @param buffer The start of the uint8_t array to write.
210:                  */
211:                 void OledPutBuffer(int size, uint8_t *buffer)
212:                 {
213:                     uint8_t bTmp = 0;
214:                     int i = bTmp; //non ideal way of forcing Wall error to go away
215:                     for (i = 0; i < size; ++i) {
216:                         // Make sure the transmitter is ready
217:                         while (SPI2STATbits.SPITBE == 0);
218:                 
219:                         // Then transmit the desired uint8_t.
220:                         SPI2BUF = *buffer++;
221:                 
222:                         // And wait for a response. It's ignored, but we read it out of the buffer anyways to keep
223:                         // the buffer clear.
224:                         while (SPI2STATbits.SPIRBF == 0);
225:                         bTmp = SPI2BUF;
226:                     }
227:                 }
228:                 
229:                 /**
230:                  * Performs a blocking write of a single uint8_t over SPI2. The response uint8_t is returned.
231:                  * @param bVal The uint8_t to write over SPI.
232:                  * @return The response to the transmission.
233:                  */
234:                 uint8_t Spi2Put(uint8_t bVal)
235:                 {
236:                     // Make sure the transmitter is ready
237:                     while (SPI2STATbits.SPITBE == 0);
238:                 
239:                     // Then transmit the desired uint8_t.
240:                     SPI2BUF = bVal;
241:                 
242:                     // And wait for a response.
243:                     while (SPI2STATbits.SPIRBF == 0);
244:                 
245:                     // Before returning it.
246:                     uint8_t bRx = SPI2BUF;
247:                     return bRx;
248:                 }
249:                 
250:                 /**
251:                  * Block the processor for the desired number of milliseconds.
252:                  * @note Assumes processor frequency of 80Mhz.
253:                  * @param msec The number of milliseconds to block for.
254:                  */
255:                 void DelayMs(uint32_t msec)
256:                 {
257:                     uint32_t tWait, tStart, tCurrent;
258:                 
259:                     // Calculate the amount of wait time in terms of core processor frequency.
260:                     tWait = (80000000L / 2000) * msec;
261:                     asm volatile("mfc0   %0, $9" : "=r"(tStart));
262:                     tCurrent = tStart;
263:                     while ((tCurrent - tStart) < tWait) {
264:                         asm volatile("mfc0   %0, $9" : "=r"(tCurrent));
265:                     }// wait for the time to pass
266:                 }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00500C  27BDFFF0   ADDIU SP, SP, -16
9D005010  AFBE000C   SW FP, 12(SP)
9D005014  03A0F025   OR FP, SP, ZERO
9D005018  24020002   ADDIU V0, ZERO, 2
9D00501C  AFC20000   SW V0, 0(FP)
9D005020  3C02BF80   LUI V0, -16512
9D005024  AC405A00   SW ZERO, 23040(V0)
9D005028  3C03BF80   LUI V1, -16512
9D00502C  8C625A00   LW V0, 23040(V1)
9D005030  24040001   ADDIU A0, ZERO, 1
9D005034  7C822944   INS V0, A0, 5, 1
9D005038  AC625A00   SW V0, 23040(V1)
9D00503C  3C03BF80   LUI V1, -16512
9D005040  8C625A00   LW V0, 23040(V1)
9D005044  24040001   ADDIU A0, ZERO, 1
9D005048  7C823184   INS V0, A0, 6, 1
9D00504C  AC625A00   SW V0, 23040(V1)
9D005050  8FC20000   LW V0, 0(FP)
9D005054  00021043   SRA V0, V0, 1
9D005058  2442FFFF   ADDIU V0, V0, -1
9D00505C  00401825   OR V1, V0, ZERO
9D005060  3C02BF80   LUI V0, -16512
9D005064  AC435A30   SW V1, 23088(V0)
9D005068  3C03BF80   LUI V1, -16512
9D00506C  8C625A00   LW V0, 23040(V1)
9D005070  24040001   ADDIU A0, ZERO, 1
9D005074  7C827BC4   INS V0, A0, 15, 1
9D005078  AC625A00   SW V0, 23040(V1)
9D00507C  3C03BF88   LUI V1, -16504
9D005080  90626150   LBU V0, 24912(V1)
9D005084  24040001   ADDIU A0, ZERO, 1
9D005088  7C823184   INS V0, A0, 6, 1
9D00508C  A0626150   SB V0, 24912(V1)
9D005090  3C03BF88   LUI V1, -16504
9D005094  90626150   LBU V0, 24912(V1)
9D005098  24040001   ADDIU A0, ZERO, 1
9D00509C  7C822944   INS V0, A0, 5, 1
9D0050A0  A0626150   SB V0, 24912(V1)
9D0050A4  3C03BF88   LUI V1, -16504
9D0050A8  90626150   LBU V0, 24912(V1)
9D0050AC  24040001   ADDIU A0, ZERO, 1
9D0050B0  7C822104   INS V0, A0, 4, 1
9D0050B4  A0626150   SB V0, 24912(V1)
9D0050B8  3C03BF88   LUI V1, -16504
9D0050BC  90626140   LBU V0, 24896(V1)
9D0050C0  7C022104   INS V0, ZERO, 4, 1
9D0050C4  A0626140   SB V0, 24896(V1)
9D0050C8  3C03BF88   LUI V1, -16504
9D0050CC  90626140   LBU V0, 24896(V1)
9D0050D0  7C023184   INS V0, ZERO, 6, 1
9D0050D4  A0626140   SB V0, 24896(V1)
9D0050D8  3C03BF88   LUI V1, -16504
9D0050DC  90626140   LBU V0, 24896(V1)
9D0050E0  7C022944   INS V0, ZERO, 5, 1
9D0050E4  A0626140   SB V0, 24896(V1)
9D0050E8  3C03BF88   LUI V1, -16504
9D0050EC  94626190   LHU V0, 24976(V1)
9D0050F0  24040001   ADDIU A0, ZERO, 1
9D0050F4  7C824A44   INS V0, A0, 9, 1
9D0050F8  A4626190   SH V0, 24976(V1)
9D0050FC  3C03BF88   LUI V1, -16504
9D005100  94626180   LHU V0, 24960(V1)
9D005104  7C024A44   INS V0, ZERO, 9, 1
9D005108  A4626180   SH V0, 24960(V1)
9D00510C  00000000   NOP
9D005110  03C0E825   OR SP, FP, ZERO
9D005114  8FBE000C   LW FP, 12(SP)
9D005118  27BD0010   ADDIU SP, SP, 16
9D00511C  03E00008   JR RA
9D005120  00000000   NOP
9D005124  27BDFFE8   ADDIU SP, SP, -24
9D005128  AFBF0014   SW RA, 20(SP)
9D00512C  AFBE0010   SW FP, 16(SP)
9D005130  03A0F025   OR FP, SP, ZERO
9D005134  3C03BF88   LUI V1, -16504
9D005138  90626150   LBU V0, 24912(V1)
9D00513C  7C022104   INS V0, ZERO, 4, 1
9D005140  A0626150   SB V0, 24912(V1)
9D005144  3C03BF88   LUI V1, -16504
9D005148  90626150   LBU V0, 24912(V1)
9D00514C  7C023184   INS V0, ZERO, 6, 1
9D005150  A0626150   SB V0, 24912(V1)
9D005154  24040001   ADDIU A0, ZERO, 1
9D005158  0F40155B   JAL DelayMs
9D00515C  00000000   NOP
9D005160  240400AE   ADDIU A0, ZERO, 174
9D005164  0F40153C   JAL Spi2Put
9D005168  00000000   NOP
9D00516C  3C03BF88   LUI V1, -16504
9D005170  94626190   LHU V0, 24976(V1)
9D005174  7C024A44   INS V0, ZERO, 9, 1
9D005178  A4626190   SH V0, 24976(V1)
9D00517C  24040001   ADDIU A0, ZERO, 1
9D005180  0F40155B   JAL DelayMs
9D005184  00000000   NOP
9D005188  3C03BF88   LUI V1, -16504
9D00518C  94626190   LHU V0, 24976(V1)
9D005190  24040001   ADDIU A0, ZERO, 1
9D005194  7C824A44   INS V0, A0, 9, 1
9D005198  A4626190   SH V0, 24976(V1)
9D00519C  2404008D   ADDIU A0, ZERO, 141
9D0051A0  0F40153C   JAL Spi2Put
9D0051A4  00000000   NOP
9D0051A8  24040014   ADDIU A0, ZERO, 20
9D0051AC  0F40153C   JAL Spi2Put
9D0051B0  00000000   NOP
9D0051B4  240400D9   ADDIU A0, ZERO, 217
9D0051B8  0F40153C   JAL Spi2Put
9D0051BC  00000000   NOP
9D0051C0  240400F1   ADDIU A0, ZERO, 241
9D0051C4  0F40153C   JAL Spi2Put
9D0051C8  00000000   NOP
9D0051CC  3C03BF88   LUI V1, -16504
9D0051D0  90626150   LBU V0, 24912(V1)
9D0051D4  7C022944   INS V0, ZERO, 5, 1
9D0051D8  A0626150   SB V0, 24912(V1)
9D0051DC  24040064   ADDIU A0, ZERO, 100
9D0051E0  0F40155B   JAL DelayMs
9D0051E4  00000000   NOP
9D0051E8  240400A1   ADDIU A0, ZERO, 161
9D0051EC  0F40153C   JAL Spi2Put
9D0051F0  00000000   NOP
9D0051F4  240400C8   ADDIU A0, ZERO, 200
9D0051F8  0F40153C   JAL Spi2Put
9D0051FC  00000000   NOP
9D005200  240400DA   ADDIU A0, ZERO, 218
9D005204  0F40153C   JAL Spi2Put
9D005208  00000000   NOP
9D00520C  24040020   ADDIU A0, ZERO, 32
9D005210  0F40153C   JAL Spi2Put
9D005214  00000000   NOP
9D005218  240400AF   ADDIU A0, ZERO, 175
9D00521C  0F40153C   JAL Spi2Put
9D005220  00000000   NOP
9D005224  00000000   NOP
9D005228  03C0E825   OR SP, FP, ZERO
9D00522C  8FBF0014   LW RA, 20(SP)
9D005230  8FBE0010   LW FP, 16(SP)
9D005234  27BD0018   ADDIU SP, SP, 24
9D005238  03E00008   JR RA
9D00523C  00000000   NOP
9D005240  27BDFFE8   ADDIU SP, SP, -24
9D005244  AFBF0014   SW RA, 20(SP)
9D005248  AFBE0010   SW FP, 16(SP)
9D00524C  03A0F025   OR FP, SP, ZERO
9D005250  3C03BF88   LUI V1, -16504
9D005254  90626150   LBU V0, 24912(V1)
9D005258  7C022104   INS V0, ZERO, 4, 1
9D00525C  A0626150   SB V0, 24912(V1)
9D005260  240400A7   ADDIU A0, ZERO, 167
9D005264  0F40153C   JAL Spi2Put
9D005268  00000000   NOP
9D00526C  00000000   NOP
9D005270  03C0E825   OR SP, FP, ZERO
9D005274  8FBF0014   LW RA, 20(SP)
9D005278  8FBE0010   LW FP, 16(SP)
9D00527C  27BD0018   ADDIU SP, SP, 24
9D005280  03E00008   JR RA
9D005284  00000000   NOP
9D005288  27BDFFE8   ADDIU SP, SP, -24
9D00528C  AFBF0014   SW RA, 20(SP)
9D005290  AFBE0010   SW FP, 16(SP)
9D005294  03A0F025   OR FP, SP, ZERO
9D005298  3C03BF88   LUI V1, -16504
9D00529C  90626150   LBU V0, 24912(V1)
9D0052A0  7C022104   INS V0, ZERO, 4, 1
9D0052A4  A0626150   SB V0, 24912(V1)
9D0052A8  240400A6   ADDIU A0, ZERO, 166
9D0052AC  0F40153C   JAL Spi2Put
9D0052B0  00000000   NOP
9D0052B4  00000000   NOP
9D0052B8  03C0E825   OR SP, FP, ZERO
9D0052BC  8FBF0014   LW RA, 20(SP)
9D0052C0  8FBE0010   LW FP, 16(SP)
9D0052C4  27BD0018   ADDIU SP, SP, 24
9D0052C8  03E00008   JR RA
9D0052CC  00000000   NOP
9D0052D0  27BDFFE8   ADDIU SP, SP, -24
9D0052D4  AFBF0014   SW RA, 20(SP)
9D0052D8  AFBE0010   SW FP, 16(SP)
9D0052DC  03A0F025   OR FP, SP, ZERO
9D0052E0  3C03BF88   LUI V1, -16504
9D0052E4  90626150   LBU V0, 24912(V1)
9D0052E8  7C022104   INS V0, ZERO, 4, 1
9D0052EC  A0626150   SB V0, 24912(V1)
9D0052F0  3C03BF88   LUI V1, -16504
9D0052F4  90626150   LBU V0, 24912(V1)
9D0052F8  7C023184   INS V0, ZERO, 6, 1
9D0052FC  A0626150   SB V0, 24912(V1)
9D005300  24040001   ADDIU A0, ZERO, 1
9D005304  0F40155B   JAL DelayMs
9D005308  00000000   NOP
9D00530C  240400AE   ADDIU A0, ZERO, 174
9D005310  0F40153C   JAL Spi2Put
9D005314  00000000   NOP
9D005318  3C03BF88   LUI V1, -16504
9D00531C  90626150   LBU V0, 24912(V1)
9D005320  24040001   ADDIU A0, ZERO, 1
9D005324  7C823184   INS V0, A0, 6, 1
9D005328  A0626150   SB V0, 24912(V1)
9D00532C  24040064   ADDIU A0, ZERO, 100
9D005330  0F40155B   JAL DelayMs
9D005334  00000000   NOP
9D005338  00000000   NOP
9D00533C  03C0E825   OR SP, FP, ZERO
9D005340  8FBF0014   LW RA, 20(SP)
9D005344  8FBE0010   LW FP, 16(SP)
9D005348  27BD0018   ADDIU SP, SP, 24
9D00534C  03E00008   JR RA
9D005350  00000000   NOP
9D005354  27BDFFE0   ADDIU SP, SP, -32
9D005358  AFBF001C   SW RA, 28(SP)
9D00535C  AFBE0018   SW FP, 24(SP)
9D005360  03A0F025   OR FP, SP, ZERO
9D005364  3C02A000   LUI V0, -24576
9D005368  24420260   ADDIU V0, V0, 608
9D00536C  AFC20010   SW V0, 16(FP)
9D005370  AFC00014   SW ZERO, 20(FP)
9D005374  10000022   BEQ ZERO, ZERO, 0x9D005400
9D005378  00000000   NOP
9D00537C  3C03BF88   LUI V1, -16504
9D005380  90626150   LBU V0, 24912(V1)
9D005384  7C022104   INS V0, ZERO, 4, 1
9D005388  A0626150   SB V0, 24912(V1)
9D00538C  24040022   ADDIU A0, ZERO, 34
9D005390  0F40153C   JAL Spi2Put
9D005394  00000000   NOP
9D005398  8FC20014   LW V0, 20(FP)
9D00539C  304200FF   ANDI V0, V0, 255
9D0053A0  00402025   OR A0, V0, ZERO
9D0053A4  0F40153C   JAL Spi2Put
9D0053A8  00000000   NOP
9D0053AC  00002025   OR A0, ZERO, ZERO
9D0053B0  0F40153C   JAL Spi2Put
9D0053B4  00000000   NOP
9D0053B8  24040010   ADDIU A0, ZERO, 16
9D0053BC  0F40153C   JAL Spi2Put
9D0053C0  00000000   NOP
9D0053C4  3C03BF88   LUI V1, -16504
9D0053C8  90626150   LBU V0, 24912(V1)
9D0053CC  24040001   ADDIU A0, ZERO, 1
9D0053D0  7C822104   INS V0, A0, 4, 1
9D0053D4  A0626150   SB V0, 24912(V1)
9D0053D8  8FC50010   LW A1, 16(FP)
9D0053DC  24040080   ADDIU A0, ZERO, 128
9D0053E0  0F40150B   JAL OledPutBuffer
9D0053E4  00000000   NOP
9D0053E8  8FC20010   LW V0, 16(FP)
9D0053EC  24420080   ADDIU V0, V0, 128
9D0053F0  AFC20010   SW V0, 16(FP)
9D0053F4  8FC20014   LW V0, 20(FP)
9D0053F8  24420001   ADDIU V0, V0, 1
9D0053FC  AFC20014   SW V0, 20(FP)
9D005400  8FC20014   LW V0, 20(FP)
9D005404  28420004   SLTI V0, V0, 4
9D005408  1440FFDC   BNE V0, ZERO, 0x9D00537C
9D00540C  00000000   NOP
9D005410  00000000   NOP
9D005414  03C0E825   OR SP, FP, ZERO
9D005418  8FBF001C   LW RA, 28(SP)
9D00541C  8FBE0018   LW FP, 24(SP)
9D005420  27BD0020   ADDIU SP, SP, 32
9D005424  03E00008   JR RA
9D005428  00000000   NOP
9D00542C  27BDFFF0   ADDIU SP, SP, -16
9D005430  AFBE000C   SW FP, 12(SP)
9D005434  03A0F025   OR FP, SP, ZERO
9D005438  AFC40010   SW A0, 16(FP)
9D00543C  AFC50014   SW A1, 20(FP)
9D005440  A3C00004   SB ZERO, 4(FP)
9D005444  93C20004   LBU V0, 4(FP)
9D005448  AFC20000   SW V0, 0(FP)
9D00544C  AFC00000   SW ZERO, 0(FP)
9D005450  1000001C   BEQ ZERO, ZERO, 0x9D0054C4
9D005454  00000000   NOP
9D005458  00000000   NOP
9D00545C  3C02BF80   LUI V0, -16512
9D005460  8C425A10   LW V0, 23056(V0)
9D005464  7C4200C0   EXT V0, V0, 3, 1
9D005468  304200FF   ANDI V0, V0, 255
9D00546C  1040FFFB   BEQ V0, ZERO, 0x9D00545C
9D005470  00000000   NOP
9D005474  8FC20014   LW V0, 20(FP)
9D005478  24430001   ADDIU V1, V0, 1
9D00547C  AFC30014   SW V1, 20(FP)
9D005480  90420000   LBU V0, 0(V0)
9D005484  00401825   OR V1, V0, ZERO
9D005488  3C02BF80   LUI V0, -16512
9D00548C  AC435A20   SW V1, 23072(V0)
9D005490  00000000   NOP
9D005494  3C02BF80   LUI V0, -16512
9D005498  8C425A10   LW V0, 23056(V0)
9D00549C  7C420000   EXT V0, V0, 0, 1
9D0054A0  304200FF   ANDI V0, V0, 255
9D0054A4  1040FFFB   BEQ V0, ZERO, 0x9D005494
9D0054A8  00000000   NOP
9D0054AC  3C02BF80   LUI V0, -16512
9D0054B0  8C425A20   LW V0, 23072(V0)
9D0054B4  A3C20004   SB V0, 4(FP)
9D0054B8  8FC20000   LW V0, 0(FP)
9D0054BC  24420001   ADDIU V0, V0, 1
9D0054C0  AFC20000   SW V0, 0(FP)
9D0054C4  8FC30000   LW V1, 0(FP)
9D0054C8  8FC20010   LW V0, 16(FP)
9D0054CC  0062102A   SLT V0, V1, V0
9D0054D0  1440FFE1   BNE V0, ZERO, 0x9D005458
9D0054D4  00000000   NOP
9D0054D8  00000000   NOP
9D0054DC  03C0E825   OR SP, FP, ZERO
9D0054E0  8FBE000C   LW FP, 12(SP)
9D0054E4  27BD0010   ADDIU SP, SP, 16
9D0054E8  03E00008   JR RA
9D0054EC  00000000   NOP
9D0054F0  27BDFFF0   ADDIU SP, SP, -16
9D0054F4  AFBE000C   SW FP, 12(SP)
9D0054F8  03A0F025   OR FP, SP, ZERO
9D0054FC  00801025   OR V0, A0, ZERO
9D005500  A3C20010   SB V0, 16(FP)
9D005504  00000000   NOP
9D005508  3C02BF80   LUI V0, -16512
9D00550C  8C425A10   LW V0, 23056(V0)
9D005510  7C4200C0   EXT V0, V0, 3, 1
9D005514  304200FF   ANDI V0, V0, 255
9D005518  1040FFFB   BEQ V0, ZERO, 0x9D005508
9D00551C  00000000   NOP
9D005520  93C30010   LBU V1, 16(FP)
9D005524  3C02BF80   LUI V0, -16512
9D005528  AC435A20   SW V1, 23072(V0)
9D00552C  00000000   NOP
9D005530  3C02BF80   LUI V0, -16512
9D005534  8C425A10   LW V0, 23056(V0)
9D005538  7C420000   EXT V0, V0, 0, 1
9D00553C  304200FF   ANDI V0, V0, 255
9D005540  1040FFFB   BEQ V0, ZERO, 0x9D005530
9D005544  00000000   NOP
9D005548  3C02BF80   LUI V0, -16512
9D00554C  8C425A20   LW V0, 23072(V0)
9D005550  A3C20000   SB V0, 0(FP)
9D005554  93C20000   LBU V0, 0(FP)
9D005558  03C0E825   OR SP, FP, ZERO
9D00555C  8FBE000C   LW FP, 12(SP)
9D005560  27BD0010   ADDIU SP, SP, 16
9D005564  03E00008   JR RA
9D005568  00000000   NOP
9D00556C  27BDFFE8   ADDIU SP, SP, -24
9D005570  AFBE0014   SW FP, 20(SP)
9D005574  03A0F025   OR FP, SP, ZERO
9D005578  AFC40018   SW A0, 24(FP)
9D00557C  8FC30018   LW V1, 24(FP)
9D005580  00601025   OR V0, V1, ZERO
9D005584  00021080   SLL V0, V0, 2
9D005588  00431021   ADDU V0, V0, V1
9D00558C  000210C0   SLL V0, V0, 3
9D005590  00431023   SUBU V0, V0, V1
9D005594  00021100   SLL V0, V0, 4
9D005598  00431021   ADDU V0, V0, V1
9D00559C  00021180   SLL V0, V0, 6
9D0055A0  AFC20004   SW V0, 4(FP)
9D0055A4  40024800   MFC0 V0, Count
9D0055A8  AFC20008   SW V0, 8(FP)
9D0055AC  8FC20008   LW V0, 8(FP)
9D0055B0  AFC20000   SW V0, 0(FP)
9D0055B4  10000003   BEQ ZERO, ZERO, 0x9D0055C4
9D0055B8  00000000   NOP
9D0055BC  40024800   MFC0 V0, Count
9D0055C0  AFC20000   SW V0, 0(FP)
9D0055C4  8FC30000   LW V1, 0(FP)
9D0055C8  8FC20008   LW V0, 8(FP)
9D0055CC  00621023   SUBU V0, V1, V0
9D0055D0  8FC30004   LW V1, 4(FP)
9D0055D4  0043102B   SLTU V0, V0, V1
9D0055D8  1440FFF8   BNE V0, ZERO, 0x9D0055BC
9D0055DC  00000000   NOP
9D0055E0  00000000   NOP
9D0055E4  03C0E825   OR SP, FP, ZERO
9D0055E8  8FBE0014   LW FP, 20(SP)
9D0055EC  27BD0018   ADDIU SP, SP, 24
9D0055F0  03E00008   JR RA
9D0055F4  00000000   NOP
---  c:/users/james/desktop/ece13/jensming/lab09/lab9.x/oled.c  -----------------------------------------
1:                   #include <stddef.h>
2:                   
3:                   
4:                   #ifdef __MPLAB_DEBUGGER_SIMULATOR
5:                   #include <stdio.h>
6:                   #endif
7:                   
8:                   #include "OledDriver.h"
9:                   #include "Oled.h"
10:                  #include "Ascii.h"
11:                  
12:                  // in simulator we do nothing with the hardware, printing instead
13:                  
14:                  void OledInit(void)
15:                  {
16:                  #ifndef __MPLAB_DEBUGGER_SIMULATOR
17:                      // First initialize the PIC32 to be able to talk over SPI to the OLED.
18:                      OledHostInit();
19:                  
20:                      // Now send initialization commands to the OLED.
21:                      OledDriverInitDisplay();
22:                  
23:                      // Clear the frame buffer by filling it with black pixels.
24:                      OledClear(OLED_COLOR_BLACK);
25:                  
26:                      // Finally update the screen, triggering a write of all black pixels to the screen.
27:                      OledUpdate();
28:                  #endif
29:                  }
30:                  
31:                  void OledSetPixel(int x, int y, OledColor color)
32:                  {
33:                  #ifndef __MPLAB_DEBUGGER_SIMULATOR
34:                      // Check for valid inputs before doing anything.
35:                      if (x >= OLED_DRIVER_PIXEL_COLUMNS || y >= OLED_DRIVER_PIXEL_ROWS || x < 0 || y < 0) {
36:                          return;
37:                      }
38:                  
39:                      // Map the x/y coordinates into a byte/bit index.
40:                      unsigned int index = ((y & 0xFFF8) << 4) + x;
41:                      unsigned int shift = y & 0x0007;
42:                  
43:                      // Now set the pixel to the proper color, doing nothing if an invalid color was specified.
44:                      if (color == OLED_COLOR_WHITE) {
45:                          rgbOledBmp[index] = rgbOledBmp[index] | (1 << shift);
46:                      } else if (color == OLED_COLOR_BLACK) {
47:                          rgbOledBmp[index] = rgbOledBmp[index] & ~(1 << shift);
48:                      } else {
49:                          return;
50:                      }
51:                  #endif
52:                  }
53:                  
54:                  int OledGetPixel(int x, int y)
55:                  {
56:                  #ifndef __MPLAB_DEBUGGER_SIMULATOR
57:                      // Check for valid inputs before doing anything.
58:                      if (x >= OLED_DRIVER_PIXEL_COLUMNS || y >= OLED_DRIVER_PIXEL_ROWS || x < 0 || y < 0) {
59:                          return OLED_COLOR_BLACK;
60:                      }
61:                  
62:                      // Map the x/y coordinates into a byte/bit index.
63:                      unsigned int index = ((y & 0xFFF8) << 4) + x;
64:                      unsigned int shift = y & 0x0007;
65:                  
66:                      // Now return the desired bit.
67:                      return (rgbOledBmp[index] >> shift) & 0x01;
68:                  #else
69:                      return OLED_COLOR_BLACK;
70:                  #endif
71:                  }
72:                  
73:                  //in simulator this is the same as putchar
74:                  
75:                  uint8_t OledDrawChar(int x, int y, char c)
76:                  {
77:                  #ifndef __MPLAB_DEBUGGER_SIMULATOR
78:                      if (x <= OLED_DRIVER_PIXEL_COLUMNS - ASCII_FONT_WIDTH && y <= OLED_DRIVER_PIXEL_ROWS - ASCII_FONT_HEIGHT) {
79:                          // We need to convert our signed char into an unsigned value to index into the ascii[] array.
80:                          int charIndex = (int) (unsigned char) c;
81:                  
82:                          // Now first determine the columns and rows of the OLED bits that need to be modified
83:                          int rowMin, rowMax, colMin, colMax;
84:                          rowMin = y / ASCII_FONT_HEIGHT;
85:                          int rowY = y % ASCII_FONT_HEIGHT;
86:                          rowMax = (y + ASCII_FONT_HEIGHT) / OLED_DRIVER_BUFFER_LINE_HEIGHT;
87:                          colMin = x;
88:                          colMax = x + ASCII_FONT_WIDTH;
89:                          {
90:                              // Generate a positive mask for where in the column the new symbol will be drawn.
91:                              int colMask = ((1 << ASCII_FONT_HEIGHT) - 1) << rowY;
92:                              int j;
93:                              for (j = 0; j < colMax - colMin; ++j) {
94:                                  int oledCol = colMin + j;
95:                                  uint8_t newCharCol = rgbOledBmp[rowMin * OLED_DRIVER_PIXEL_COLUMNS + oledCol] & ~colMask;
96:                                  // Make sure we always grab from the top part of the character.
97:                                  newCharCol |= (ascii[charIndex][j] & (colMask >> rowY)) << rowY;
98:                                  rgbOledBmp[rowMin * OLED_DRIVER_PIXEL_COLUMNS + oledCol] = newCharCol;
99:                              }
100:                         }
101:                         if (rowMax > rowMin) {
102:                             // Generate a positive mask for where in the column the new symbol will be drawn.
103:                             // Since we need the lower portion of the symbol, we recalculate its height.
104:                             int colMask = ((1 << ASCII_FONT_HEIGHT) - 1) >> (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY);
105:                             int j;
106:                             for (j = 0; j < colMax - colMin; ++j) {
107:                                 int oledCol = colMin + j;
108:                                 uint8_t newCharCol = rgbOledBmp[rowMax * OLED_DRIVER_PIXEL_COLUMNS + oledCol] & ~colMask;
109:                                 // Make sure we grab the proper part of the character from the font.
110:                                 newCharCol |= (ascii[charIndex][j] & (colMask << (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY))) >>
111:                                         (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY);
112:                                 rgbOledBmp[rowMax * OLED_DRIVER_PIXEL_COLUMNS + oledCol] = newCharCol;
113:                             }
114:                         }
115:                     }
116:                 #else
117:                     putchar(c);
118:                 #endif
119:                 
120:                     return FALSE;
121:                 }
122:                 
123:                 void OledDrawString(const char *string)
124:                 {
125:                 #ifndef __MPLAB_DEBUGGER_SIMULATOR
126:                     if (string == NULL) {
127:                         return;
128:                     }
129:                 
130:                     // Track the current line number we're in on the OLED. Valid values are [0, OLED_NUM_LINES).
131:                     int line = 0;
132:                 
133:                     // Track the current character we're writing to the OLED. Valid values are
134:                     // [0, OLED_CHARS_PER_LINE).
135:                     int column = 0;
136:                 
137:                     // Run through all characters. The maximum length can be the number of lines times the number
138:                     // of characters per line + three newlines.
139:                     int i;
140:                     for (i = 0; string[i] != '\0' && i < (OLED_NUM_LINES * OLED_CHARS_PER_LINE + 3); ++i) {
141:                         // Move the cursor to the next line if a newline character is encountered. This allows for
142:                         // early line ending.
143:                         if (string[i] == '\n') {
144:                             ++line;
145:                             column = 0;
146:                             continue;
147:                         } else {
148:                             // Reset to the start of the next line if we've hit the character limit of this line
149:                             // without seeing a newline.
150:                             if (column == OLED_CHARS_PER_LINE) {
151:                                 ++line;
152:                                 column = 0;
153:                             }
154:                 
155:                             // Now if we're < OLED_NUM_LINES and < OLED_CHARS_PER_LINE we can proceed. The second
156:                             // check is implicitly handled by the above if-statement that forces a newline after
157:                             // encountering a full line of characters.
158:                             if (line == OLED_NUM_LINES) {
159:                                 break;
160:                             }
161:                 
162:                             // Finally at this point, we can write characters to the OLED.
163:                             OledDrawChar(column * ASCII_FONT_WIDTH, line * ASCII_FONT_HEIGHT, string[i]);
164:                             ++column;
165:                         }
166:                     }
167:                 #else
168:                     printf("%s",string);
169:                 #endif
170:                 }
171:                 
172:                 void OledClear(OledColor p)
173:                 {
174:                     int i;
175:                     for (i = 0; i < OLED_DRIVER_BUFFER_SIZE; i++) {
176:                         if (p == OLED_COLOR_WHITE) {
177:                             rgbOledBmp[i] = 0xFF;
178:                         } else {
179:                             rgbOledBmp[i] = 0;
180:                         }
181:                     }
182:                 }
183:                 
184:                 void OledSetDisplayInverted(void)
185:                 {
186:                 #ifndef __MPLAB_DEBUGGER_SIMULATOR
187:                     OledDriverSetDisplayInverted();
188:                 #endif
189:                 }
190:                 
191:                 void OledSetDisplayNormal(void)
192:                 {
193:                 #ifndef __MPLAB_DEBUGGER_SIMULATOR
194:                     OledDriverSetDisplayNormal();
195:                 #endif
196:                 }
197:                 
198:                 void OledOn(void)
199:                 {
200:                 #ifndef __MPLAB_DEBUGGER_SIMULATOR
201:                     OledDriverInitDisplay();
202:                 #endif
203:                 }
204:                 
205:                 void OledOff(void)
206:                 {
207:                 #ifndef __MPLAB_DEBUGGER_SIMULATOR
208:                     OledDriverDisableDisplay();
209:                 #endif
210:                 }
211:                 
212:                 void OledUpdate(void)
213:                 {
214:                 #ifndef __MPLAB_DEBUGGER_SIMULATOR
215:                     OledDriverUpdateDisplay();
216:                 #endif
217:                 }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0074B8  27BDFFF8   ADDIU SP, SP, -8
9D0074BC  AFBE0004   SW FP, 4(SP)
9D0074C0  03A0F025   OR FP, SP, ZERO
9D0074C4  00000000   NOP
9D0074C8  03C0E825   OR SP, FP, ZERO
9D0074CC  8FBE0004   LW FP, 4(SP)
9D0074D0  27BD0008   ADDIU SP, SP, 8
9D0074D4  03E00008   JR RA
9D0074D8  00000000   NOP
9D0074DC  27BDFFF8   ADDIU SP, SP, -8
9D0074E0  AFBE0004   SW FP, 4(SP)
9D0074E4  03A0F025   OR FP, SP, ZERO
9D0074E8  AFC40008   SW A0, 8(FP)
9D0074EC  AFC5000C   SW A1, 12(FP)
9D0074F0  AFC60010   SW A2, 16(FP)
9D0074F4  00000000   NOP
9D0074F8  03C0E825   OR SP, FP, ZERO
9D0074FC  8FBE0004   LW FP, 4(SP)
9D007500  27BD0008   ADDIU SP, SP, 8
9D007504  03E00008   JR RA
9D007508  00000000   NOP
9D00750C  27BDFFF8   ADDIU SP, SP, -8
9D007510  AFBE0004   SW FP, 4(SP)
9D007514  03A0F025   OR FP, SP, ZERO
9D007518  AFC40008   SW A0, 8(FP)
9D00751C  AFC5000C   SW A1, 12(FP)
9D007520  00001025   OR V0, ZERO, ZERO
9D007524  03C0E825   OR SP, FP, ZERO
9D007528  8FBE0004   LW FP, 4(SP)
9D00752C  27BD0008   ADDIU SP, SP, 8
9D007530  03E00008   JR RA
9D007534  00000000   NOP
9D007538  27BDFFE8   ADDIU SP, SP, -24
9D00753C  AFBF0014   SW RA, 20(SP)
9D007540  AFBE0010   SW FP, 16(SP)
9D007544  03A0F025   OR FP, SP, ZERO
9D007548  AFC40018   SW A0, 24(FP)
9D00754C  AFC5001C   SW A1, 28(FP)
9D007550  00C01025   OR V0, A2, ZERO
9D007554  A3C20020   SB V0, 32(FP)
9D007558  83C30020   LB V1, 32(FP)
9D00755C  3C02A000   LUI V0, -24576
9D007560  24450D40   ADDIU A1, V0, 3392
9D007564  00602025   OR A0, V1, ZERO
9D007568  0F402052   JAL fputc
9D00756C  00000000   NOP
9D007570  00001025   OR V0, ZERO, ZERO
9D007574  03C0E825   OR SP, FP, ZERO
9D007578  8FBF0014   LW RA, 20(SP)
9D00757C  8FBE0010   LW FP, 16(SP)
9D007580  27BD0018   ADDIU SP, SP, 24
9D007584  03E00008   JR RA
9D007588  00000000   NOP
9D00758C  27BDFFE8   ADDIU SP, SP, -24
9D007590  AFBF0014   SW RA, 20(SP)
9D007594  AFBE0010   SW FP, 16(SP)
9D007598  03A0F025   OR FP, SP, ZERO
9D00759C  AFC40018   SW A0, 24(FP)
9D0075A0  8FC50018   LW A1, 24(FP)
9D0075A4  3C029D01   LUI V0, -25343
9D0075A8  24448844   ADDIU A0, V0, -30652
9D0075AC  0F40240B   JAL _printf_s
9D0075B0  00000000   NOP
9D0075B4  00000000   NOP
9D0075B8  03C0E825   OR SP, FP, ZERO
9D0075BC  8FBF0014   LW RA, 20(SP)
9D0075C0  8FBE0010   LW FP, 16(SP)
9D0075C4  27BD0018   ADDIU SP, SP, 24
9D0075C8  03E00008   JR RA
9D0075CC  00000000   NOP
9D0075D0  27BDFFF0   ADDIU SP, SP, -16
9D0075D4  AFBE000C   SW FP, 12(SP)
9D0075D8  03A0F025   OR FP, SP, ZERO
9D0075DC  AFC40010   SW A0, 16(FP)
9D0075E0  AFC00000   SW ZERO, 0(FP)
9D0075E4  10000015   BEQ ZERO, ZERO, 0x9D00763C
9D0075E8  00000000   NOP
9D0075EC  8FC30010   LW V1, 16(FP)
9D0075F0  24020001   ADDIU V0, ZERO, 1
9D0075F4  14620009   BNE V1, V0, 0x9D00761C
9D0075F8  00000000   NOP
9D0075FC  3C02A000   LUI V0, -24576
9D007600  24430260   ADDIU V1, V0, 608
9D007604  8FC20000   LW V0, 0(FP)
9D007608  00621021   ADDU V0, V1, V0
9D00760C  2403FFFF   ADDIU V1, ZERO, -1
9D007610  A0430000   SB V1, 0(V0)
9D007614  10000006   BEQ ZERO, ZERO, 0x9D007630
9D007618  00000000   NOP
9D00761C  3C02A000   LUI V0, -24576
9D007620  24430260   ADDIU V1, V0, 608
9D007624  8FC20000   LW V0, 0(FP)
9D007628  00621021   ADDU V0, V1, V0
9D00762C  A0400000   SB ZERO, 0(V0)
9D007630  8FC20000   LW V0, 0(FP)
9D007634  24420001   ADDIU V0, V0, 1
9D007638  AFC20000   SW V0, 0(FP)
9D00763C  8FC20000   LW V0, 0(FP)
9D007640  28420200   SLTI V0, V0, 512
9D007644  1440FFE9   BNE V0, ZERO, 0x9D0075EC
9D007648  00000000   NOP
9D00764C  00000000   NOP
9D007650  03C0E825   OR SP, FP, ZERO
9D007654  8FBE000C   LW FP, 12(SP)
9D007658  27BD0010   ADDIU SP, SP, 16
9D00765C  03E00008   JR RA
9D007660  00000000   NOP
9D007664  27BDFFF8   ADDIU SP, SP, -8
9D007668  AFBE0004   SW FP, 4(SP)
9D00766C  03A0F025   OR FP, SP, ZERO
9D007670  00000000   NOP
9D007674  03C0E825   OR SP, FP, ZERO
9D007678  8FBE0004   LW FP, 4(SP)
9D00767C  27BD0008   ADDIU SP, SP, 8
9D007680  03E00008   JR RA
9D007684  00000000   NOP
9D007688  27BDFFF8   ADDIU SP, SP, -8
9D00768C  AFBE0004   SW FP, 4(SP)
9D007690  03A0F025   OR FP, SP, ZERO
9D007694  00000000   NOP
9D007698  03C0E825   OR SP, FP, ZERO
9D00769C  8FBE0004   LW FP, 4(SP)
9D0076A0  27BD0008   ADDIU SP, SP, 8
9D0076A4  03E00008   JR RA
9D0076A8  00000000   NOP
9D0076AC  27BDFFF8   ADDIU SP, SP, -8
9D0076B0  AFBE0004   SW FP, 4(SP)
9D0076B4  03A0F025   OR FP, SP, ZERO
9D0076B8  00000000   NOP
9D0076BC  03C0E825   OR SP, FP, ZERO
9D0076C0  8FBE0004   LW FP, 4(SP)
9D0076C4  27BD0008   ADDIU SP, SP, 8
9D0076C8  03E00008   JR RA
9D0076CC  00000000   NOP
9D0076D0  27BDFFF8   ADDIU SP, SP, -8
9D0076D4  AFBE0004   SW FP, 4(SP)
9D0076D8  03A0F025   OR FP, SP, ZERO
9D0076DC  00000000   NOP
9D0076E0  03C0E825   OR SP, FP, ZERO
9D0076E4  8FBE0004   LW FP, 4(SP)
9D0076E8  27BD0008   ADDIU SP, SP, 8
9D0076EC  03E00008   JR RA
9D0076F0  00000000   NOP
9D0076F4  27BDFFF8   ADDIU SP, SP, -8
9D0076F8  AFBE0004   SW FP, 4(SP)
9D0076FC  03A0F025   OR FP, SP, ZERO
9D007700  00000000   NOP
9D007704  03C0E825   OR SP, FP, ZERO
9D007708  8FBE0004   LW FP, 4(SP)
9D00770C  27BD0008   ADDIU SP, SP, 8
9D007710  03E00008   JR RA
9D007714  00000000   NOP
---  c:/users/james/desktop/ece13/jensming/lab09/lab9.x/negotiation.c  ----------------------------------
1:                   /* 
2:                    * File:   Negotiation.c
3:                    * Author: James Ensminger (jensming@ucsc.edu)
4:                    *
5:                    * Created on March 1, 2022, 11:27 PM
6:                    */
7:                   
8:                   
9:                   // Standard libraries
10:                  #include <stdio.h>
11:                  
12:                  // User libraries
13:                  #include "Negotiation.h"
14:                  #include "BOARD.h"
15:                  
16:                  
17:                  // **** Define any module-level, global, or external variables here ****
18:                  static NegotiationData hash; // holds hashed value of secret commitment
19:                  static uint32_t overflow; // calculated square of secret input modulo PUBLIC_KEY
20:                  static NegotiationData parity; // bit-parity of A XOR B
21:                  
22:                  
23:                  // **** Declared function prototypes ****
24:                  NegotiationData NegotiationHash(NegotiationData secret);
25:                  int NegotiationVerify(NegotiationData secret, NegotiationData commitment);
26:                  NegotiationOutcome NegotiateCoinFlip(NegotiationData A, NegotiationData B);
27:                  
28:                  /********************************************************************************
29:                   * Defined NegotiationHash function.
30:                   ********************************************************************************/
31:                  NegotiationData NegotiationHash(NegotiationData secret)
32:                  {
33:                      // obtain the "beef hash" of the secret commitment
34:                      overflow = ((uint32_t)secret * (uint32_t)secret) % PUBLIC_KEY;
35:                      hash = overflow;
36:                      return hash;
37:                  }
38:                  
39:                  /********************************************************************************
40:                   * Defined NegotiationVerify function.
41:                   ********************************************************************************/
42:                  int NegotiationVerify(NegotiationData secret, NegotiationData commitment)
43:                  {
44:                      // verify if the hashed secret number matches the commitment hash
45:                      if (NegotiationHash(secret) == commitment)
46:                      {
47:                          return TRUE;
48:                      }
49:                      else
50:                      {
51:                          return FALSE;
52:                      }
53:                  }
54:                  
55:                  /********************************************************************************
56:                   * Defined NegotiationCoinFlip function.
57:                   ********************************************************************************/
58:                  NegotiationOutcome NegotiateCoinFlip(NegotiationData A, NegotiationData B)
59:                  {
60:                      // determine the outcome of coin flip by checking whether the modulo 2 of
61:                      // parity is 1 for HEADS or 0 for TAILS
62:                      parity = A ^ B;
63:                      if ((parity % 2) == 1)
64:                      {
65:                          return HEADS;
66:                      }
67:                      else
68:                      {
69:                          return TAILS;
70:                      }
71:                  }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D007D68  27BDFFF8   ADDIU SP, SP, -8
9D007D6C  AFBE0004   SW FP, 4(SP)
9D007D70  03A0F025   OR FP, SP, ZERO
9D007D74  00801025   OR V0, A0, ZERO
9D007D78  A7C20008   SH V0, 8(FP)
9D007D7C  97C30008   LHU V1, 8(FP)
9D007D80  97C20008   LHU V0, 8(FP)
9D007D84  70622002   MUL A0, V1, V0
9D007D88  3C0255CF   LUI V0, 21967
9D007D8C  34425827   ORI V0, V0, 22567
9D007D90  00820019   MULTU 0, A0, V0
9D007D94  00001010   MFHI V0
9D007D98  00021B82   SRL V1, V0, 14
9D007D9C  00601025   OR V0, V1, ZERO
9D007DA0  00021040   SLL V0, V0, 1
9D007DA4  00431021   ADDU V0, V0, V1
9D007DA8  00021180   SLL V0, V0, 6
9D007DAC  00431023   SUBU V0, V0, V1
9D007DB0  00021100   SLL V0, V0, 4
9D007DB4  00431023   SUBU V0, V0, V1
9D007DB8  00021100   SLL V0, V0, 4
9D007DBC  00431023   SUBU V0, V0, V1
9D007DC0  00821823   SUBU V1, A0, V0
9D007DC4  AF838018   SW V1, -32744(GP)
9D007DC8  8F828018   LW V0, -32744(GP)
9D007DCC  3042FFFF   ANDI V0, V0, -1
9D007DD0  A7828014   SH V0, -32748(GP)
9D007DD4  97828014   LHU V0, -32748(GP)
9D007DD8  03C0E825   OR SP, FP, ZERO
9D007DDC  8FBE0004   LW FP, 4(SP)
9D007DE0  27BD0008   ADDIU SP, SP, 8
9D007DE4  03E00008   JR RA
9D007DE8  00000000   NOP
9D007DEC  27BDFFE8   ADDIU SP, SP, -24
9D007DF0  AFBF0014   SW RA, 20(SP)
9D007DF4  AFBE0010   SW FP, 16(SP)
9D007DF8  03A0F025   OR FP, SP, ZERO
9D007DFC  00801025   OR V0, A0, ZERO
9D007E00  00A01825   OR V1, A1, ZERO
9D007E04  A7C20018   SH V0, 24(FP)
9D007E08  00601025   OR V0, V1, ZERO
9D007E0C  A7C2001C   SH V0, 28(FP)
9D007E10  97C20018   LHU V0, 24(FP)
9D007E14  00402025   OR A0, V0, ZERO
9D007E18  0F401F5A   JAL NegotiationHash
9D007E1C  00000000   NOP
9D007E20  00401825   OR V1, V0, ZERO
9D007E24  97C2001C   LHU V0, 28(FP)
9D007E28  14430004   BNE V0, V1, 0x9D007E3C
9D007E2C  00000000   NOP
9D007E30  24020001   ADDIU V0, ZERO, 1
9D007E34  10000002   BEQ ZERO, ZERO, 0x9D007E40
9D007E38  00000000   NOP
9D007E3C  00001025   OR V0, ZERO, ZERO
9D007E40  03C0E825   OR SP, FP, ZERO
9D007E44  8FBF0014   LW RA, 20(SP)
9D007E48  8FBE0010   LW FP, 16(SP)
9D007E4C  27BD0018   ADDIU SP, SP, 24
9D007E50  03E00008   JR RA
9D007E54  00000000   NOP
9D007E58  27BDFFF8   ADDIU SP, SP, -8
9D007E5C  AFBE0004   SW FP, 4(SP)
9D007E60  03A0F025   OR FP, SP, ZERO
9D007E64  00801025   OR V0, A0, ZERO
9D007E68  00A01825   OR V1, A1, ZERO
9D007E6C  A7C20008   SH V0, 8(FP)
9D007E70  00601025   OR V0, V1, ZERO
9D007E74  A7C2000C   SH V0, 12(FP)
9D007E78  97C30008   LHU V1, 8(FP)
9D007E7C  97C2000C   LHU V0, 12(FP)
9D007E80  00621026   XOR V0, V1, V0
9D007E84  3042FFFF   ANDI V0, V0, -1
9D007E88  A782801C   SH V0, -32740(GP)
9D007E8C  9782801C   LHU V0, -32740(GP)
9D007E90  30420001   ANDI V0, V0, 1
9D007E94  3042FFFF   ANDI V0, V0, -1
9D007E98  10400004   BEQ V0, ZERO, 0x9D007EAC
9D007E9C  00000000   NOP
9D007EA0  00001025   OR V0, ZERO, ZERO
9D007EA4  10000002   BEQ ZERO, ZERO, 0x9D007EB0
9D007EA8  00000000   NOP
9D007EAC  24020001   ADDIU V0, ZERO, 1
9D007EB0  03C0E825   OR SP, FP, ZERO
9D007EB4  8FBE0004   LW FP, 4(SP)
9D007EB8  27BD0008   ADDIU SP, SP, 8
9D007EBC  03E00008   JR RA
9D007EC0  00000000   NOP
---  c:/users/james/desktop/ece13/jensming/lab09/lab9.x/message.c  --------------------------------------
1:                   /* 
2:                    * File:   Message.c
3:                    * Author: James Ensminger (jensming@ucsc.edu)
4:                    *
5:                    * Created on March 2, 2022, 11:38 PM
6:                    */
7:                   
8:                   
9:                   // Standard libraries
10:                  #include <stdio.h>
11:                  #include <stdlib.h>
12:                  #include <string.h>
13:                  
14:                  // User libraries
15:                  #include "Message.h"
16:                  #include "BOARD.h"
17:                  
18:                  
19:                  // **** Declare any data types here ****
20:                  typedef enum {
21:                      WAIT, PAYLOAD, CHECKSUM
22:                  } DecodeState;
23:                  
24:                  // **** Define any module-level, global, or external variables here ****
25:                  static uint8_t checksum; // holds calculated checksum
26:                  static uint8_t checksumConv; // holds checksum_string conversion to numerical form
27:                  static char tempPayload[MESSAGE_MAX_PAYLOAD_LEN]; // temporarily holds payload
28:                  static char *token; // tokenized portions of payload
29:                  static const char delim[] = ","; // delimiter for tokenizing payload
30:                  static int expectedTokNum; // expected number of tokens
31:                  static char msgEncoded[MESSAGE_MAX_LEN]; // holds encoded message
32:                  static DecodeState decodeState = WAIT; // always start in WAIT state for decoding
33:                  static int index = 0; // always starts at zero for tracking index of payload/checksum
34:                  static char strChecksum[3]; // holds string of checksum
35:                  #define FIRST_DELIM '$' // payload delimiter
36:                  #define CHECKSUM_DELIM '*' // checksum delimiter
37:                  #define END_DELIM '\n' // end delimiter for message
38:                  #define CHECKSUM_LEN 2 // length restriction for checksum
39:                  
40:                  
41:                  // **** Declared function prototypes ****
42:                  uint8_t Message_CalculateChecksum(const char* payload);
43:                  int Message_ParseMessage(const char* payload,
44:                          const char* checksum_string, BB_Event * message_event);
45:                  int Message_Encode(char *message_string, Message message_to_encode);
46:                  int Message_Decode(unsigned char char_in, BB_Event * decoded_message_event);
47:                  
48:                  /********************************************************************************
49:                   * Defined Message_CalculateChecksum function.
50:                   ********************************************************************************/
51:                  uint8_t Message_CalculateChecksum(const char* payload)
52:                  {
53:                      // XOR each ASCII char in the payload to obtain the checksum
54:                      checksum = 0;
55:                      for (int i = 0; i < strlen(payload); i++)
56:                      {
57:                          checksum ^= payload[i];
58:                      }
59:                      return checksum;
60:                  }
61:                  
62:                  /********************************************************************************
63:                   * Defined Message_ParseMessage function.
64:                   ********************************************************************************/
65:                  int Message_ParseMessage(const char* payload,
66:                          const char* checksum_string, BB_Event * message_event)
67:                  {
68:                      // clear the parameters of message events
69:                      message_event->param0 = 0;
70:                      message_event->param1 = 0;
71:                      message_event->param2 = 0;
72:                      
73:                      // see if checksum is two characters long
74:                      if (strlen(checksum_string) != 2)
75:                      {
76:                          message_event->type = BB_EVENT_ERROR;
77:                          return STANDARD_ERROR;
78:                      }
79:                      
80:                      // convert checksum_string to numeric form and then see if the payload's 
81:                      // checksum matches the one passed in
82:                      checksumConv = strtoul(checksum_string, NULL, 16);
83:                      if (Message_CalculateChecksum(payload) != checksumConv)
84:                      {
85:                          message_event->type = BB_EVENT_ERROR;
86:                          return STANDARD_ERROR;
87:                      }
88:                      
89:                      // copy the payload into a temporary variable and then tokenize it to obtain
90:                      // the first portion of the payload
91:                      strcpy(tempPayload, payload);
92:                      token = strtok(tempPayload, delim);
93:                      
94:                      // check what the first token is to determine which BB_Event should happen,
95:                      // also see if it's in the correct format or not
96:                      if (strcmp(token, "CHA") == 0)
97:                      {
98:                          message_event->type = BB_EVENT_CHA_RECEIVED;
99:                          expectedTokNum = 1;
100:                     }
101:                     else if (strcmp(token, "ACC") == 0)
102:                     {
103:                         message_event->type = BB_EVENT_ACC_RECEIVED;
104:                         expectedTokNum = 1;
105:                     }
106:                     else if (strcmp(token, "REV") == 0)
107:                     {
108:                         message_event->type = BB_EVENT_REV_RECEIVED;
109:                         expectedTokNum = 1;
110:                     }
111:                     else if (strcmp(token, "SHO") == 0)
112:                     {
113:                         message_event->type = BB_EVENT_SHO_RECEIVED;
114:                         expectedTokNum = 2;
115:                     }
116:                     else if (strcmp(token, "RES") == 0)
117:                     {
118:                         message_event->type = BB_EVENT_RES_RECEIVED;
119:                         expectedTokNum = 3;
120:                     }
121:                     else
122:                     {
123:                         message_event->type = BB_EVENT_ERROR;
124:                         return STANDARD_ERROR;
125:                     }
126:                     
127:                     // obtain the next tokens in payload depending on what the first token was
128:                     for (int i = 0; i < expectedTokNum; i++)
129:                     {
130:                         token = strtok(NULL, delim);
131:                         if (token == NULL)
132:                         {
133:                             message_event->type = BB_EVENT_ERROR;
134:                             return STANDARD_ERROR;
135:                         }
136:                         
137:                         if (i == 0)
138:                         {
139:                             message_event->param0 = (uint16_t)atoi(token);
140:                         }
141:                         else if (i == 1)
142:                         {
143:                             message_event->param1 = (uint16_t)atoi(token);
144:                         }
145:                         else if (i == 2)
146:                         {
147:                             message_event->param2 = (uint16_t)atoi(token);
148:                         }
149:                     }
150:                     
151:                     // check for any unexpected tokens left as there shouldn't be from the looping
152:                     token = strtok(NULL, delim);
153:                     if (token != NULL)
154:                     {
155:                         message_event->type = BB_EVENT_ERROR;
156:                         return STANDARD_ERROR;
157:                     }
158:                     
159:                     return SUCCESS;
160:                 }
161:                 
162:                 /********************************************************************************
163:                  * Defined Message_Encode function.
164:                  ********************************************************************************/
165:                 int Message_Encode(char *message_string, Message message_to_encode)
166:                 {
167:                     // encode the message based on the type of payload
168:                     switch (message_to_encode.type)
169:                     {
170:                         case MESSAGE_NONE:
171:                             return 0;
172:                             break;
173:                             
174:                         case MESSAGE_CHA:
175:                             sprintf(tempPayload, PAYLOAD_TEMPLATE_CHA, message_to_encode.param0);
176:                             checksum = Message_CalculateChecksum(tempPayload);
177:                             sprintf(msgEncoded, MESSAGE_TEMPLATE, tempPayload, checksum);
178:                             strcpy(message_string, msgEncoded);
179:                             break;
180:                             
181:                         case MESSAGE_ACC:
182:                             sprintf(tempPayload, PAYLOAD_TEMPLATE_ACC, message_to_encode.param0);
183:                             checksum = Message_CalculateChecksum(tempPayload);
184:                             sprintf(msgEncoded, MESSAGE_TEMPLATE, tempPayload, checksum);
185:                             strcpy(message_string, msgEncoded);
186:                             break;
187:                             
188:                         case MESSAGE_REV:
189:                             sprintf(tempPayload, PAYLOAD_TEMPLATE_REV, message_to_encode.param0);
190:                             checksum = Message_CalculateChecksum(tempPayload);
191:                             sprintf(msgEncoded, MESSAGE_TEMPLATE, tempPayload, checksum);
192:                             strcpy(message_string, msgEncoded);
193:                             break;
194:                             
195:                         case MESSAGE_SHO:
196:                             sprintf(tempPayload, PAYLOAD_TEMPLATE_SHO, message_to_encode.param0, 
197:                                     message_to_encode.param1);
198:                             checksum = Message_CalculateChecksum(tempPayload);
199:                             sprintf(msgEncoded, MESSAGE_TEMPLATE, tempPayload, checksum);
200:                             strcpy(message_string, msgEncoded);
201:                             break;
202:                             
203:                         case MESSAGE_RES:
204:                             sprintf(tempPayload, PAYLOAD_TEMPLATE_RES, message_to_encode.param0, 
205:                                     message_to_encode.param1, message_to_encode.param2);
206:                             checksum = Message_CalculateChecksum(tempPayload);
207:                             sprintf(msgEncoded, MESSAGE_TEMPLATE, tempPayload, checksum);
208:                             strcpy(message_string, msgEncoded);
209:                             break;
210:                             
211:                         case MESSAGE_ERROR:
212:                             return -1;
213:                             break;
214:                     }
215:                     
216:                     return strlen(message_string);
217:                 }
218:                 
219:                 /********************************************************************************
220:                  * Defined Message_Decode function.
221:                  ********************************************************************************/
222:                 int Message_Decode(unsigned char char_in, BB_Event * decoded_message_event)
223:                 {
224:                     // decode the passed in char based on which part of the message it's in and 
225:                     // set the BB_Event type along with param0 accordingly as no event should 
226:                     // occur until the decoding process concludes
227:                     switch (decodeState)
228:                     {
229:                         case WAIT:
230:                             // decode for payload if '$' delimiter is the first char passed, if 
231:                             // not, the message is invalid
232:                             if (char_in == FIRST_DELIM)
233:                             {
234:                                 decoded_message_event->type = BB_EVENT_NO_EVENT;
235:                                 decodeState = PAYLOAD;
236:                             }
237:                             else
238:                             {
239:                                 decoded_message_event->type = BB_EVENT_ERROR;
240:                                 decoded_message_event->param0 = BB_ERROR_INVALID_MESSAGE_TYPE;
241:                                 return STANDARD_ERROR;
242:                             }
243:                             break;
244:                             
245:                         case PAYLOAD:
246:                             // keep adding payload to tempPayload until '*' delimiter is reached,
247:                             // also check for format error cases (go back to WAIT if there are)
248:                             if ((char_in == FIRST_DELIM) || (char_in == END_DELIM))
249:                             {
250:                                 index = 0;
251:                                 decoded_message_event->type = BB_EVENT_ERROR;
252:                                 decoded_message_event->param0 = BB_ERROR_INVALID_MESSAGE_TYPE;
253:                                 decodeState = WAIT;
254:                                 return STANDARD_ERROR;
255:                             }
256:                             else if (index > MESSAGE_MAX_PAYLOAD_LEN)
257:                             {
258:                                 index = 0;
259:                                 decoded_message_event->type = BB_EVENT_ERROR;
260:                                 decoded_message_event->param0 = BB_ERROR_PAYLOAD_LEN_EXCEEDED;
261:                                 decodeState = WAIT;
262:                                 return STANDARD_ERROR;
263:                             }
264:                             else if (char_in == CHECKSUM_DELIM)
265:                             {
266:                                 tempPayload[index] = '\0';
267:                                 index = 0;
268:                                 decoded_message_event->type = BB_EVENT_NO_EVENT;
269:                                 decodeState = CHECKSUM;
270:                             }
271:                             else
272:                             {
273:                                 decoded_message_event->type = BB_EVENT_NO_EVENT;
274:                                 tempPayload[index] = char_in;
275:                                 index++;
276:                             }
277:                             break;
278:                             
279:                         case CHECKSUM:
280:                             // add valid checksum to strChecksum until '\n' delimiter is reached,
281:                             // account for format/length errors and return to WAIT state if
282:                             // encountered or if checksum has been fully obtained
283:                             if (char_in == END_DELIM)
284:                             {
285:                                 if (index < CHECKSUM_LEN)
286:                                 {
287:                                     index = 0;
288:                                     decoded_message_event->type = BB_EVENT_ERROR;
289:                                     decoded_message_event->param0 = BB_ERROR_CHECKSUM_LEN_INSUFFICIENT;
290:                                     decodeState = WAIT;
291:                                     return STANDARD_ERROR;
292:                                 }
293:                                 else
294:                                 {
295:                                     strChecksum[index] = '\0';
296:                                     index = 0;
297:                                     if (Message_ParseMessage(tempPayload, strChecksum, decoded_message_event) == STANDARD_ERROR)
298:                                     {
299:                                         decoded_message_event->type = BB_EVENT_ERROR;
300:                                         decoded_message_event->param0 = BB_ERROR_MESSAGE_PARSE_FAILURE;
301:                                         decodeState = WAIT;
302:                                         return STANDARD_ERROR;
303:                                     }
304:                                     else
305:                                     {
306:                                         // successful decode if ending here!
307:                                         decodeState = WAIT;
308:                                     }
309:                                 }
310:                             }
311:                             else if ((char_in < '0') || ((char_in > '9') && (char_in < 'A')) || (char_in > 'F'))
312:                             {
313:                                 index = 0;
314:                                 decoded_message_event->type = BB_EVENT_ERROR;
315:                                 decoded_message_event->param0 = BB_ERROR_BAD_CHECKSUM;
316:                                 decodeState = WAIT;
317:                                 return STANDARD_ERROR;
318:                             }
319:                             else
320:                             {
321:                                 decoded_message_event->type = BB_EVENT_NO_EVENT;
322:                                 strChecksum[index] = char_in;
323:                                 index++;
324:                             }
325:                             break;
326:                     }
327:                     
328:                     return SUCCESS;
329:                 }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D001E50  27BDFFE0   ADDIU SP, SP, -32
9D001E54  AFBF001C   SW RA, 28(SP)
9D001E58  AFBE0018   SW FP, 24(SP)
9D001E5C  03A0F025   OR FP, SP, ZERO
9D001E60  AFC40020   SW A0, 32(FP)
9D001E64  A3808020   SB ZERO, -32736(GP)
9D001E68  AFC00010   SW ZERO, 16(FP)
9D001E6C  1000000E   BEQ ZERO, ZERO, 0x9D001EA8
9D001E70  00000000   NOP
9D001E74  8FC20010   LW V0, 16(FP)
9D001E78  8FC30020   LW V1, 32(FP)
9D001E7C  00621021   ADDU V0, V1, V0
9D001E80  80430000   LB V1, 0(V0)
9D001E84  93828020   LBU V0, -32736(GP)
9D001E88  7C021420   SEB V0, V0
9D001E8C  00621026   XOR V0, V1, V0
9D001E90  7C021420   SEB V0, V0
9D001E94  304200FF   ANDI V0, V0, 255
9D001E98  A3828020   SB V0, -32736(GP)
9D001E9C  8FC20010   LW V0, 16(FP)
9D001EA0  24420001   ADDIU V0, V0, 1
9D001EA4  AFC20010   SW V0, 16(FP)
9D001EA8  8FC40020   LW A0, 32(FP)
9D001EAC  0F401F00   JAL strlen
9D001EB0  00000000   NOP
9D001EB4  00401825   OR V1, V0, ZERO
9D001EB8  8FC20010   LW V0, 16(FP)
9D001EBC  0043102B   SLTU V0, V0, V1
9D001EC0  1440FFEC   BNE V0, ZERO, 0x9D001E74
9D001EC4  00000000   NOP
9D001EC8  93828020   LBU V0, -32736(GP)
9D001ECC  03C0E825   OR SP, FP, ZERO
9D001ED0  8FBF001C   LW RA, 28(SP)
9D001ED4  8FBE0018   LW FP, 24(SP)
9D001ED8  27BD0020   ADDIU SP, SP, 32
9D001EDC  03E00008   JR RA
9D001EE0  00000000   NOP
9D001EE4  27BDFFE0   ADDIU SP, SP, -32
9D001EE8  AFBF001C   SW RA, 28(SP)
9D001EEC  AFBE0018   SW FP, 24(SP)
9D001EF0  03A0F025   OR FP, SP, ZERO
9D001EF4  AFC40020   SW A0, 32(FP)
9D001EF8  AFC50024   SW A1, 36(FP)
9D001EFC  AFC60028   SW A2, 40(FP)
9D001F00  8FC20028   LW V0, 40(FP)
9D001F04  A4400004   SH ZERO, 4(V0)
9D001F08  8FC20028   LW V0, 40(FP)
9D001F0C  A4400006   SH ZERO, 6(V0)
9D001F10  8FC20028   LW V0, 40(FP)
9D001F14  A4400008   SH ZERO, 8(V0)
9D001F18  8FC40024   LW A0, 36(FP)
9D001F1C  0F401F00   JAL strlen
9D001F20  00000000   NOP
9D001F24  00401825   OR V1, V0, ZERO
9D001F28  24020002   ADDIU V0, ZERO, 2
9D001F2C  10620007   BEQ V1, V0, 0x9D001F4C
9D001F30  00000000   NOP
9D001F34  8FC20028   LW V0, 40(FP)
9D001F38  24030009   ADDIU V1, ZERO, 9
9D001F3C  AC430000   SW V1, 0(V0)
9D001F40  00001025   OR V0, ZERO, ZERO
9D001F44  100000C0   BEQ ZERO, ZERO, 0x9D002248
9D001F48  00000000   NOP
9D001F4C  24060010   ADDIU A2, ZERO, 16
9D001F50  00002825   OR A1, ZERO, ZERO
9D001F54  8FC40024   LW A0, 36(FP)
9D001F58  0F401DC6   JAL strtoul
9D001F5C  00000000   NOP
9D001F60  304200FF   ANDI V0, V0, 255
9D001F64  A3828021   SB V0, -32735(GP)
9D001F68  8FC40020   LW A0, 32(FP)
9D001F6C  0F400794   JAL Message_CalculateChecksum
9D001F70  00000000   NOP
9D001F74  00401825   OR V1, V0, ZERO
9D001F78  93828021   LBU V0, -32735(GP)
9D001F7C  10620007   BEQ V1, V0, 0x9D001F9C
9D001F80  00000000   NOP
9D001F84  8FC20028   LW V0, 40(FP)
9D001F88  24030009   ADDIU V1, ZERO, 9
9D001F8C  AC430000   SW V1, 0(V0)
9D001F90  00001025   OR V0, ZERO, ZERO
9D001F94  100000AC   BEQ ZERO, ZERO, 0x9D002248
9D001F98  00000000   NOP
9D001F9C  8FC50020   LW A1, 32(FP)
9D001FA0  3C02A000   LUI V0, -24576
9D001FA4  24440DCC   ADDIU A0, V0, 3532
9D001FA8  0F401E3C   JAL strcpy
9D001FAC  00000000   NOP
9D001FB0  3C029D01   LUI V0, -25343
9D001FB4  24458DAC   ADDIU A1, V0, -29268
9D001FB8  3C02A000   LUI V0, -24576
9D001FBC  24440DCC   ADDIU A0, V0, 3532
9D001FC0  0F4021E9   JAL strtok
9D001FC4  00000000   NOP
9D001FC8  AF828024   SW V0, -32732(GP)
9D001FCC  8F838024   LW V1, -32732(GP)
9D001FD0  3C029D01   LUI V0, -25343
9D001FD4  24458DB0   ADDIU A1, V0, -29264
9D001FD8  00602025   OR A0, V1, ZERO
9D001FDC  0F4020E6   JAL strcmp
9D001FE0  00000000   NOP
9D001FE4  14400008   BNE V0, ZERO, 0x9D002008
9D001FE8  00000000   NOP
9D001FEC  8FC20028   LW V0, 40(FP)
9D001FF0  24030003   ADDIU V1, ZERO, 3
9D001FF4  AC430000   SW V1, 0(V0)
9D001FF8  24020001   ADDIU V0, ZERO, 1
9D001FFC  AF828028   SW V0, -32728(GP)
9D002000  10000043   BEQ ZERO, ZERO, 0x9D002110
9D002004  00000000   NOP
9D002008  8F838024   LW V1, -32732(GP)
9D00200C  3C029D01   LUI V0, -25343
9D002010  24458DB4   ADDIU A1, V0, -29260
9D002014  00602025   OR A0, V1, ZERO
9D002018  0F4020E6   JAL strcmp
9D00201C  00000000   NOP
9D002020  14400008   BNE V0, ZERO, 0x9D002044
9D002024  00000000   NOP
9D002028  8FC20028   LW V0, 40(FP)
9D00202C  24030004   ADDIU V1, ZERO, 4
9D002030  AC430000   SW V1, 0(V0)
9D002034  24020001   ADDIU V0, ZERO, 1
9D002038  AF828028   SW V0, -32728(GP)
9D00203C  10000034   BEQ ZERO, ZERO, 0x9D002110
9D002040  00000000   NOP
9D002044  8F838024   LW V1, -32732(GP)
9D002048  3C029D01   LUI V0, -25343
9D00204C  24458DB8   ADDIU A1, V0, -29256
9D002050  00602025   OR A0, V1, ZERO
9D002054  0F4020E6   JAL strcmp
9D002058  00000000   NOP
9D00205C  14400008   BNE V0, ZERO, 0x9D002080
9D002060  00000000   NOP
9D002064  8FC20028   LW V0, 40(FP)
9D002068  24030005   ADDIU V1, ZERO, 5
9D00206C  AC430000   SW V1, 0(V0)
9D002070  24020001   ADDIU V0, ZERO, 1
9D002074  AF828028   SW V0, -32728(GP)
9D002078  10000025   BEQ ZERO, ZERO, 0x9D002110
9D00207C  00000000   NOP
9D002080  8F838024   LW V1, -32732(GP)
9D002084  3C029D01   LUI V0, -25343
9D002088  24458DBC   ADDIU A1, V0, -29252
9D00208C  00602025   OR A0, V1, ZERO
9D002090  0F4020E6   JAL strcmp
9D002094  00000000   NOP
9D002098  14400008   BNE V0, ZERO, 0x9D0020BC
9D00209C  00000000   NOP
9D0020A0  8FC20028   LW V0, 40(FP)
9D0020A4  24030006   ADDIU V1, ZERO, 6
9D0020A8  AC430000   SW V1, 0(V0)
9D0020AC  24020002   ADDIU V0, ZERO, 2
9D0020B0  AF828028   SW V0, -32728(GP)
9D0020B4  10000016   BEQ ZERO, ZERO, 0x9D002110
9D0020B8  00000000   NOP
9D0020BC  8F838024   LW V1, -32732(GP)
9D0020C0  3C029D01   LUI V0, -25343
9D0020C4  24458DC0   ADDIU A1, V0, -29248
9D0020C8  00602025   OR A0, V1, ZERO
9D0020CC  0F4020E6   JAL strcmp
9D0020D0  00000000   NOP
9D0020D4  14400008   BNE V0, ZERO, 0x9D0020F8
9D0020D8  00000000   NOP
9D0020DC  8FC20028   LW V0, 40(FP)
9D0020E0  24030007   ADDIU V1, ZERO, 7
9D0020E4  AC430000   SW V1, 0(V0)
9D0020E8  24020003   ADDIU V0, ZERO, 3
9D0020EC  AF828028   SW V0, -32728(GP)
9D0020F0  10000007   BEQ ZERO, ZERO, 0x9D002110
9D0020F4  00000000   NOP
9D0020F8  8FC20028   LW V0, 40(FP)
9D0020FC  24030009   ADDIU V1, ZERO, 9
9D002100  AC430000   SW V1, 0(V0)
9D002104  00001025   OR V0, ZERO, ZERO
9D002108  1000004F   BEQ ZERO, ZERO, 0x9D002248
9D00210C  00000000   NOP
9D002110  AFC00010   SW ZERO, 16(FP)
9D002114  10000037   BEQ ZERO, ZERO, 0x9D0021F4
9D002118  00000000   NOP
9D00211C  3C029D01   LUI V0, -25343
9D002120  24458DAC   ADDIU A1, V0, -29268
9D002124  00002025   OR A0, ZERO, ZERO
9D002128  0F4021E9   JAL strtok
9D00212C  00000000   NOP
9D002130  AF828024   SW V0, -32732(GP)
9D002134  8F828024   LW V0, -32732(GP)
9D002138  14400007   BNE V0, ZERO, 0x9D002158
9D00213C  00000000   NOP
9D002140  8FC20028   LW V0, 40(FP)
9D002144  24030009   ADDIU V1, ZERO, 9
9D002148  AC430000   SW V1, 0(V0)
9D00214C  00001025   OR V0, ZERO, ZERO
9D002150  1000003D   BEQ ZERO, ZERO, 0x9D002248
9D002154  00000000   NOP
9D002158  8FC20010   LW V0, 16(FP)
9D00215C  1440000A   BNE V0, ZERO, 0x9D002188
9D002160  00000000   NOP
9D002164  8F828024   LW V0, -32732(GP)
9D002168  00402025   OR A0, V0, ZERO
9D00216C  0F40228A   JAL atoi
9D002170  00000000   NOP
9D002174  3043FFFF   ANDI V1, V0, -1
9D002178  8FC20028   LW V0, 40(FP)
9D00217C  A4430004   SH V1, 4(V0)
9D002180  10000019   BEQ ZERO, ZERO, 0x9D0021E8
9D002184  00000000   NOP
9D002188  8FC30010   LW V1, 16(FP)
9D00218C  24020001   ADDIU V0, ZERO, 1
9D002190  1462000A   BNE V1, V0, 0x9D0021BC
9D002194  00000000   NOP
9D002198  8F828024   LW V0, -32732(GP)
9D00219C  00402025   OR A0, V0, ZERO
9D0021A0  0F40228A   JAL atoi
9D0021A4  00000000   NOP
9D0021A8  3043FFFF   ANDI V1, V0, -1
9D0021AC  8FC20028   LW V0, 40(FP)
9D0021B0  A4430006   SH V1, 6(V0)
9D0021B4  1000000C   BEQ ZERO, ZERO, 0x9D0021E8
9D0021B8  00000000   NOP
9D0021BC  8FC30010   LW V1, 16(FP)
9D0021C0  24020002   ADDIU V0, ZERO, 2
9D0021C4  14620008   BNE V1, V0, 0x9D0021E8
9D0021C8  00000000   NOP
9D0021CC  8F828024   LW V0, -32732(GP)
9D0021D0  00402025   OR A0, V0, ZERO
9D0021D4  0F40228A   JAL atoi
9D0021D8  00000000   NOP
9D0021DC  3043FFFF   ANDI V1, V0, -1
9D0021E0  8FC20028   LW V0, 40(FP)
9D0021E4  A4430008   SH V1, 8(V0)
9D0021E8  8FC20010   LW V0, 16(FP)
9D0021EC  24420001   ADDIU V0, V0, 1
9D0021F0  AFC20010   SW V0, 16(FP)
9D0021F4  8F828028   LW V0, -32728(GP)
9D0021F8  8FC30010   LW V1, 16(FP)
9D0021FC  0062102A   SLT V0, V1, V0
9D002200  1440FFC6   BNE V0, ZERO, 0x9D00211C
9D002204  00000000   NOP
9D002208  3C029D01   LUI V0, -25343
9D00220C  24458DAC   ADDIU A1, V0, -29268
9D002210  00002025   OR A0, ZERO, ZERO
9D002214  0F4021E9   JAL strtok
9D002218  00000000   NOP
9D00221C  AF828024   SW V0, -32732(GP)
9D002220  8F828024   LW V0, -32732(GP)
9D002224  10400007   BEQ V0, ZERO, 0x9D002244
9D002228  00000000   NOP
9D00222C  8FC20028   LW V0, 40(FP)
9D002230  24030009   ADDIU V1, ZERO, 9
9D002234  AC430000   SW V1, 0(V0)
9D002238  00001025   OR V0, ZERO, ZERO
9D00223C  10000002   BEQ ZERO, ZERO, 0x9D002248
9D002240  00000000   NOP
9D002244  24020001   ADDIU V0, ZERO, 1
9D002248  03C0E825   OR SP, FP, ZERO
9D00224C  8FBF001C   LW RA, 28(SP)
9D002250  8FBE0018   LW FP, 24(SP)
9D002254  27BD0020   ADDIU SP, SP, 32
9D002258  03E00008   JR RA
9D00225C  00000000   NOP
9D002260  27BDFFE0   ADDIU SP, SP, -32
9D002264  AFBF001C   SW RA, 28(SP)
9D002268  AFBE0018   SW FP, 24(SP)
9D00226C  03A0F025   OR FP, SP, ZERO
9D002270  AFC40020   SW A0, 32(FP)
9D002274  AFC50024   SW A1, 36(FP)
9D002278  AFC60028   SW A2, 40(FP)
9D00227C  AFC7002C   SW A3, 44(FP)
9D002280  8FC20024   LW V0, 36(FP)
9D002284  24420001   ADDIU V0, V0, 1
9D002288  2C430007   SLTIU V1, V0, 7
9D00228C  106000B1   BEQ V1, ZERO, 0x9D002554
9D002290  00000000   NOP
9D002294  00021880   SLL V1, V0, 2
9D002298  3C029D00   LUI V0, -25344
9D00229C  244222B0   ADDIU V0, V0, 8880
9D0022A0  00621021   ADDU V0, V1, V0
9D0022A4  8C420000   LW V0, 0(V0)
9D0022A8  00400008   JR V0
9D0022AC  00000000   NOP
9D0022CC  00001025   OR V0, ZERO, ZERO
9D0022D8  8FC20028   LW V0, 40(FP)
9D0022DC  00403025   OR A2, V0, ZERO
9D0022E0  3C029D01   LUI V0, -25343
9D0022E4  24458DC4   ADDIU A1, V0, -29244
9D0022E8  3C02A000   LUI V0, -24576
9D0022EC  24440DCC   ADDIU A0, V0, 3532
9D0022F0  0F40230D   JAL _sprintf_cdnopsuxX
9D0022F4  00000000   NOP
9D0022F8  3C02A000   LUI V0, -24576
9D0022FC  24440DCC   ADDIU A0, V0, 3532
9D002300  0F400794   JAL Message_CalculateChecksum
9D002304  00000000   NOP
9D002308  A3828020   SB V0, -32736(GP)
9D00230C  93828020   LBU V0, -32736(GP)
9D002310  00403825   OR A3, V0, ZERO
9D002314  3C02A000   LUI V0, -24576
9D002318  24460DCC   ADDIU A2, V0, 3532
9D00231C  3C029D01   LUI V0, -25343
9D002320  24458DCC   ADDIU A1, V0, -29236
9D002324  3C02A000   LUI V0, -24576
9D002328  24440E1C   ADDIU A0, V0, 3612
9D00232C  0F40230D   JAL _sprintf_cdnopsuxX
9D002330  00000000   NOP
9D002334  3C02A000   LUI V0, -24576
9D002338  24450E1C   ADDIU A1, V0, 3612
9D00233C  8FC40020   LW A0, 32(FP)
9D002340  0F401E3C   JAL strcpy
9D002344  00000000   NOP
9D002348  10000082   BEQ ZERO, ZERO, 0x9D002554
9D00234C  00000000   NOP
9D002350  8FC20028   LW V0, 40(FP)
9D002354  00403025   OR A2, V0, ZERO
9D002358  3C029D01   LUI V0, -25343
9D00235C  24458DD8   ADDIU A1, V0, -29224
9D002360  3C02A000   LUI V0, -24576
9D002364  24440DCC   ADDIU A0, V0, 3532
9D002368  0F40230D   JAL _sprintf_cdnopsuxX
9D00236C  00000000   NOP
9D002370  3C02A000   LUI V0, -24576
9D002374  24440DCC   ADDIU A0, V0, 3532
9D002378  0F400794   JAL Message_CalculateChecksum
9D00237C  00000000   NOP
9D002380  A3828020   SB V0, -32736(GP)
9D002384  93828020   LBU V0, -32736(GP)
9D002388  00403825   OR A3, V0, ZERO
9D00238C  3C02A000   LUI V0, -24576
9D002390  24460DCC   ADDIU A2, V0, 3532
9D002394  3C029D01   LUI V0, -25343
9D002398  24458DCC   ADDIU A1, V0, -29236
9D00239C  3C02A000   LUI V0, -24576
9D0023A0  24440E1C   ADDIU A0, V0, 3612
9D0023A4  0F40230D   JAL _sprintf_cdnopsuxX
9D0023A8  00000000   NOP
9D0023AC  3C02A000   LUI V0, -24576
9D0023B0  24450E1C   ADDIU A1, V0, 3612
9D0023B4  8FC40020   LW A0, 32(FP)
9D0023B8  0F401E3C   JAL strcpy
9D0023BC  00000000   NOP
9D0023C0  10000064   BEQ ZERO, ZERO, 0x9D002554
9D0023C4  00000000   NOP
9D0023C8  8FC20028   LW V0, 40(FP)
9D0023CC  00403025   OR A2, V0, ZERO
9D0023D0  3C029D01   LUI V0, -25343
9D0023D4  24458DE0   ADDIU A1, V0, -29216
9D0023D8  3C02A000   LUI V0, -24576
9D0023DC  24440DCC   ADDIU A0, V0, 3532
9D0023E0  0F40230D   JAL _sprintf_cdnopsuxX
9D0023E4  00000000   NOP
9D0023E8  3C02A000   LUI V0, -24576
9D0023EC  24440DCC   ADDIU A0, V0, 3532
9D0023F0  0F400794   JAL Message_CalculateChecksum
9D0023F4  00000000   NOP
9D0023F8  A3828020   SB V0, -32736(GP)
9D0023FC  93828020   LBU V0, -32736(GP)
9D002400  00403825   OR A3, V0, ZERO
9D002404  3C02A000   LUI V0, -24576
9D002408  24460DCC   ADDIU A2, V0, 3532
9D00240C  3C029D01   LUI V0, -25343
9D002410  24458DCC   ADDIU A1, V0, -29236
9D002414  3C02A000   LUI V0, -24576
9D002418  24440E1C   ADDIU A0, V0, 3612
9D00241C  0F40230D   JAL _sprintf_cdnopsuxX
9D002420  00000000   NOP
9D002424  3C02A000   LUI V0, -24576
9D002428  24450E1C   ADDIU A1, V0, 3612
9D00242C  8FC40020   LW A0, 32(FP)
9D002430  0F401E3C   JAL strcpy
9D002434  00000000   NOP
9D002438  10000046   BEQ ZERO, ZERO, 0x9D002554
9D00243C  00000000   NOP
9D002440  8FC20028   LW V0, 40(FP)
9D002444  8FC3002C   LW V1, 44(FP)
9D002448  00603825   OR A3, V1, ZERO
9D00244C  00403025   OR A2, V0, ZERO
9D002450  3C029D01   LUI V0, -25343
9D002454  24458DE8   ADDIU A1, V0, -29208
9D002458  3C02A000   LUI V0, -24576
9D00245C  24440DCC   ADDIU A0, V0, 3532
9D002460  0F40230D   JAL _sprintf_cdnopsuxX
9D002464  00000000   NOP
9D002468  3C02A000   LUI V0, -24576
9D00246C  24440DCC   ADDIU A0, V0, 3532
9D002470  0F400794   JAL Message_CalculateChecksum
9D002474  00000000   NOP
9D002478  A3828020   SB V0, -32736(GP)
9D00247C  93828020   LBU V0, -32736(GP)
9D002480  00403825   OR A3, V0, ZERO
9D002484  3C02A000   LUI V0, -24576
9D002488  24460DCC   ADDIU A2, V0, 3532
9D00248C  3C029D01   LUI V0, -25343
9D002490  24458DCC   ADDIU A1, V0, -29236
9D002494  3C02A000   LUI V0, -24576
9D002498  24440E1C   ADDIU A0, V0, 3612
9D00249C  0F40230D   JAL _sprintf_cdnopsuxX
9D0024A0  00000000   NOP
9D0024A4  3C02A000   LUI V0, -24576
9D0024A8  24450E1C   ADDIU A1, V0, 3612
9D0024AC  8FC40020   LW A0, 32(FP)
9D0024B0  0F401E3C   JAL strcpy
9D0024B4  00000000   NOP
9D0024B8  10000026   BEQ ZERO, ZERO, 0x9D002554
9D0024BC  00000000   NOP
9D0024C0  8FC30028   LW V1, 40(FP)
9D0024C4  8FC4002C   LW A0, 44(FP)
9D0024C8  8FC20030   LW V0, 48(FP)
9D0024CC  AFA20010   SW V0, 16(SP)
9D0024D0  00803825   OR A3, A0, ZERO
9D0024D4  00603025   OR A2, V1, ZERO
9D0024D8  3C029D01   LUI V0, -25343
9D0024DC  24458DF4   ADDIU A1, V0, -29196
9D0024E0  3C02A000   LUI V0, -24576
9D0024E4  24440DCC   ADDIU A0, V0, 3532
9D0024E8  0F40230D   JAL _sprintf_cdnopsuxX
9D0024EC  00000000   NOP
9D0024F0  3C02A000   LUI V0, -24576
9D0024F4  24440DCC   ADDIU A0, V0, 3532
9D0024F8  0F400794   JAL Message_CalculateChecksum
9D0024FC  00000000   NOP
9D002500  A3828020   SB V0, -32736(GP)
9D002504  93828020   LBU V0, -32736(GP)
9D002508  00403825   OR A3, V0, ZERO
9D00250C  3C02A000   LUI V0, -24576
9D002510  24460DCC   ADDIU A2, V0, 3532
9D002514  3C029D01   LUI V0, -25343
9D002518  24458DCC   ADDIU A1, V0, -29236
9D00251C  3C02A000   LUI V0, -24576
9D002520  24440E1C   ADDIU A0, V0, 3612
9D002524  0F40230D   JAL _sprintf_cdnopsuxX
9D002528  00000000   NOP
9D00252C  3C02A000   LUI V0, -24576
9D002530  24450E1C   ADDIU A1, V0, 3612
9D002534  8FC40020   LW A0, 32(FP)
9D002538  0F401E3C   JAL strcpy
9D00253C  00000000   NOP
9D002540  10000004   BEQ ZERO, ZERO, 0x9D002554
9D002544  00000000   NOP
9D002548  2402FFFF   ADDIU V0, ZERO, -1
9D00254C  10000004   BEQ ZERO, ZERO, 0x9D002560
9D002550  00000000   NOP
9D002554  8FC40020   LW A0, 32(FP)
9D002558  0F401F00   JAL strlen
9D00255C  00000000   NOP
9D002560  03C0E825   OR SP, FP, ZERO
9D002564  8FBF001C   LW RA, 28(SP)
9D002568  8FBE0018   LW FP, 24(SP)
9D00256C  27BD0020   ADDIU SP, SP, 32
9D002570  03E00008   JR RA
9D002574  00000000   NOP
9D002578  27BDFFE8   ADDIU SP, SP, -24
9D00257C  AFBF0014   SW RA, 20(SP)
9D002580  AFBE0010   SW FP, 16(SP)
9D002584  03A0F025   OR FP, SP, ZERO
9D002588  00801025   OR V0, A0, ZERO
9D00258C  AFC5001C   SW A1, 28(FP)
9D002590  A3C20018   SB V0, 24(FP)
9D002594  8F82802C   LW V0, -32724(GP)
9D002598  24030001   ADDIU V1, ZERO, 1
9D00259C  1043001B   BEQ V0, V1, 0x9D00260C
9D0025A0  00000000   NOP
9D0025A4  10400006   BEQ V0, ZERO, 0x9D0025C0
9D0025A8  00000000   NOP
9D0025AC  24030002   ADDIU V1, ZERO, 2
9D0025B0  10430055   BEQ V0, V1, 0x9D002708
9D0025B4  00000000   NOP
9D0025B8  100000A6   BEQ ZERO, ZERO, 0x9D002854
9D0025BC  00000000   NOP
9D0025C0  93C30018   LBU V1, 24(FP)
9D0025C4  24020024   ADDIU V0, ZERO, 36
9D0025C8  14620007   BNE V1, V0, 0x9D0025E8
9D0025CC  00000000   NOP
9D0025D0  8FC2001C   LW V0, 28(FP)
9D0025D4  AC400000   SW ZERO, 0(V0)
9D0025D8  24020001   ADDIU V0, ZERO, 1
9D0025DC  AF82802C   SW V0, -32724(GP)
9D0025E0  1000009C   BEQ ZERO, ZERO, 0x9D002854
9D0025E4  00000000   NOP
9D0025E8  8FC2001C   LW V0, 28(FP)
9D0025EC  24030009   ADDIU V1, ZERO, 9
9D0025F0  AC430000   SW V1, 0(V0)
9D0025F4  8FC2001C   LW V0, 28(FP)
9D0025F8  24030005   ADDIU V1, ZERO, 5
9D0025FC  A4430004   SH V1, 4(V0)
9D002600  00001025   OR V0, ZERO, ZERO
9D002604  10000094   BEQ ZERO, ZERO, 0x9D002858
9D002608  00000000   NOP
9D00260C  93C30018   LBU V1, 24(FP)
9D002610  24020024   ADDIU V0, ZERO, 36
9D002614  10620005   BEQ V1, V0, 0x9D00262C
9D002618  00000000   NOP
9D00261C  93C30018   LBU V1, 24(FP)
9D002620  2402000A   ADDIU V0, ZERO, 10
9D002624  1462000C   BNE V1, V0, 0x9D002658
9D002628  00000000   NOP
9D00262C  AF808030   SW ZERO, -32720(GP)
9D002630  8FC2001C   LW V0, 28(FP)
9D002634  24030009   ADDIU V1, ZERO, 9
9D002638  AC430000   SW V1, 0(V0)
9D00263C  8FC2001C   LW V0, 28(FP)
9D002640  24030005   ADDIU V1, ZERO, 5
9D002644  A4430004   SH V1, 4(V0)
9D002648  AF80802C   SW ZERO, -32724(GP)
9D00264C  00001025   OR V0, ZERO, ZERO
9D002650  10000081   BEQ ZERO, ZERO, 0x9D002858
9D002654  00000000   NOP
9D002658  8F828030   LW V0, -32720(GP)
9D00265C  2842004E   SLTI V0, V0, 78
9D002660  1440000C   BNE V0, ZERO, 0x9D002694
9D002664  00000000   NOP
9D002668  AF808030   SW ZERO, -32720(GP)
9D00266C  8FC2001C   LW V0, 28(FP)
9D002670  24030009   ADDIU V1, ZERO, 9
9D002674  AC430000   SW V1, 0(V0)
9D002678  8FC2001C   LW V0, 28(FP)
9D00267C  24030002   ADDIU V1, ZERO, 2
9D002680  A4430004   SH V1, 4(V0)
9D002684  AF80802C   SW ZERO, -32724(GP)
9D002688  00001025   OR V0, ZERO, ZERO
9D00268C  10000072   BEQ ZERO, ZERO, 0x9D002858
9D002690  00000000   NOP
9D002694  93C30018   LBU V1, 24(FP)
9D002698  2402002A   ADDIU V0, ZERO, 42
9D00269C  1462000D   BNE V1, V0, 0x9D0026D4
9D0026A0  00000000   NOP
9D0026A4  8F838030   LW V1, -32720(GP)
9D0026A8  3C02A000   LUI V0, -24576
9D0026AC  24420DCC   ADDIU V0, V0, 3532
9D0026B0  00621021   ADDU V0, V1, V0
9D0026B4  A0400000   SB ZERO, 0(V0)
9D0026B8  AF808030   SW ZERO, -32720(GP)
9D0026BC  8FC2001C   LW V0, 28(FP)
9D0026C0  AC400000   SW ZERO, 0(V0)
9D0026C4  24020002   ADDIU V0, ZERO, 2
9D0026C8  AF82802C   SW V0, -32724(GP)
9D0026CC  10000061   BEQ ZERO, ZERO, 0x9D002854
9D0026D0  00000000   NOP
9D0026D4  8FC2001C   LW V0, 28(FP)
9D0026D8  AC400000   SW ZERO, 0(V0)
9D0026DC  8F848030   LW A0, -32720(GP)
9D0026E0  83C30018   LB V1, 24(FP)
9D0026E4  3C02A000   LUI V0, -24576
9D0026E8  24420DCC   ADDIU V0, V0, 3532
9D0026EC  00821021   ADDU V0, A0, V0
9D0026F0  A0430000   SB V1, 0(V0)
9D0026F4  8F828030   LW V0, -32720(GP)
9D0026F8  24420001   ADDIU V0, V0, 1
9D0026FC  AF828030   SW V0, -32720(GP)
9D002700  10000054   BEQ ZERO, ZERO, 0x9D002854
9D002704  00000000   NOP
9D002708  93C30018   LBU V1, 24(FP)
9D00270C  2402000A   ADDIU V0, ZERO, 10
9D002710  1462002A   BNE V1, V0, 0x9D0027BC
9D002714  00000000   NOP
9D002718  8F828030   LW V0, -32720(GP)
9D00271C  28420002   SLTI V0, V0, 2
9D002720  1040000C   BEQ V0, ZERO, 0x9D002754
9D002724  00000000   NOP
9D002728  AF808030   SW ZERO, -32720(GP)
9D00272C  8FC2001C   LW V0, 28(FP)
9D002730  24030009   ADDIU V1, ZERO, 9
9D002734  AC430000   SW V1, 0(V0)
9D002738  8FC2001C   LW V0, 28(FP)
9D00273C  24030004   ADDIU V1, ZERO, 4
9D002740  A4430004   SH V1, 4(V0)
9D002744  AF80802C   SW ZERO, -32724(GP)
9D002748  00001025   OR V0, ZERO, ZERO
9D00274C  10000042   BEQ ZERO, ZERO, 0x9D002858
9D002750  00000000   NOP
9D002754  8F838030   LW V1, -32720(GP)
9D002758  27828034   ADDIU V0, GP, -32716
9D00275C  00621021   ADDU V0, V1, V0
9D002760  A0400000   SB ZERO, 0(V0)
9D002764  AF808030   SW ZERO, -32720(GP)
9D002768  8FC6001C   LW A2, 28(FP)
9D00276C  27858034   ADDIU A1, GP, -32716
9D002770  3C02A000   LUI V0, -24576
9D002774  24440DCC   ADDIU A0, V0, 3532
9D002778  0F4007B9   JAL Message_ParseMessage
9D00277C  00000000   NOP
9D002780  1440000B   BNE V0, ZERO, 0x9D0027B0
9D002784  00000000   NOP
9D002788  8FC2001C   LW V0, 28(FP)
9D00278C  24030009   ADDIU V1, ZERO, 9
9D002790  AC430000   SW V1, 0(V0)
9D002794  8FC2001C   LW V0, 28(FP)
9D002798  24030006   ADDIU V1, ZERO, 6
9D00279C  A4430004   SH V1, 4(V0)
9D0027A0  AF80802C   SW ZERO, -32724(GP)
9D0027A4  00001025   OR V0, ZERO, ZERO
9D0027A8  1000002B   BEQ ZERO, ZERO, 0x9D002858
9D0027AC  00000000   NOP
9D0027B0  AF80802C   SW ZERO, -32724(GP)
9D0027B4  10000026   BEQ ZERO, ZERO, 0x9D002850
9D0027B8  00000000   NOP
9D0027BC  93C20018   LBU V0, 24(FP)
9D0027C0  2C420030   SLTIU V0, V0, 48
9D0027C4  1440000D   BNE V0, ZERO, 0x9D0027FC
9D0027C8  00000000   NOP
9D0027CC  93C20018   LBU V0, 24(FP)
9D0027D0  2C42003A   SLTIU V0, V0, 58
9D0027D4  14400005   BNE V0, ZERO, 0x9D0027EC
9D0027D8  00000000   NOP
9D0027DC  93C20018   LBU V0, 24(FP)
9D0027E0  2C420041   SLTIU V0, V0, 65
9D0027E4  14400005   BNE V0, ZERO, 0x9D0027FC
9D0027E8  00000000   NOP
9D0027EC  93C20018   LBU V0, 24(FP)
9D0027F0  2C420047   SLTIU V0, V0, 71
9D0027F4  1440000C   BNE V0, ZERO, 0x9D002828
9D0027F8  00000000   NOP
9D0027FC  AF808030   SW ZERO, -32720(GP)
9D002800  8FC2001C   LW V0, 28(FP)
9D002804  24030009   ADDIU V1, ZERO, 9
9D002808  AC430000   SW V1, 0(V0)
9D00280C  8FC2001C   LW V0, 28(FP)
9D002810  24030001   ADDIU V1, ZERO, 1
9D002814  A4430004   SH V1, 4(V0)
9D002818  AF80802C   SW ZERO, -32724(GP)
9D00281C  00001025   OR V0, ZERO, ZERO
9D002820  1000000D   BEQ ZERO, ZERO, 0x9D002858
9D002824  00000000   NOP
9D002828  8FC2001C   LW V0, 28(FP)
9D00282C  AC400000   SW ZERO, 0(V0)
9D002830  8F848030   LW A0, -32720(GP)
9D002834  83C30018   LB V1, 24(FP)
9D002838  27828034   ADDIU V0, GP, -32716
9D00283C  00821021   ADDU V0, A0, V0
9D002840  A0430000   SB V1, 0(V0)
9D002844  8F828030   LW V0, -32720(GP)
9D002848  24420001   ADDIU V0, V0, 1
9D00284C  AF828030   SW V0, -32720(GP)
9D002850  00000000   NOP
9D002854  24020001   ADDIU V0, ZERO, 1
9D002858  03C0E825   OR SP, FP, ZERO
9D00285C  8FBF0014   LW RA, 20(SP)
9D002860  8FBE0010   LW FP, 16(SP)
9D002864  27BD0018   ADDIU SP, SP, 24
9D002868  03E00008   JR RA
9D00286C  00000000   NOP
---  c:/users/james/desktop/ece13/jensming/lab09/lab9.x/fieldtest.c  ------------------------------------
1:                   /* 
2:                    * File:   FieldTest.c
3:                    * Author: James Ensminger (jensming@ucsc.edu)
4:                    *
5:                    * Created on March 8, 2022, 12:49 AM
6:                    */
7:                   
8:                   
9:                   // Standard libraries
10:                  #include <stdio.h>
11:                  #include <string.h>
12:                  
13:                  // User libraries
14:                  #include "Field.h"
15:                  #include "BOARD.h"
16:                  #include "Uart1.h"
17:                  
18:                  
19:                  // **** Define any module-level, global, or external variables here ****
20:                  #define FPI 1 // used to test FieldPrint_UART() and FieldInit()
21:                  #define FGS 1 // used to test FieldGetSquareStatus() and FieldSetSquareStatus()
22:                  #define FAB 1 // used to test FieldAddBoat()
23:                  #define FAPAB 1 // used to test FieldPlaceAllBoats()
24:                  #define FGP 1 // used to test remaining field gameplay functions
25:                  static Field agent; // own field to test
26:                  static Field opponent; // opponent field to test
27:                  static GuessData oppGuess; // opponent's guess
28:                  static SquareStatus fieldStatus; // holds status of particular field square
29:                  
30:                  
31:                  int main ()
32:                  {
33:                      BOARD_Init();
34:                      
35:                      printf("Testing Field functions:\n\n");
36:                      
37:                  #if FPI
38:                      printf("FieldInit() and FieldPrint_UART()\n");
39:                      
40:                      // testing to see if fields are initialized properly
41:                      FieldInit(&agent, &opponent);
42:                      printf("Result should print agent's field with FIELD_SQUARE_EMPTY squares and "
43:                             "opponent's field with FIELD_SQUARE_UNKOWN squares:\n\n");
44:                      FieldPrint_UART(&agent, &opponent);
45:                  #endif
46:                      
47:                  #if FGS
48:                      printf("FieldGetSquareStatus() and FieldSetSquareStatus()\n");
49:                      
50:                      // testing for getting and setting squares on the field
51:                      FieldSetSquareStatus(&agent, 2, 3, FIELD_SQUARE_MEDIUM_BOAT);
52:                      FieldSetSquareStatus(&agent, 3, 3, FIELD_SQUARE_LARGE_BOAT);
53:                      if ((FieldGetSquareStatus(&agent, 2, 3) == FIELD_SQUARE_MEDIUM_BOAT) && 
54:                              (FieldGetSquareStatus(&agent, 3, 3) == FIELD_SQUARE_LARGE_BOAT))
55:                      {
56:                          printf("    Both are working!\n\n");
57:                      }
58:                      else
59:                      {
60:                          printf("    One or both aren't working.\n\n");
61:                      }
62:                      FieldSetSquareStatus(&agent, 2, 3, FIELD_SQUARE_EMPTY);
63:                      FieldSetSquareStatus(&agent, 3, 3, FIELD_SQUARE_EMPTY);
64:                  #endif
65:                      
66:                  #if FAB
67:                      printf("FieldAddBoat()\n");
68:                      
69:                      // testing to see if various boats were added to the field correctly
70:                      FieldAddBoat(&agent, 5, 2, FIELD_DIR_EAST, FIELD_BOAT_TYPE_SMALL);
71:                      FieldAddBoat(&agent, 4, 4, FIELD_DIR_SOUTH, FIELD_BOAT_TYPE_SMALL);
72:                      FieldAddBoat(&agent, 0, 1, FIELD_DIR_SOUTH, FIELD_BOAT_TYPE_MEDIUM);
73:                      FieldAddBoat(&agent, 0, 4, FIELD_DIR_EAST, FIELD_BOAT_TYPE_HUGE);
74:                      FieldAddBoat(&agent, 1, 7, FIELD_DIR_EAST, FIELD_BOAT_TYPE_HUGE);
75:                      printf("Result should print a horizontal small boat starting at (5, 2), a "
76:                             "vertical medium boat starting at (0, 1), and a horizontal huge boat "
77:                             "starting at (0, 4) while every field square remaining still empty:\n\n");
78:                      FieldPrint_UART(&agent, &opponent);
79:                      FieldInit(&agent, &opponent);
80:                  #endif
81:                      
82:                  #if FAPAB
83:                      printf("FieldAIPlaceAllBoats()\n");
84:                      
85:                      // testing to see if all boats were placed correctly in field
86:                      if (FieldAIPlaceAllBoats(&agent) == SUCCESS)
87:                      {
88:                          printf("    Successfully placed all boats in field!\n\n");
89:                          FieldPrint_UART(&agent, &opponent);
90:                      }
91:                      else
92:                      {
93:                          printf("    Failed to correctly place all boats in field.\n\n");
94:                      }
95:                  #endif
96:                      
97:                  #if FGP
98:                      printf("FieldRegisterEnemyAttack() and FieldAIDecideGuess()\n");
99:                      
100:                     // testing for valid AI guess and functioning registration of enemy attack
101:                     oppGuess = FieldAIDecideGuess(&opponent);
102:                     fieldStatus = FieldRegisterEnemyAttack(&agent, &oppGuess);
103:                     if (((fieldStatus == FIELD_SQUARE_EMPTY) && (oppGuess.result == RESULT_MISS)) || 
104:                             (fieldStatus != FieldGetSquareStatus(&agent, oppGuess.row, oppGuess.col)))
105:                     {
106:                         printf("    Both functions are working!\n\n");
107:                     }
108:                     else
109:                     {
110:                         printf("    Something isn't working.\n\n");
111:                     }
112:                     
113:                     printf("FieldUpdateKnowledge() and FieldGetBoatStates()\n");
114:                     
115:                     // testing to see if correct boat states were returned and if field knowledge
116:                     // was updated correctly
117:                     fieldStatus = FieldUpdateKnowledge(&opponent, &oppGuess);
118:                     if ((fieldStatus != FieldGetSquareStatus(&opponent, oppGuess.row, oppGuess.col)) && 
119:                             (FieldGetBoatStates(&agent) == 0b1111))
120:                     {
121:                         printf("    Both functions are working!\n\n");
122:                     }
123:                     else
124:                     {
125:                         printf("    Something went wrong.\n\n");
126:                     }
127:                 #endif
128:                     BOARD_End();
129:                     while (1);
130:                 }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D006540  27BDFFD8   ADDIU SP, SP, -40
9D006544  AFBF0024   SW RA, 36(SP)
9D006548  AFBE0020   SW FP, 32(SP)
9D00654C  03A0F025   OR FP, SP, ZERO
9D006550  0F401838   JAL BOARD_Init
9D006554  00000000   NOP
9D006558  3C029D00   LUI V0, -25344
9D00655C  24447170   ADDIU A0, V0, 29040
9D006560  0F4023DD   JAL puts
9D006564  00000000   NOP
9D006568  3C029D00   LUI V0, -25344
9D00656C  2444718C   ADDIU A0, V0, 29068
9D006570  0F4023DD   JAL puts
9D006574  00000000   NOP
9D006578  3C02A000   LUI V0, -24576
9D00657C  24450EB0   ADDIU A1, V0, 3760
9D006580  3C02A000   LUI V0, -24576
9D006584  24440E70   ADDIU A0, V0, 3696
9D006588  0F400063   JAL FieldInit
9D00658C  00000000   NOP
9D006590  3C029D00   LUI V0, -25344
9D006594  244471B0   ADDIU A0, V0, 29104
9D006598  0F4023DD   JAL puts
9D00659C  00000000   NOP
9D0065A0  3C02A000   LUI V0, -24576
9D0065A4  24450EB0   ADDIU A1, V0, 3760
9D0065A8  3C02A000   LUI V0, -24576
9D0065AC  24440E70   ADDIU A0, V0, 3696
9D0065B0  0F400000   JAL FieldPrint_UART
9D0065B4  00000000   NOP
9D0065B8  3C029D00   LUI V0, -25344
9D0065BC  2444722C   ADDIU A0, V0, 29228
9D0065C0  0F4023DD   JAL puts
9D0065C4  00000000   NOP
9D0065C8  24070002   ADDIU A3, ZERO, 2
9D0065CC  24060003   ADDIU A2, ZERO, 3
9D0065D0  24050002   ADDIU A1, ZERO, 2
9D0065D4  3C02A000   LUI V0, -24576
9D0065D8  24440E70   ADDIU A0, V0, 3696
9D0065DC  0F4000C6   JAL FieldSetSquareStatus
9D0065E0  00000000   NOP
9D0065E4  24070003   ADDIU A3, ZERO, 3
9D0065E8  24060003   ADDIU A2, ZERO, 3
9D0065EC  24050003   ADDIU A1, ZERO, 3
9D0065F0  3C02A000   LUI V0, -24576
9D0065F4  24440E70   ADDIU A0, V0, 3696
9D0065F8  0F4000C6   JAL FieldSetSquareStatus
9D0065FC  00000000   NOP
9D006600  24060003   ADDIU A2, ZERO, 3
9D006604  24050002   ADDIU A1, ZERO, 2
9D006608  3C02A000   LUI V0, -24576
9D00660C  24440E70   ADDIU A0, V0, 3696
9D006610  0F4000A3   JAL FieldGetSquareStatus
9D006614  00000000   NOP
9D006618  00401825   OR V1, V0, ZERO
9D00661C  24020002   ADDIU V0, ZERO, 2
9D006620  14620011   BNE V1, V0, 0x9D006668
9D006624  00000000   NOP
9D006628  24060003   ADDIU A2, ZERO, 3
9D00662C  24050003   ADDIU A1, ZERO, 3
9D006630  3C02A000   LUI V0, -24576
9D006634  24440E70   ADDIU A0, V0, 3696
9D006638  0F4000A3   JAL FieldGetSquareStatus
9D00663C  00000000   NOP
9D006640  00401825   OR V1, V0, ZERO
9D006644  24020003   ADDIU V0, ZERO, 3
9D006648  14620007   BNE V1, V0, 0x9D006668
9D00664C  00000000   NOP
9D006650  3C029D00   LUI V0, -25344
9D006654  24447260   ADDIU A0, V0, 29280
9D006658  0F4023DD   JAL puts
9D00665C  00000000   NOP
9D006660  10000005   BEQ ZERO, ZERO, 0x9D006678
9D006664  00000000   NOP
9D006668  3C029D00   LUI V0, -25344
9D00666C  24447278   ADDIU A0, V0, 29304
9D006670  0F4023DD   JAL puts
9D006674  00000000   NOP
9D006678  00003825   OR A3, ZERO, ZERO
9D00667C  24060003   ADDIU A2, ZERO, 3
9D006680  24050002   ADDIU A1, ZERO, 2
9D006684  3C02A000   LUI V0, -24576
9D006688  24440E70   ADDIU A0, V0, 3696
9D00668C  0F4000C6   JAL FieldSetSquareStatus
9D006690  00000000   NOP
9D006694  00003825   OR A3, ZERO, ZERO
9D006698  24060003   ADDIU A2, ZERO, 3
9D00669C  24050003   ADDIU A1, ZERO, 3
9D0066A0  3C02A000   LUI V0, -24576
9D0066A4  24440E70   ADDIU A0, V0, 3696
9D0066A8  0F4000C6   JAL FieldSetSquareStatus
9D0066AC  00000000   NOP
9D0066B0  3C029D00   LUI V0, -25344
9D0066B4  2444729C   ADDIU A0, V0, 29340
9D0066B8  0F4023DD   JAL puts
9D0066BC  00000000   NOP
9D0066C0  AFA00010   SW ZERO, 16(SP)
9D0066C4  24070001   ADDIU A3, ZERO, 1
9D0066C8  24060002   ADDIU A2, ZERO, 2
9D0066CC  24050005   ADDIU A1, ZERO, 5
9D0066D0  3C02A000   LUI V0, -24576
9D0066D4  24440E70   ADDIU A0, V0, 3696
9D0066D8  0F4000ED   JAL FieldAddBoat
9D0066DC  00000000   NOP
9D0066E0  AFA00010   SW ZERO, 16(SP)
9D0066E4  00003825   OR A3, ZERO, ZERO
9D0066E8  24060004   ADDIU A2, ZERO, 4
9D0066EC  24050004   ADDIU A1, ZERO, 4
9D0066F0  3C02A000   LUI V0, -24576
9D0066F4  24440E70   ADDIU A0, V0, 3696
9D0066F8  0F4000ED   JAL FieldAddBoat
9D0066FC  00000000   NOP
9D006700  24020001   ADDIU V0, ZERO, 1
9D006704  AFA20010   SW V0, 16(SP)
9D006708  00003825   OR A3, ZERO, ZERO
9D00670C  24060001   ADDIU A2, ZERO, 1
9D006710  00002825   OR A1, ZERO, ZERO
9D006714  3C02A000   LUI V0, -24576
9D006718  24440E70   ADDIU A0, V0, 3696
9D00671C  0F4000ED   JAL FieldAddBoat
9D006720  00000000   NOP
9D006724  24020003   ADDIU V0, ZERO, 3
9D006728  AFA20010   SW V0, 16(SP)
9D00672C  24070001   ADDIU A3, ZERO, 1
9D006730  24060004   ADDIU A2, ZERO, 4
9D006734  00002825   OR A1, ZERO, ZERO
9D006738  3C02A000   LUI V0, -24576
9D00673C  24440E70   ADDIU A0, V0, 3696
9D006740  0F4000ED   JAL FieldAddBoat
9D006744  00000000   NOP
9D006748  24020003   ADDIU V0, ZERO, 3
9D00674C  AFA20010   SW V0, 16(SP)
9D006750  24070001   ADDIU A3, ZERO, 1
9D006754  24060007   ADDIU A2, ZERO, 7
9D006758  24050001   ADDIU A1, ZERO, 1
9D00675C  3C02A000   LUI V0, -24576
9D006760  24440E70   ADDIU A0, V0, 3696
9D006764  0F4000ED   JAL FieldAddBoat
9D006768  00000000   NOP
9D00676C  3C029D00   LUI V0, -25344
9D006770  244472AC   ADDIU A0, V0, 29356
9D006774  0F4023DD   JAL puts
9D006778  00000000   NOP
9D00677C  3C02A000   LUI V0, -24576
9D006780  24450EB0   ADDIU A1, V0, 3760
9D006784  3C02A000   LUI V0, -24576
9D006788  24440E70   ADDIU A0, V0, 3696
9D00678C  0F400000   JAL FieldPrint_UART
9D006790  00000000   NOP
9D006794  3C02A000   LUI V0, -24576
9D006798  24450EB0   ADDIU A1, V0, 3760
9D00679C  3C02A000   LUI V0, -24576
9D0067A0  24440E70   ADDIU A0, V0, 3696
9D0067A4  0F400063   JAL FieldInit
9D0067A8  00000000   NOP
9D0067AC  3C029D00   LUI V0, -25344
9D0067B0  24447378   ADDIU A0, V0, 29560
9D0067B4  0F4023DD   JAL puts
9D0067B8  00000000   NOP
9D0067BC  3C02A000   LUI V0, -24576
9D0067C0  24440E70   ADDIU A0, V0, 3696
9D0067C4  0F4003DB   JAL FieldAIPlaceAllBoats
9D0067C8  00000000   NOP
9D0067CC  00401825   OR V1, V0, ZERO
9D0067D0  24020001   ADDIU V0, ZERO, 1
9D0067D4  1462000D   BNE V1, V0, 0x9D00680C
9D0067D8  00000000   NOP
9D0067DC  3C029D00   LUI V0, -25344
9D0067E0  24447390   ADDIU A0, V0, 29584
9D0067E4  0F4023DD   JAL puts
9D0067E8  00000000   NOP
9D0067EC  3C02A000   LUI V0, -24576
9D0067F0  24450EB0   ADDIU A1, V0, 3760
9D0067F4  3C02A000   LUI V0, -24576
9D0067F8  24440E70   ADDIU A0, V0, 3696
9D0067FC  0F400000   JAL FieldPrint_UART
9D006800  00000000   NOP
9D006804  10000005   BEQ ZERO, ZERO, 0x9D00681C
9D006808  00000000   NOP
9D00680C  3C029D00   LUI V0, -25344
9D006810  244473C0   ADDIU A0, V0, 29632
9D006814  0F4023DD   JAL puts
9D006818  00000000   NOP
9D00681C  3C029D00   LUI V0, -25344
9D006820  244473F4   ADDIU A0, V0, 29684
9D006824  0F4023DD   JAL puts
9D006828  00000000   NOP
9D00682C  3C02A000   LUI V0, -24576
9D006830  24450EB0   ADDIU A1, V0, 3760
9D006834  27C20018   ADDIU V0, FP, 24
9D006838  00402025   OR A0, V0, ZERO
9D00683C  0F400478   JAL FieldAIDecideGuess
9D006840  00000000   NOP
9D006844  8FC30018   LW V1, 24(FP)
9D006848  8FC2001C   LW V0, 28(FP)
9D00684C  AF838050   SW V1, -32688(GP)
9D006850  AF828054   SW V0, -32684(GP)
9D006854  27858050   ADDIU A1, GP, -32688
9D006858  3C02A000   LUI V0, -24576
9D00685C  24440E70   ADDIU A0, V0, 3696
9D006860  0F4001D1   JAL FieldRegisterEnemyAttack
9D006864  00000000   NOP
9D006868  AF828058   SW V0, -32680(GP)
9D00686C  8F828058   LW V0, -32680(GP)
9D006870  14400004   BNE V0, ZERO, 0x9D006884
9D006874  00000000   NOP
9D006878  8F828054   LW V0, -32684(GP)
9D00687C  1040000D   BEQ V0, ZERO, 0x9D0068B4
9D006880  00000000   NOP
9D006884  93828050   LBU V0, -32688(GP)
9D006888  93838051   LBU V1, -32687(GP)
9D00688C  00603025   OR A2, V1, ZERO
9D006890  00402825   OR A1, V0, ZERO
9D006894  3C02A000   LUI V0, -24576
9D006898  24440E70   ADDIU A0, V0, 3696
9D00689C  0F4000A3   JAL FieldGetSquareStatus
9D0068A0  00000000   NOP
9D0068A4  00401825   OR V1, V0, ZERO
9D0068A8  8F828058   LW V0, -32680(GP)
9D0068AC  10620007   BEQ V1, V0, 0x9D0068CC
9D0068B0  00000000   NOP
9D0068B4  3C029D00   LUI V0, -25344
9D0068B8  24447428   ADDIU A0, V0, 29736
9D0068BC  0F4023DD   JAL puts
9D0068C0  00000000   NOP
9D0068C4  10000005   BEQ ZERO, ZERO, 0x9D0068DC
9D0068C8  00000000   NOP
9D0068CC  3C029D00   LUI V0, -25344
9D0068D0  2444744C   ADDIU A0, V0, 29772
9D0068D4  0F4023DD   JAL puts
9D0068D8  00000000   NOP
9D0068DC  3C029D00   LUI V0, -25344
9D0068E0  2444746C   ADDIU A0, V0, 29804
9D0068E4  0F4023DD   JAL puts
9D0068E8  00000000   NOP
9D0068EC  27858050   ADDIU A1, GP, -32688
9D0068F0  3C02A000   LUI V0, -24576
9D0068F4  24440EB0   ADDIU A0, V0, 3760
9D0068F8  0F4002AA   JAL FieldUpdateKnowledge
9D0068FC  00000000   NOP
9D006900  AF828058   SW V0, -32680(GP)
9D006904  93828050   LBU V0, -32688(GP)
9D006908  93838051   LBU V1, -32687(GP)
9D00690C  00603025   OR A2, V1, ZERO
9D006910  00402825   OR A1, V0, ZERO
9D006914  3C02A000   LUI V0, -24576
9D006918  24440EB0   ADDIU A0, V0, 3760
9D00691C  0F4000A3   JAL FieldGetSquareStatus
9D006920  00000000   NOP
9D006924  00401825   OR V1, V0, ZERO
9D006928  8F828058   LW V0, -32680(GP)
9D00692C  1062000F   BEQ V1, V0, 0x9D00696C
9D006930  00000000   NOP
9D006934  3C02A000   LUI V0, -24576
9D006938  24440E70   ADDIU A0, V0, 3696
9D00693C  0F4003B0   JAL FieldGetBoatStates
9D006940  00000000   NOP
9D006944  00401825   OR V1, V0, ZERO
9D006948  2402000F   ADDIU V0, ZERO, 15
9D00694C  14620007   BNE V1, V0, 0x9D00696C
9D006950  00000000   NOP
9D006954  3C029D00   LUI V0, -25344
9D006958  24447428   ADDIU A0, V0, 29736
9D00695C  0F4023DD   JAL puts
9D006960  00000000   NOP
9D006964  10000005   BEQ ZERO, ZERO, 0x9D00697C
9D006968  00000000   NOP
9D00696C  3C029D00   LUI V0, -25344
9D006970  2444749C   ADDIU A0, V0, 29852
9D006974  0F4023DD   JAL puts
9D006978  00000000   NOP
9D00697C  0F401869   JAL BOARD_End
9D006980  00000000   NOP
9D006984  1000FFFF   BEQ ZERO, ZERO, 0x9D006984
9D006988  00000000   NOP
---  c:/users/james/desktop/ece13/jensming/lab09/lab9.x/fieldoled.c  ------------------------------------
1:                   
2:                   
3:                   #include "Oled.h"
4:                   #include "OledDriver.h"
5:                   #include "Field.h"
6:                   #include "FieldOled.h"
7:                   #include "Ascii.h"
8:                   
9:                   #define FIELD_SYMBOL_WIDTH 3
10:                  #define FIELD_SYMBOL_HEIGHT 4
11:                  const uint8_t gridSymbols[10][FIELD_SYMBOL_WIDTH] = {
12:                      [FIELD_SQUARE_EMPTY] =
13:                      {
14:                          0b0000,
15:                          0b0000,
16:                          0b0000,
17:                      },
18:                      [FIELD_SQUARE_SMALL_BOAT] =
19:                      {
20:                          0b1001,
21:                          0b1011,
22:                          0b1111,
23:                      },
24:                      [FIELD_SQUARE_MEDIUM_BOAT] =
25:                      { // 
26:                          0b0111,
27:                          0b0100,
28:                          0b1111,
29:                      },
30:                      [FIELD_SQUARE_LARGE_BOAT] =
31:                      { // 
32:                          0b1011,
33:                          0b1011,
34:                          0b1101,
35:                      },
36:                      [FIELD_SQUARE_HUGE_BOAT] =
37:                      { // 
38:                          0b1111,
39:                          0b1101,
40:                          0b1101,
41:                      },
42:                      [FIELD_SQUARE_UNKNOWN] =
43:                      { // 
44:                          0b1111,
45:                          0b1111,
46:                          0b1111,
47:                      },
48:                      [FIELD_SQUARE_HIT] =
49:                      { // 
50:                          0b1001,
51:                          0b0110,
52:                          0b1001,
53:                      },
54:                      [FIELD_SQUARE_MISS] =
55:                      { // 
56:                          0b0000,
57:                          0b0110,
58:                          0b0000,
59:                      },
60:                  
61:                      [FIELD_SQUARE_CURSOR] =
62:                      { // 
63:                          0b1111,
64:                          0b1001,
65:                          0b1111,
66:                      },
67:                  
68:                      [FIELD_SQUARE_INVALID] =
69:                      { // 
70:                          0b1111,
71:                          0b1111,
72:                          0b1111,
73:                      }
74:                  };
75:                  
76:                  uint8_t _FieldOledDrawSymbol(int x, int y, SquareStatus s);
77:                  void _FieldOledDrawField(const Field *f, int xOffset);
78:                  
79:                  void FieldOledDrawScreen(const Field *myField, const Field *theirField,
80:                          FieldOledTurn playerTurn, uint8_t turn_number)
81:                  {
82:                  #ifndef __MPLAB_DEBUGGER_SIMULATOR
83:                      OledClear(OLED_COLOR_BLACK);
84:                      _FieldOledDrawField(myField, 0);
85:                      if (theirField) {
86:                          _FieldOledDrawField(theirField, 76);
87:                      } else {
88:                          OledUpdate();
89:                          return;
90:                      }
91:                  
92:                      //draw inner artwork
93:                      OledDrawChar(53, 1, 'P');
94:                      OledDrawChar(76 - ASCII_FONT_WIDTH - 1, 1, 'O');
95:                      if (playerTurn == FIELD_OLED_TURN_MINE) {
96:                          OledDrawChar(53, ASCII_FONT_HEIGHT + 1, '<');
97:                      } else if (playerTurn == FIELD_OLED_TURN_THEIRS) {
98:                          OledDrawChar(76 - ASCII_FONT_WIDTH - 1, ASCII_FONT_HEIGHT + 1, '>');
99:                      }
100:                 
101:                     //draw turn number:
102:                     int x;
103:                     x = 76 - ASCII_FONT_WIDTH * 2;
104:                     OledDrawChar(x, ASCII_FONT_HEIGHT * 3, turn_number % 10 + '0');
105:                     x -= ASCII_FONT_WIDTH;
106:                     turn_number /= 10;
107:                     OledDrawChar(x, ASCII_FONT_HEIGHT * 3, turn_number % 10 + '0');
108:                 
109:                     OledUpdate();
110:                 #endif
111:                 }
112:                 
113:                 /**
114:                  * Draw the given player's grid at the given x-coordinate.
115:                  */
116:                 void _FieldOledDrawField(const Field *f, int xOffset)
117:                 {
118:                     int i;
119:                     int finalCol = 10 * 5 + 2;
120:                 
121:                     int finalRowOffset = (OLED_DRIVER_PIXEL_ROWS / OLED_DRIVER_BUFFER_LINE_HEIGHT - 1) *
122:                             OLED_DRIVER_PIXEL_COLUMNS;
123:                 
124:                     // Draw the horizontal grid borders.
125:                     for (i = 0; i < finalCol; ++i) {
126:                         rgbOledBmp[xOffset + i] |= 1;
127:                         rgbOledBmp[finalRowOffset + xOffset + i] |= 0x80;
128:                     }
129:                     // Draw the vertical grid borders.
130:                     for (i = 0; i < OLED_DRIVER_PIXEL_ROWS / OLED_DRIVER_BUFFER_LINE_HEIGHT; ++i) {
131:                         rgbOledBmp[i * OLED_DRIVER_PIXEL_COLUMNS + xOffset + 0] = 0xFF;
132:                         rgbOledBmp[i * OLED_DRIVER_PIXEL_COLUMNS + xOffset + finalCol - 1] = 0xFF;
133:                     }
134:                 
135:                     // Draw each item in the grid.
136:                     int yOffset = 2;
137:                     xOffset += 1;
138:                     for (i = 0; i < FIELD_COLS; ++i) {
139:                         int j;
140:                         for (j = 0; j < FIELD_ROWS; ++j) {
141:                             _FieldOledDrawSymbol(xOffset + 1 + 5 * i, yOffset + 5 * j, f->grid[j][i]);
142:                         }
143:                     }
144:                 }
145:                 
146:                 /**
147:                  * Draw the desired symbol at the given x/y coordinates.
148:                  */
149:                 uint8_t _FieldOledDrawSymbol(int x, int y, SquareStatus s)
150:                 {
151:                     if (x < OLED_DRIVER_PIXEL_COLUMNS - FIELD_SYMBOL_WIDTH && y < OLED_DRIVER_PIXEL_ROWS - FIELD_SYMBOL_HEIGHT) {
152:                         // Now first determine the columns and rows of the OLED bits that need to be modified
153:                         int rowMin, rowMax, colMin, colMax;
154:                         rowMin = y / OLED_DRIVER_BUFFER_LINE_HEIGHT;
155:                         int rowY = y % OLED_DRIVER_BUFFER_LINE_HEIGHT;
156:                         rowMax = (y + FIELD_SYMBOL_HEIGHT) / OLED_DRIVER_BUFFER_LINE_HEIGHT;
157:                         colMin = x;
158:                         colMax = x + FIELD_SYMBOL_WIDTH;
159:                         {
160:                             // Generate a positive mask for where in the column the new symbol will be drawn.
161:                             int colMask = ((1 << FIELD_SYMBOL_HEIGHT) - 1) << rowY;
162:                             int j;
163:                             for (j = 0; j < colMax - colMin; ++j) {
164:                                 int oledCol = colMin + j;
165:                                 uint8_t newCharCol = rgbOledBmp[rowMin * OLED_DRIVER_PIXEL_COLUMNS + oledCol] & ~colMask;
166:                                 // Make sure we always grab from the top part of the character.
167:                                 newCharCol |= (gridSymbols[(int) s][j] & (colMask >> rowY)) << rowY;
168:                                 rgbOledBmp[rowMin * OLED_DRIVER_PIXEL_COLUMNS + oledCol] = newCharCol;
169:                             }
170:                         }
171:                         if (rowMax > rowMin) {
172:                             // Generate a positive mask for where in the column the new symbol will be drawn.
173:                             // Since we need the lower portion of the symbol, we recalculate its height.
174:                             int colMask = ((1 << FIELD_SYMBOL_HEIGHT) - 1) >> (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY);
175:                             int j;
176:                             for (j = 0; j < colMax - colMin; ++j) {
177:                                 int oledCol = colMin + j;
178:                                 uint8_t newCharCol = rgbOledBmp[rowMax * OLED_DRIVER_PIXEL_COLUMNS + oledCol] & ~colMask;
179:                                 // Make sure we grab the proper part of the character from the font.
180:                                 newCharCol |= (gridSymbols[(int) s][j] & (colMask << (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY))) >>
181:                                         (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY);
182:                                 rgbOledBmp[rowMax * OLED_DRIVER_PIXEL_COLUMNS + oledCol] = newCharCol;
183:                             }
184:                         }
185:                     }
186:                 
187:                     return FALSE;
188:                 }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0055F8  27BDFFF8   ADDIU SP, SP, -8
9D0055FC  AFBE0004   SW FP, 4(SP)
9D005600  03A0F025   OR FP, SP, ZERO
9D005604  AFC40008   SW A0, 8(FP)
9D005608  AFC5000C   SW A1, 12(FP)
9D00560C  AFC60010   SW A2, 16(FP)
9D005610  00E01025   OR V0, A3, ZERO
9D005614  A3C20014   SB V0, 20(FP)
9D005618  00000000   NOP
9D00561C  03C0E825   OR SP, FP, ZERO
9D005620  8FBE0004   LW FP, 4(SP)
9D005624  27BD0008   ADDIU SP, SP, 8
9D005628  03E00008   JR RA
9D00562C  00000000   NOP
9D005630  27BDFFD0   ADDIU SP, SP, -48
9D005634  AFBF002C   SW RA, 44(SP)
9D005638  AFBE0028   SW FP, 40(SP)
9D00563C  03A0F025   OR FP, SP, ZERO
9D005640  AFC40030   SW A0, 48(FP)
9D005644  AFC50034   SW A1, 52(FP)
9D005648  24020034   ADDIU V0, ZERO, 52
9D00564C  AFC20018   SW V0, 24(FP)
9D005650  24020180   ADDIU V0, ZERO, 384
9D005654  AFC2001C   SW V0, 28(FP)
9D005658  AFC00010   SW ZERO, 16(FP)
9D00565C  10000029   BEQ ZERO, ZERO, 0x9D005704
9D005660  00000000   NOP
9D005664  8FC30034   LW V1, 52(FP)
9D005668  8FC20010   LW V0, 16(FP)
9D00566C  00621821   ADDU V1, V1, V0
9D005670  3C02A000   LUI V0, -24576
9D005674  24420260   ADDIU V0, V0, 608
9D005678  00621021   ADDU V0, V1, V0
9D00567C  90420000   LBU V0, 0(V0)
9D005680  8FC40034   LW A0, 52(FP)
9D005684  8FC30010   LW V1, 16(FP)
9D005688  00832021   ADDU A0, A0, V1
9D00568C  34420001   ORI V0, V0, 1
9D005690  304300FF   ANDI V1, V0, 255
9D005694  3C02A000   LUI V0, -24576
9D005698  24420260   ADDIU V0, V0, 608
9D00569C  00821021   ADDU V0, A0, V0
9D0056A0  A0430000   SB V1, 0(V0)
9D0056A4  8FC3001C   LW V1, 28(FP)
9D0056A8  8FC20034   LW V0, 52(FP)
9D0056AC  00621821   ADDU V1, V1, V0
9D0056B0  8FC20010   LW V0, 16(FP)
9D0056B4  00621821   ADDU V1, V1, V0
9D0056B8  3C02A000   LUI V0, -24576
9D0056BC  24420260   ADDIU V0, V0, 608
9D0056C0  00621021   ADDU V0, V1, V0
9D0056C4  90430000   LBU V1, 0(V0)
9D0056C8  8FC4001C   LW A0, 28(FP)
9D0056CC  8FC20034   LW V0, 52(FP)
9D0056D0  00822021   ADDU A0, A0, V0
9D0056D4  8FC20010   LW V0, 16(FP)
9D0056D8  00822021   ADDU A0, A0, V0
9D0056DC  2402FF80   ADDIU V0, ZERO, -128
9D0056E0  00621025   OR V0, V1, V0
9D0056E4  304300FF   ANDI V1, V0, 255
9D0056E8  3C02A000   LUI V0, -24576
9D0056EC  24420260   ADDIU V0, V0, 608
9D0056F0  00821021   ADDU V0, A0, V0
9D0056F4  A0430000   SB V1, 0(V0)
9D0056F8  8FC20010   LW V0, 16(FP)
9D0056FC  24420001   ADDIU V0, V0, 1
9D005700  AFC20010   SW V0, 16(FP)
9D005704  8FC30010   LW V1, 16(FP)
9D005708  8FC20018   LW V0, 24(FP)
9D00570C  0062102A   SLT V0, V1, V0
9D005710  1440FFD4   BNE V0, ZERO, 0x9D005664
9D005714  00000000   NOP
9D005718  AFC00010   SW ZERO, 16(FP)
9D00571C  10000019   BEQ ZERO, ZERO, 0x9D005784
9D005720  00000000   NOP
9D005724  8FC20010   LW V0, 16(FP)
9D005728  000219C0   SLL V1, V0, 7
9D00572C  8FC20034   LW V0, 52(FP)
9D005730  00621821   ADDU V1, V1, V0
9D005734  3C02A000   LUI V0, -24576
9D005738  24420260   ADDIU V0, V0, 608
9D00573C  00621021   ADDU V0, V1, V0
9D005740  2403FFFF   ADDIU V1, ZERO, -1
9D005744  A0430000   SB V1, 0(V0)
9D005748  8FC20010   LW V0, 16(FP)
9D00574C  000219C0   SLL V1, V0, 7
9D005750  8FC20034   LW V0, 52(FP)
9D005754  00621821   ADDU V1, V1, V0
9D005758  8FC20018   LW V0, 24(FP)
9D00575C  00621021   ADDU V0, V1, V0
9D005760  2443FFFF   ADDIU V1, V0, -1
9D005764  3C02A000   LUI V0, -24576
9D005768  24420260   ADDIU V0, V0, 608
9D00576C  00621021   ADDU V0, V1, V0
9D005770  2403FFFF   ADDIU V1, ZERO, -1
9D005774  A0430000   SB V1, 0(V0)
9D005778  8FC20010   LW V0, 16(FP)
9D00577C  24420001   ADDIU V0, V0, 1
9D005780  AFC20010   SW V0, 16(FP)
9D005784  8FC20010   LW V0, 16(FP)
9D005788  28420004   SLTI V0, V0, 4
9D00578C  1440FFE5   BNE V0, ZERO, 0x9D005724
9D005790  00000000   NOP
9D005794  24020002   ADDIU V0, ZERO, 2
9D005798  AFC20020   SW V0, 32(FP)
9D00579C  8FC20034   LW V0, 52(FP)
9D0057A0  24420001   ADDIU V0, V0, 1
9D0057A4  AFC20034   SW V0, 52(FP)
9D0057A8  AFC00010   SW ZERO, 16(FP)
9D0057AC  10000029   BEQ ZERO, ZERO, 0x9D005854
9D0057B0  00000000   NOP
9D0057B4  AFC00014   SW ZERO, 20(FP)
9D0057B8  1000001F   BEQ ZERO, ZERO, 0x9D005838
9D0057BC  00000000   NOP
9D0057C0  8FC20034   LW V0, 52(FP)
9D0057C4  24440001   ADDIU A0, V0, 1
9D0057C8  8FC30010   LW V1, 16(FP)
9D0057CC  00601025   OR V0, V1, ZERO
9D0057D0  00021080   SLL V0, V0, 2
9D0057D4  00431021   ADDU V0, V0, V1
9D0057D8  00823821   ADDU A3, A0, V0
9D0057DC  8FC30014   LW V1, 20(FP)
9D0057E0  00601025   OR V0, V1, ZERO
9D0057E4  00021080   SLL V0, V0, 2
9D0057E8  00431821   ADDU V1, V0, V1
9D0057EC  8FC20020   LW V0, 32(FP)
9D0057F0  00622821   ADDU A1, V1, V0
9D0057F4  8FC40030   LW A0, 48(FP)
9D0057F8  8FC30014   LW V1, 20(FP)
9D0057FC  00601025   OR V0, V1, ZERO
9D005800  00021080   SLL V0, V0, 2
9D005804  00431021   ADDU V0, V0, V1
9D005808  00021040   SLL V0, V0, 1
9D00580C  00821821   ADDU V1, A0, V0
9D005810  8FC20010   LW V0, 16(FP)
9D005814  00621021   ADDU V0, V1, V0
9D005818  90420000   LBU V0, 0(V0)
9D00581C  00403025   OR A2, V0, ZERO
9D005820  00E02025   OR A0, A3, ZERO
9D005824  0F401620   JAL _FieldOledDrawSymbol
9D005828  00000000   NOP
9D00582C  8FC20014   LW V0, 20(FP)
9D005830  24420001   ADDIU V0, V0, 1
9D005834  AFC20014   SW V0, 20(FP)
9D005838  8FC20014   LW V0, 20(FP)
9D00583C  28420006   SLTI V0, V0, 6
9D005840  1440FFDF   BNE V0, ZERO, 0x9D0057C0
9D005844  00000000   NOP
9D005848  8FC20010   LW V0, 16(FP)
9D00584C  24420001   ADDIU V0, V0, 1
9D005850  AFC20010   SW V0, 16(FP)
9D005854  8FC20010   LW V0, 16(FP)
9D005858  2842000A   SLTI V0, V0, 10
9D00585C  1440FFD5   BNE V0, ZERO, 0x9D0057B4
9D005860  00000000   NOP
9D005864  00000000   NOP
9D005868  03C0E825   OR SP, FP, ZERO
9D00586C  8FBF002C   LW RA, 44(SP)
9D005870  8FBE0028   LW FP, 40(SP)
9D005874  27BD0030   ADDIU SP, SP, 48
9D005878  03E00008   JR RA
9D00587C  00000000   NOP
9D005880  27BDFFC0   ADDIU SP, SP, -64
9D005884  AFBE003C   SW FP, 60(SP)
9D005888  03A0F025   OR FP, SP, ZERO
9D00588C  AFC40040   SW A0, 64(FP)
9D005890  AFC50044   SW A1, 68(FP)
9D005894  AFC60048   SW A2, 72(FP)
9D005898  8FC20040   LW V0, 64(FP)
9D00589C  2842007D   SLTI V0, V0, 125
9D0058A0  104000B1   BEQ V0, ZERO, 0x9D005B68
9D0058A4  00000000   NOP
9D0058A8  8FC20044   LW V0, 68(FP)
9D0058AC  2842001C   SLTI V0, V0, 28
9D0058B0  104000AD   BEQ V0, ZERO, 0x9D005B68
9D0058B4  00000000   NOP
9D0058B8  8FC20044   LW V0, 68(FP)
9D0058BC  24430007   ADDIU V1, V0, 7
9D0058C0  28440000   SLTI A0, V0, 0
9D0058C4  0064100B   MOVN V0, V1, A0
9D0058C8  000210C3   SRA V0, V0, 3
9D0058CC  AFC20008   SW V0, 8(FP)
9D0058D0  8FC30044   LW V1, 68(FP)
9D0058D4  000317C3   SRA V0, V1, 31
9D0058D8  00021742   SRL V0, V0, 29
9D0058DC  00621821   ADDU V1, V1, V0
9D0058E0  30630007   ANDI V1, V1, 7
9D0058E4  00621023   SUBU V0, V1, V0
9D0058E8  AFC2000C   SW V0, 12(FP)
9D0058EC  8FC20044   LW V0, 68(FP)
9D0058F0  24420004   ADDIU V0, V0, 4
9D0058F4  24430007   ADDIU V1, V0, 7
9D0058F8  28440000   SLTI A0, V0, 0
9D0058FC  0064100B   MOVN V0, V1, A0
9D005900  000210C3   SRA V0, V0, 3
9D005904  AFC20010   SW V0, 16(FP)
9D005908  8FC20040   LW V0, 64(FP)
9D00590C  AFC20014   SW V0, 20(FP)
9D005910  8FC20040   LW V0, 64(FP)
9D005914  24420003   ADDIU V0, V0, 3
9D005918  AFC20018   SW V0, 24(FP)
9D00591C  2403000F   ADDIU V1, ZERO, 15
9D005920  8FC2000C   LW V0, 12(FP)
9D005924  00431004   SLLV V0, V1, V0
9D005928  AFC2001C   SW V0, 28(FP)
9D00592C  AFC00000   SW ZERO, 0(FP)
9D005930  10000037   BEQ ZERO, ZERO, 0x9D005A10
9D005934  00000000   NOP
9D005938  8FC30014   LW V1, 20(FP)
9D00593C  8FC20000   LW V0, 0(FP)
9D005940  00621021   ADDU V0, V1, V0
9D005944  AFC20020   SW V0, 32(FP)
9D005948  8FC20008   LW V0, 8(FP)
9D00594C  000219C0   SLL V1, V0, 7
9D005950  8FC20020   LW V0, 32(FP)
9D005954  00621821   ADDU V1, V1, V0
9D005958  3C02A000   LUI V0, -24576
9D00595C  24420260   ADDIU V0, V0, 608
9D005960  00621021   ADDU V0, V1, V0
9D005964  90420000   LBU V0, 0(V0)
9D005968  7C021C20   SEB V1, V0
9D00596C  8FC2001C   LW V0, 28(FP)
9D005970  7C021420   SEB V0, V0
9D005974  00021027   NOR V0, ZERO, V0
9D005978  7C021420   SEB V0, V0
9D00597C  00621024   AND V0, V1, V0
9D005980  7C021420   SEB V0, V0
9D005984  A3C20024   SB V0, 36(FP)
9D005988  8FC30048   LW V1, 72(FP)
9D00598C  3C049D01   LUI A0, -25343
9D005990  00601025   OR V0, V1, ZERO
9D005994  00021040   SLL V0, V0, 1
9D005998  00431021   ADDU V0, V0, V1
9D00599C  2483913C   ADDIU V1, A0, -28356
9D0059A0  00431821   ADDU V1, V0, V1
9D0059A4  8FC20000   LW V0, 0(FP)
9D0059A8  00621021   ADDU V0, V1, V0
9D0059AC  90420000   LBU V0, 0(V0)
9D0059B0  00402025   OR A0, V0, ZERO
9D0059B4  8FC3001C   LW V1, 28(FP)
9D0059B8  8FC2000C   LW V0, 12(FP)
9D0059BC  00431007   SRAV V0, V1, V0
9D0059C0  00821824   AND V1, A0, V0
9D0059C4  8FC2000C   LW V0, 12(FP)
9D0059C8  00431004   SLLV V0, V1, V0
9D0059CC  7C021C20   SEB V1, V0
9D0059D0  83C20024   LB V0, 36(FP)
9D0059D4  00621025   OR V0, V1, V0
9D0059D8  7C021420   SEB V0, V0
9D0059DC  A3C20024   SB V0, 36(FP)
9D0059E0  8FC20008   LW V0, 8(FP)
9D0059E4  000219C0   SLL V1, V0, 7
9D0059E8  8FC20020   LW V0, 32(FP)
9D0059EC  00621821   ADDU V1, V1, V0
9D0059F0  3C02A000   LUI V0, -24576
9D0059F4  24420260   ADDIU V0, V0, 608
9D0059F8  00621021   ADDU V0, V1, V0
9D0059FC  93C30024   LBU V1, 36(FP)
9D005A00  A0430000   SB V1, 0(V0)
9D005A04  8FC20000   LW V0, 0(FP)
9D005A08  24420001   ADDIU V0, V0, 1
9D005A0C  AFC20000   SW V0, 0(FP)
9D005A10  8FC30018   LW V1, 24(FP)
9D005A14  8FC20014   LW V0, 20(FP)
9D005A18  00621023   SUBU V0, V1, V0
9D005A1C  8FC30000   LW V1, 0(FP)
9D005A20  0062102A   SLT V0, V1, V0
9D005A24  1440FFC4   BNE V0, ZERO, 0x9D005938
9D005A28  00000000   NOP
9D005A2C  8FC30010   LW V1, 16(FP)
9D005A30  8FC20008   LW V0, 8(FP)
9D005A34  0043102A   SLT V0, V0, V1
9D005A38  1040004B   BEQ V0, ZERO, 0x9D005B68
9D005A3C  00000000   NOP
9D005A40  24030008   ADDIU V1, ZERO, 8
9D005A44  8FC2000C   LW V0, 12(FP)
9D005A48  00621023   SUBU V0, V1, V0
9D005A4C  2403000F   ADDIU V1, ZERO, 15
9D005A50  00431007   SRAV V0, V1, V0
9D005A54  AFC20028   SW V0, 40(FP)
9D005A58  AFC00004   SW ZERO, 4(FP)
9D005A5C  1000003B   BEQ ZERO, ZERO, 0x9D005B4C
9D005A60  00000000   NOP
9D005A64  8FC30014   LW V1, 20(FP)
9D005A68  8FC20004   LW V0, 4(FP)
9D005A6C  00621021   ADDU V0, V1, V0
9D005A70  AFC2002C   SW V0, 44(FP)
9D005A74  8FC20010   LW V0, 16(FP)
9D005A78  000219C0   SLL V1, V0, 7
9D005A7C  8FC2002C   LW V0, 44(FP)
9D005A80  00621821   ADDU V1, V1, V0
9D005A84  3C02A000   LUI V0, -24576
9D005A88  24420260   ADDIU V0, V0, 608
9D005A8C  00621021   ADDU V0, V1, V0
9D005A90  90420000   LBU V0, 0(V0)
9D005A94  7C021C20   SEB V1, V0
9D005A98  8FC20028   LW V0, 40(FP)
9D005A9C  7C021420   SEB V0, V0
9D005AA0  00021027   NOR V0, ZERO, V0
9D005AA4  7C021420   SEB V0, V0
9D005AA8  00621024   AND V0, V1, V0
9D005AAC  7C021420   SEB V0, V0
9D005AB0  A3C20030   SB V0, 48(FP)
9D005AB4  8FC30048   LW V1, 72(FP)
9D005AB8  3C049D01   LUI A0, -25343
9D005ABC  00601025   OR V0, V1, ZERO
9D005AC0  00021040   SLL V0, V0, 1
9D005AC4  00431021   ADDU V0, V0, V1
9D005AC8  2483913C   ADDIU V1, A0, -28356
9D005ACC  00431821   ADDU V1, V0, V1
9D005AD0  8FC20004   LW V0, 4(FP)
9D005AD4  00621021   ADDU V0, V1, V0
9D005AD8  90420000   LBU V0, 0(V0)
9D005ADC  00402025   OR A0, V0, ZERO
9D005AE0  24030008   ADDIU V1, ZERO, 8
9D005AE4  8FC2000C   LW V0, 12(FP)
9D005AE8  00621023   SUBU V0, V1, V0
9D005AEC  8FC30028   LW V1, 40(FP)
9D005AF0  00431004   SLLV V0, V1, V0
9D005AF4  00821824   AND V1, A0, V0
9D005AF8  24040008   ADDIU A0, ZERO, 8
9D005AFC  8FC2000C   LW V0, 12(FP)
9D005B00  00821023   SUBU V0, A0, V0
9D005B04  00431007   SRAV V0, V1, V0
9D005B08  7C021C20   SEB V1, V0
9D005B0C  83C20030   LB V0, 48(FP)
9D005B10  00621025   OR V0, V1, V0
9D005B14  7C021420   SEB V0, V0
9D005B18  A3C20030   SB V0, 48(FP)
9D005B1C  8FC20010   LW V0, 16(FP)
9D005B20  000219C0   SLL V1, V0, 7
9D005B24  8FC2002C   LW V0, 44(FP)
9D005B28  00621821   ADDU V1, V1, V0
9D005B2C  3C02A000   LUI V0, -24576
9D005B30  24420260   ADDIU V0, V0, 608
9D005B34  00621021   ADDU V0, V1, V0
9D005B38  93C30030   LBU V1, 48(FP)
9D005B3C  A0430000   SB V1, 0(V0)
9D005B40  8FC20004   LW V0, 4(FP)
9D005B44  24420001   ADDIU V0, V0, 1
9D005B48  AFC20004   SW V0, 4(FP)
9D005B4C  8FC30018   LW V1, 24(FP)
9D005B50  8FC20014   LW V0, 20(FP)
9D005B54  00621023   SUBU V0, V1, V0
9D005B58  8FC30004   LW V1, 4(FP)
9D005B5C  0062102A   SLT V0, V1, V0
9D005B60  1440FFC0   BNE V0, ZERO, 0x9D005A64
9D005B64  00000000   NOP
9D005B68  00001025   OR V0, ZERO, ZERO
9D005B6C  03C0E825   OR SP, FP, ZERO
9D005B70  8FBE003C   LW FP, 60(SP)
9D005B74  27BD0040   ADDIU SP, SP, 64
9D005B78  03E00008   JR RA
9D005B7C  00000000   NOP
---  c:/users/james/desktop/ece13/jensming/lab09/lab9.x/field.c  ----------------------------------------
1:                   /* 
2:                    * File:   Field.c
3:                    * Author: James Ensminger (jensming@ucsc.edu)
4:                    *
5:                    * Created on March 6, 2022, 1:02 PM
6:                    */
7:                   
8:                   
9:                   // Standard libraries
10:                  #include <stdio.h>
11:                  #include <string.h>
12:                  #include <time.h>
13:                  
14:                  // User libraries
15:                  #include "Field.h"
16:                  #include "BOARD.h"
17:                  
18:                  
19:                  // **** Define any module-level, global, or external variables here ****
20:                  SquareStatus prevStatus; // holds previous value at a particular field location
21:                  SquareStatus squareType; // holds type of square at particular field location
22:                  static int boatLen; // holds length of boat that's being added to field
23:                  static uint8_t boatState; // tracks which boats are still alive in the field
24:                  static uint8_t smallCheck, mediumCheck, 
25:                                 largeCheck, hugeCheck; // tracks successful placement of boats in the field
26:                  static uint8_t rowRand, colRand, dirRand; // hold randomly generated numbers used in FieldAIPlaceAllBoats()
27:                  static GuessData guessData; // holds coordinates and result from a guess made
28:                  static int seed = 0; // seed for random number generator
29:                  
30:                  
31:                  // **** Declared function prototypes ****
32:                  void FieldPrint_UART(Field *own_field, Field * opp_field);
33:                  void FieldInit(Field *own_field, Field * opp_field);
34:                  SquareStatus FieldGetSquareStatus(const Field *f, uint8_t row, uint8_t col);
35:                  SquareStatus FieldSetSquareStatus(Field *f, uint8_t row, uint8_t col, SquareStatus p);
36:                  uint8_t FieldAddBoat(Field *own_field, uint8_t row, uint8_t col, BoatDirection dir, BoatType boat_type);
37:                  SquareStatus FieldRegisterEnemyAttack(Field *own_field, GuessData *opp_guess);
38:                  SquareStatus FieldUpdateKnowledge(Field *opp_field, const GuessData *own_guess);
39:                  uint8_t FieldGetBoatStates(const Field *f);
40:                  uint8_t FieldAIPlaceAllBoats(Field *own_field);
41:                  GuessData FieldAIDecideGuess(const Field *opp_field);
42:                  
43:                  /********************************************************************************
44:                   * Defined FieldPrint_UART function.
45:                   ********************************************************************************/
46:                  void FieldPrint_UART(Field *own_field, Field * opp_field)
47:                  {
48:                      // print out agent's field
49:                      for (int r = 0; r < FIELD_ROWS; r++)
50:                      {
51:                          for (int c = 0; c < FIELD_COLS; c++)
52:                          {
53:                              printf("%d ", own_field->grid[r][c]);
54:                          }
55:                          if (r == (FIELD_ROWS - 1))
56:                          {
57:                              printf("\n\n");
58:                          }
59:                          else
60:                          {
61:                              printf("\n");
62:                          }
63:                      }
64:                      
65:                      // print out opponent's field
66:                      for (int r = 0; r < FIELD_ROWS; r++)
67:                      {
68:                          for (int c = 0; c < FIELD_COLS; c++)
69:                          {
70:                              printf("%d ", opp_field->grid[r][c]);
71:                          }
72:                          printf("\n");
73:                      }
74:                  }
75:                  
76:                  /********************************************************************************
77:                   * Defined FieldInit function.
78:                   ********************************************************************************/
79:                  void FieldInit(Field *own_field, Field * opp_field)
80:                  {
81:                      // initialize both the agent and opponent fields' grids
82:                      for (int r = 0; r < FIELD_ROWS; r++)
83:                      {
84:                          for (int c = 0; c < FIELD_COLS; c++)
85:                          {
86:                              own_field->grid[r][c] = FIELD_SQUARE_EMPTY;
87:                              opp_field->grid[r][c] = FIELD_SQUARE_UNKNOWN;
88:                          }
89:                      }
90:                      
91:                      // initialize opponent's boat lives (will initialize agent's boat lives when 
92:                      // adding boats to field)
93:                      opp_field->hugeBoatLives = FIELD_BOAT_SIZE_HUGE;
94:                      opp_field->largeBoatLives = FIELD_BOAT_SIZE_LARGE;
95:                      opp_field->mediumBoatLives = FIELD_BOAT_SIZE_MEDIUM;
96:                      opp_field->smallBoatLives = FIELD_BOAT_SIZE_SMALL;
97:                  }
98:                  
99:                  /********************************************************************************
100:                  * Defined FieldGetSquareStatus function.
101:                  ********************************************************************************/
102:                 SquareStatus FieldGetSquareStatus(const Field *f, uint8_t row, uint8_t col)
103:                 {
104:                     // specified field location has to be within the field bounds to be valid
105:                     if (((row >= 0) && (row < FIELD_ROWS)) || ((col >= 0) && (col < FIELD_COLS)))
106:                     {
107:                         return f->grid[row][col];
108:                     }
109:                     else
110:                     {
111:                         return FIELD_SQUARE_INVALID;
112:                     }
113:                 }
114:                 
115:                 /********************************************************************************
116:                  * Defined FieldSetSquareStatus function.
117:                  ********************************************************************************/
118:                 SquareStatus FieldSetSquareStatus(Field *f, uint8_t row, uint8_t col, SquareStatus p)
119:                 {
120:                     // replace field location with new SquareStatus, return the old one
121:                     prevStatus = f->grid[row][col];
122:                     f->grid[row][col] = p;
123:                     return prevStatus;
124:                 }
125:                 
126:                 /********************************************************************************
127:                  * Defined FieldAddBoat function.
128:                  ********************************************************************************/
129:                 uint8_t FieldAddBoat(Field *own_field, uint8_t row, uint8_t col, BoatDirection dir, BoatType boat_type)
130:                 {
131:                     // check for valid row and col
132:                     if ((row < 0) || (row >= FIELD_ROWS) || (col < 0) || (col >= FIELD_COLS))
133:                     {
134:                         return STANDARD_ERROR;
135:                     }
136:                     
137:                     // set variables that will hold the field square type and boat length/lives,
138:                     // field square type is invalid and an error is returned otherwise
139:                     squareType = FIELD_SQUARE_INVALID;
140:                     boatLen = 0;
141:                     switch (boat_type)
142:                     {
143:                         case FIELD_BOAT_TYPE_SMALL:
144:                             squareType = FIELD_SQUARE_SMALL_BOAT;
145:                             boatLen = FIELD_BOAT_SIZE_SMALL;
146:                             own_field->smallBoatLives = boatLen;
147:                             break;
148:                             
149:                         case FIELD_BOAT_TYPE_MEDIUM:
150:                             squareType = FIELD_SQUARE_MEDIUM_BOAT;
151:                             boatLen = FIELD_BOAT_SIZE_MEDIUM;
152:                             own_field->mediumBoatLives = boatLen;
153:                             break;
154:                             
155:                         case FIELD_BOAT_TYPE_LARGE:
156:                             squareType = FIELD_SQUARE_LARGE_BOAT;
157:                             boatLen = FIELD_BOAT_SIZE_LARGE;
158:                             own_field->largeBoatLives = boatLen;
159:                             break;
160:                             
161:                         case FIELD_BOAT_TYPE_HUGE:
162:                             squareType = FIELD_SQUARE_HUGE_BOAT;
163:                             boatLen = FIELD_BOAT_SIZE_HUGE;
164:                             own_field->hugeBoatLives = boatLen;
165:                             break;
166:                             
167:                         default:
168:                             return STANDARD_ERROR;
169:                     }
170:                     
171:                     if (dir == FIELD_DIR_SOUTH)
172:                     {
173:                         // add boat type to positions on the field going in the FIELD_DIR_SOUTH 
174:                         // direction according to its size
175:                         if ((row + boatLen - 1) < FIELD_ROWS)
176:                         {
177:                             for (int r = 0; r < boatLen; r++)
178:                             {
179:                                 if (own_field->grid[row + r][col] != FIELD_SQUARE_EMPTY)
180:                                 {
181:                                     return STANDARD_ERROR;
182:                                 }
183:                             }
184:                             for (int r = 0; r < boatLen; r++)
185:                             {
186:                                 own_field->grid[row + r][col] = squareType;
187:                             }
188:                         }
189:                         else
190:                         {
191:                             return STANDARD_ERROR;
192:                         }
193:                     }
194:                     else if (dir == FIELD_DIR_EAST)
195:                     {
196:                         // add boat type to positions on the field going in the FIELD_DIR_EAST 
197:                         // direction according to its size
198:                         if ((col + boatLen - 1) < FIELD_COLS)
199:                         {
200:                             for (int c = 0; c < boatLen; c++)
201:                             {
202:                                 if (own_field->grid[row][col + c] != FIELD_SQUARE_EMPTY)
203:                                 {
204:                                     return STANDARD_ERROR;
205:                                 }
206:                             }
207:                             for (int c = 0; c < boatLen; c++)
208:                             {
209:                                 own_field->grid[row][col + c] = squareType;
210:                             }
211:                         }
212:                         else
213:                         {
214:                             return STANDARD_ERROR;
215:                         }
216:                     }
217:                     else
218:                     {
219:                         return STANDARD_ERROR;
220:                     }
221:                     
222:                     return SUCCESS;
223:                 }
224:                 
225:                 /********************************************************************************
226:                  * Defined FieldRegisterEnemyAttack function.
227:                  ********************************************************************************/
228:                 SquareStatus FieldRegisterEnemyAttack(Field *own_field, GuessData *opp_guess)
229:                 {
230:                     // obtain value of own field position before it was attacked
231:                     prevStatus = own_field->grid[opp_guess->row][opp_guess->col];
232:                     
233:                     // determine if a particular boat was hit or sunk, it's a miss otherwise
234:                     switch (own_field->grid[opp_guess->row][opp_guess->col])
235:                     {
236:                         case FIELD_SQUARE_SMALL_BOAT:
237:                             own_field->smallBoatLives--;
238:                             if (own_field->smallBoatLives > 0)
239:                             {
240:                                 opp_guess->result = RESULT_HIT;
241:                             }
242:                             else
243:                             {
244:                                 opp_guess->result = RESULT_SMALL_BOAT_SUNK;
245:                             }
246:                             own_field->grid[opp_guess->row][opp_guess->col] = FIELD_SQUARE_HIT;
247:                             break;
248:                             
249:                         case FIELD_SQUARE_MEDIUM_BOAT:
250:                             own_field->mediumBoatLives--;
251:                             if (own_field->mediumBoatLives > 0)
252:                             {
253:                                 opp_guess->result = RESULT_HIT;
254:                                 own_field->grid[opp_guess->row][opp_guess->col] = FIELD_SQUARE_HIT;
255:                             }
256:                             else
257:                             {
258:                                 opp_guess->result = RESULT_MEDIUM_BOAT_SUNK;
259:                             }
260:                             own_field->grid[opp_guess->row][opp_guess->col] = FIELD_SQUARE_HIT;
261:                             break;
262:                             
263:                         case FIELD_SQUARE_LARGE_BOAT:
264:                             own_field->largeBoatLives--;
265:                             if (own_field->largeBoatLives > 0)
266:                             {
267:                                 opp_guess->result = RESULT_HIT;
268:                             }
269:                             else
270:                             {
271:                                 opp_guess->result = RESULT_LARGE_BOAT_SUNK;
272:                             }
273:                             own_field->grid[opp_guess->row][opp_guess->col] = FIELD_SQUARE_HIT;
274:                             break;
275:                             
276:                         case FIELD_SQUARE_HUGE_BOAT:
277:                             own_field->hugeBoatLives--;
278:                             if (own_field->hugeBoatLives > 0)
279:                             {
280:                                 opp_guess->result = RESULT_HIT;
281:                             }
282:                             else
283:                             {
284:                                 opp_guess->result = RESULT_HUGE_BOAT_SUNK;
285:                             }
286:                             own_field->grid[opp_guess->row][opp_guess->col] = FIELD_SQUARE_HIT;
287:                             break;
288:                             
289:                         default:
290:                             opp_guess->result = RESULT_MISS;
291:                             break;
292:                     }
293:                     
294:                     return prevStatus;
295:                 }
296:                 
297:                 /********************************************************************************
298:                  * Defined FieldUpdateKnowledge function.
299:                  ********************************************************************************/
300:                 SquareStatus FieldUpdateKnowledge(Field *opp_field, const GuessData *own_guess)
301:                 {
302:                     // obtain value of opponent's field position before it was attacked
303:                     prevStatus = opp_field->grid[own_guess->row][own_guess->col];
304:                     
305:                     // determine if own guess is a hit or miss, plus check if a boat sinks due to hit
306:                     switch (opp_field->grid[own_guess->row][own_guess->col])
307:                     {
308:                         case FIELD_SQUARE_SMALL_BOAT:
309:                             opp_field->smallBoatLives--;
310:                             if ((opp_field->smallBoatLives > 0) || (opp_field->smallBoatLives == 0))
311:                             {
312:                                 opp_field->grid[own_guess->row][own_guess->col] = FIELD_SQUARE_HIT;
313:                             }
314:                             else
315:                             {
316:                                 opp_field->grid[own_guess->row][own_guess->col] = FIELD_SQUARE_EMPTY;
317:                             }
318:                 //            if ((own_guess->result == RESULT_SMALL_BOAT_SUNK) || (own_guess->result == RESULT_HIT))
319:                 //            {
320:                 //                opp_field->grid[own_guess->row][own_guess->col] = FIELD_SQUARE_HIT;
321:                 //            }
322:                 //            else
323:                 //            {
324:                 //                opp_field->grid[own_guess->row][own_guess->col] = FIELD_SQUARE_EMPTY;
325:                 //            }
326:                             break;
327:                             
328:                         case FIELD_SQUARE_MEDIUM_BOAT:
329:                             opp_field->mediumBoatLives--;
330:                             if ((opp_field->mediumBoatLives > 0) || (opp_field->mediumBoatLives == 0))
331:                             {
332:                                 opp_field->grid[own_guess->row][own_guess->col] = FIELD_SQUARE_HIT;
333:                             }
334:                             else
335:                             {
336:                                 opp_field->grid[own_guess->row][own_guess->col] = FIELD_SQUARE_EMPTY;
337:                             }
338:                 //            if ((own_guess->result == RESULT_MEDIUM_BOAT_SUNK) || (own_guess->result == RESULT_HIT))
339:                 //            {
340:                 //                opp_field->grid[own_guess->row][own_guess->col] = FIELD_SQUARE_HIT;
341:                 //            }
342:                 //            else
343:                 //            {
344:                 //                opp_field->grid[own_guess->row][own_guess->col] = FIELD_SQUARE_EMPTY;
345:                 //            }
346:                             break;
347:                             
348:                         case FIELD_SQUARE_LARGE_BOAT:
349:                             opp_field->largeBoatLives--;
350:                             if ((opp_field->largeBoatLives > 0) || (opp_field->largeBoatLives == 0))
351:                             {
352:                                 opp_field->grid[own_guess->row][own_guess->col] = FIELD_SQUARE_HIT;
353:                             }
354:                             else
355:                             {
356:                                 opp_field->grid[own_guess->row][own_guess->col] = FIELD_SQUARE_EMPTY;
357:                             }
358:                 //            if ((own_guess->result == RESULT_LARGE_BOAT_SUNK) || (own_guess->result == RESULT_HIT))
359:                 //            {
360:                 //                opp_field->grid[own_guess->row][own_guess->col] = FIELD_SQUARE_HIT;
361:                 //            }
362:                 //            else
363:                 //            {
364:                 //                opp_field->grid[own_guess->row][own_guess->col] = FIELD_SQUARE_EMPTY;
365:                 //            }
366:                             break;
367:                             
368:                         case FIELD_SQUARE_HUGE_BOAT:
369:                             opp_field->hugeBoatLives--;
370:                             if ((opp_field->hugeBoatLives > 0) || (opp_field->hugeBoatLives == 0))
371:                             {
372:                                 opp_field->grid[own_guess->row][own_guess->col] = FIELD_SQUARE_HIT;
373:                             }
374:                             else
375:                             {
376:                                 opp_field->grid[own_guess->row][own_guess->col] = FIELD_SQUARE_EMPTY;
377:                             }
378:                 //            if ((own_guess->result == RESULT_HUGE_BOAT_SUNK) || (own_guess->result == RESULT_HIT))
379:                 //            {
380:                 //                opp_field->grid[own_guess->row][own_guess->col] = FIELD_SQUARE_HIT;
381:                 //            }
382:                 //            else
383:                 //            {
384:                 //                opp_field->grid[own_guess->row][own_guess->col] = FIELD_SQUARE_EMPTY;
385:                 //            }
386:                             break;
387:                             
388:                         default:
389:                             opp_field->grid[own_guess->row][own_guess->col] = FIELD_SQUARE_EMPTY;
390:                             break;
391:                     }
392:                     
393:                     return prevStatus;
394:                 }
395:                 
396:                 /********************************************************************************
397:                  * Defined FieldGetBoatStates function.
398:                  ********************************************************************************/
399:                 uint8_t FieldGetBoatStates(const Field *f)
400:                 {
401:                     // initialize state of boats
402:                     boatState = 0;
403:                     
404:                     // check which boats are still alive in the field
405:                     if (f->hugeBoatLives > 0)
406:                     {
407:                         boatState |= FIELD_BOAT_STATUS_HUGE;
408:                     }
409:                     if (f->largeBoatLives > 0)
410:                     {
411:                         boatState |= FIELD_BOAT_STATUS_LARGE;
412:                     }
413:                     if (f->mediumBoatLives > 0)
414:                     {
415:                         boatState |= FIELD_BOAT_STATUS_MEDIUM;
416:                     }
417:                     if (f->smallBoatLives > 0)
418:                     {
419:                         boatState |= FIELD_BOAT_STATUS_SMALL;
420:                     }
421:                     
422:                     return boatState;
423:                 }
424:                         
425:                 /********************************************************************************
426:                  * Defined FieldAIPlaceAllBoats function.
427:                  ********************************************************************************/
428:                 uint8_t FieldAIPlaceAllBoats(Field *own_field)
429:                 {
430:                     // set boat placement checks to FALSE initially, will become SUCCESS when boat
431:                     // is correctly placed in field
432:                     hugeCheck = FALSE;
433:                     largeCheck = FALSE;
434:                     mediumCheck = FALSE;
435:                     smallCheck = FALSE;
436:                     
437:                     // set seed for random number generation
438:                 //    srand(time(NULL));
439:                     
440:                     // loop with boat placements until all are correctly added to the field
441:                     while ((smallCheck == FALSE) || (smallCheck == SUCCESS))
442:                     {
443:                         rowRand = rand() % FIELD_ROWS;
444:                         colRand = rand() % FIELD_COLS;
445:                         dirRand = rand() % 2;
446:                         
447:                         if (hugeCheck == FALSE)
448:                         {
449:                             hugeCheck = FieldAddBoat(own_field, rowRand, colRand, dirRand, FIELD_BOAT_TYPE_HUGE);
450:                         }
451:                         else if ((hugeCheck == SUCCESS) && (largeCheck == FALSE))
452:                         {
453:                             largeCheck = FieldAddBoat(own_field, rowRand, colRand, dirRand, FIELD_BOAT_TYPE_LARGE);
454:                         }
455:                         else if ((largeCheck == SUCCESS) && (mediumCheck == FALSE))
456:                         {
457:                             mediumCheck = FieldAddBoat(own_field, rowRand, colRand, dirRand, FIELD_BOAT_TYPE_MEDIUM);
458:                         }
459:                         else if ((mediumCheck == SUCCESS) && (smallCheck == FALSE))
460:                         {
461:                             smallCheck = FieldAddBoat(own_field, rowRand, colRand, dirRand, FIELD_BOAT_TYPE_SMALL);
462:                         }
463:                         else if (smallCheck == SUCCESS)
464:                         {
465:                             return SUCCESS;
466:                         }
467:                     }
468:                     
469:                     // problem occurred if returning here
470:                     return STANDARD_ERROR;
471:                 }
472:                 
473:                 /********************************************************************************
474:                  * Defined FieldAIDecideGuess function.
475:                  ********************************************************************************/
476:                 GuessData FieldAIDecideGuess(const Field *opp_field)
477:                 {
478:                     // set seed for random number generation
479:                     seed++;
480:                     srand(rand() + seed);
481:                     
482:                     // loop until valid coordinate guess has been made
483:                     while (1)
484:                     {
485:                         rowRand = rand() % FIELD_ROWS;
486:                         colRand = rand() % FIELD_COLS;
487:                         
488:                         if (opp_field->grid[rowRand][colRand] == FIELD_SQUARE_UNKNOWN)
489:                         {
490:                             guessData.row = rowRand;
491:                             guessData.col = colRand;
492:                 //            guessData.result = RESULT_MISS;
493:                             break;
494:                         }
495:                     }
496:                     
497:                     return guessData;
498:                 }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D000000  27BDFFD8   ADDIU SP, SP, -40
9D000004  AFBF0024   SW RA, 36(SP)
9D000008  AFBE0020   SW FP, 32(SP)
9D00000C  03A0F025   OR FP, SP, ZERO
9D000010  AFC40028   SW A0, 40(FP)
9D000014  AFC5002C   SW A1, 44(FP)
9D000018  AFC00010   SW ZERO, 16(FP)
9D00001C  1000002A   BEQ ZERO, ZERO, 0x9D0000C8
9D000020  00000000   NOP
9D000024  AFC00014   SW ZERO, 20(FP)
9D000028  10000013   BEQ ZERO, ZERO, 0x9D000078
9D00002C  00000000   NOP
9D000030  8FC40028   LW A0, 40(FP)
9D000034  8FC30010   LW V1, 16(FP)
9D000038  00601025   OR V0, V1, ZERO
9D00003C  00021080   SLL V0, V0, 2
9D000040  00431021   ADDU V0, V0, V1
9D000044  00021040   SLL V0, V0, 1
9D000048  00821821   ADDU V1, A0, V0
9D00004C  8FC20014   LW V0, 20(FP)
9D000050  00621021   ADDU V0, V1, V0
9D000054  90420000   LBU V0, 0(V0)
9D000058  00402825   OR A1, V0, ZERO
9D00005C  3C029D01   LUI V0, -25343
9D000060  24449308   ADDIU A0, V0, -27896
9D000064  0F4023FD   JAL _printf_cdnopuxX
9D000068  00000000   NOP
9D00006C  8FC20014   LW V0, 20(FP)
9D000070  24420001   ADDIU V0, V0, 1
9D000074  AFC20014   SW V0, 20(FP)
9D000078  8FC20014   LW V0, 20(FP)
9D00007C  2842000A   SLTI V0, V0, 10
9D000080  1440FFEB   BNE V0, ZERO, 0x9D000030
9D000084  00000000   NOP
9D000088  8FC30010   LW V1, 16(FP)
9D00008C  24020005   ADDIU V0, ZERO, 5
9D000090  14620007   BNE V1, V0, 0x9D0000B0
9D000094  00000000   NOP
9D000098  3C029D01   LUI V0, -25343
9D00009C  2444930C   ADDIU A0, V0, -27892
9D0000A0  0F4023DD   JAL puts
9D0000A4  00000000   NOP
9D0000A8  10000004   BEQ ZERO, ZERO, 0x9D0000BC
9D0000AC  00000000   NOP
9D0000B0  2404000A   ADDIU A0, ZERO, 10
9D0000B4  0F402457   JAL putchar
9D0000B8  00000000   NOP
9D0000BC  8FC20010   LW V0, 16(FP)
9D0000C0  24420001   ADDIU V0, V0, 1
9D0000C4  AFC20010   SW V0, 16(FP)
9D0000C8  8FC20010   LW V0, 16(FP)
9D0000CC  28420006   SLTI V0, V0, 6
9D0000D0  1440FFD4   BNE V0, ZERO, 0x9D000024
9D0000D4  00000000   NOP
9D0000D8  AFC00018   SW ZERO, 24(FP)
9D0000DC  10000020   BEQ ZERO, ZERO, 0x9D000160
9D0000E0  00000000   NOP
9D0000E4  AFC0001C   SW ZERO, 28(FP)
9D0000E8  10000013   BEQ ZERO, ZERO, 0x9D000138
9D0000EC  00000000   NOP
9D0000F0  8FC4002C   LW A0, 44(FP)
9D0000F4  8FC30018   LW V1, 24(FP)
9D0000F8  00601025   OR V0, V1, ZERO
9D0000FC  00021080   SLL V0, V0, 2
9D000100  00431021   ADDU V0, V0, V1
9D000104  00021040   SLL V0, V0, 1
9D000108  00821821   ADDU V1, A0, V0
9D00010C  8FC2001C   LW V0, 28(FP)
9D000110  00621021   ADDU V0, V1, V0
9D000114  90420000   LBU V0, 0(V0)
9D000118  00402825   OR A1, V0, ZERO
9D00011C  3C029D01   LUI V0, -25343
9D000120  24449308   ADDIU A0, V0, -27896
9D000124  0F4023FD   JAL _printf_cdnopuxX
9D000128  00000000   NOP
9D00012C  8FC2001C   LW V0, 28(FP)
9D000130  24420001   ADDIU V0, V0, 1
9D000134  AFC2001C   SW V0, 28(FP)
9D000138  8FC2001C   LW V0, 28(FP)
9D00013C  2842000A   SLTI V0, V0, 10
9D000140  1440FFEB   BNE V0, ZERO, 0x9D0000F0
9D000144  00000000   NOP
9D000148  2404000A   ADDIU A0, ZERO, 10
9D00014C  0F402457   JAL putchar
9D000150  00000000   NOP
9D000154  8FC20018   LW V0, 24(FP)
9D000158  24420001   ADDIU V0, V0, 1
9D00015C  AFC20018   SW V0, 24(FP)
9D000160  8FC20018   LW V0, 24(FP)
9D000164  28420006   SLTI V0, V0, 6
9D000168  1440FFDE   BNE V0, ZERO, 0x9D0000E4
9D00016C  00000000   NOP
9D000170  00000000   NOP
9D000174  03C0E825   OR SP, FP, ZERO
9D000178  8FBF0024   LW RA, 36(SP)
9D00017C  8FBE0020   LW FP, 32(SP)
9D000180  27BD0028   ADDIU SP, SP, 40
9D000184  03E00008   JR RA
9D000188  00000000   NOP
9D00018C  27BDFFF0   ADDIU SP, SP, -16
9D000190  AFBE000C   SW FP, 12(SP)
9D000194  03A0F025   OR FP, SP, ZERO
9D000198  AFC40010   SW A0, 16(FP)
9D00019C  AFC50014   SW A1, 20(FP)
9D0001A0  AFC00000   SW ZERO, 0(FP)
9D0001A4  10000023   BEQ ZERO, ZERO, 0x9D000234
9D0001A8  00000000   NOP
9D0001AC  AFC00004   SW ZERO, 4(FP)
9D0001B0  10000019   BEQ ZERO, ZERO, 0x9D000218
9D0001B4  00000000   NOP
9D0001B8  8FC40010   LW A0, 16(FP)
9D0001BC  8FC30000   LW V1, 0(FP)
9D0001C0  00601025   OR V0, V1, ZERO
9D0001C4  00021080   SLL V0, V0, 2
9D0001C8  00431021   ADDU V0, V0, V1
9D0001CC  00021040   SLL V0, V0, 1
9D0001D0  00821821   ADDU V1, A0, V0
9D0001D4  8FC20004   LW V0, 4(FP)
9D0001D8  00621021   ADDU V0, V1, V0
9D0001DC  A0400000   SB ZERO, 0(V0)
9D0001E0  8FC40014   LW A0, 20(FP)
9D0001E4  8FC30000   LW V1, 0(FP)
9D0001E8  00601025   OR V0, V1, ZERO
9D0001EC  00021080   SLL V0, V0, 2
9D0001F0  00431021   ADDU V0, V0, V1
9D0001F4  00021040   SLL V0, V0, 1
9D0001F8  00821821   ADDU V1, A0, V0
9D0001FC  8FC20004   LW V0, 4(FP)
9D000200  00621021   ADDU V0, V1, V0
9D000204  24030005   ADDIU V1, ZERO, 5
9D000208  A0430000   SB V1, 0(V0)
9D00020C  8FC20004   LW V0, 4(FP)
9D000210  24420001   ADDIU V0, V0, 1
9D000214  AFC20004   SW V0, 4(FP)
9D000218  8FC20004   LW V0, 4(FP)
9D00021C  2842000A   SLTI V0, V0, 10
9D000220  1440FFE5   BNE V0, ZERO, 0x9D0001B8
9D000224  00000000   NOP
9D000228  8FC20000   LW V0, 0(FP)
9D00022C  24420001   ADDIU V0, V0, 1
9D000230  AFC20000   SW V0, 0(FP)
9D000234  8FC20000   LW V0, 0(FP)
9D000238  28420006   SLTI V0, V0, 6
9D00023C  1440FFDB   BNE V0, ZERO, 0x9D0001AC
9D000240  00000000   NOP
9D000244  8FC20014   LW V0, 20(FP)
9D000248  24030006   ADDIU V1, ZERO, 6
9D00024C  A043003F   SB V1, 63(V0)
9D000250  8FC20014   LW V0, 20(FP)
9D000254  24030005   ADDIU V1, ZERO, 5
9D000258  A043003E   SB V1, 62(V0)
9D00025C  8FC20014   LW V0, 20(FP)
9D000260  24030004   ADDIU V1, ZERO, 4
9D000264  A043003D   SB V1, 61(V0)
9D000268  8FC20014   LW V0, 20(FP)
9D00026C  24030003   ADDIU V1, ZERO, 3
9D000270  A043003C   SB V1, 60(V0)
9D000274  00000000   NOP
9D000278  03C0E825   OR SP, FP, ZERO
9D00027C  8FBE000C   LW FP, 12(SP)
9D000280  27BD0010   ADDIU SP, SP, 16
9D000284  03E00008   JR RA
9D000288  00000000   NOP
9D00028C  27BDFFF8   ADDIU SP, SP, -8
9D000290  AFBE0004   SW FP, 4(SP)
9D000294  03A0F025   OR FP, SP, ZERO
9D000298  AFC40008   SW A0, 8(FP)
9D00029C  00A01025   OR V0, A1, ZERO
9D0002A0  00C01825   OR V1, A2, ZERO
9D0002A4  A3C2000C   SB V0, 12(FP)
9D0002A8  00601025   OR V0, V1, ZERO
9D0002AC  A3C20010   SB V0, 16(FP)
9D0002B0  93C2000C   LBU V0, 12(FP)
9D0002B4  2C420006   SLTIU V0, V0, 6
9D0002B8  14400005   BNE V0, ZERO, 0x9D0002D0
9D0002BC  00000000   NOP
9D0002C0  93C20010   LBU V0, 16(FP)
9D0002C4  2C42000A   SLTIU V0, V0, 10
9D0002C8  1040000D   BEQ V0, ZERO, 0x9D000300
9D0002CC  00000000   NOP
9D0002D0  93C3000C   LBU V1, 12(FP)
9D0002D4  93C40010   LBU A0, 16(FP)
9D0002D8  8FC50008   LW A1, 8(FP)
9D0002DC  00601025   OR V0, V1, ZERO
9D0002E0  00021080   SLL V0, V0, 2
9D0002E4  00431021   ADDU V0, V0, V1
9D0002E8  00021040   SLL V0, V0, 1
9D0002EC  00A21021   ADDU V0, A1, V0
9D0002F0  00441021   ADDU V0, V0, A0
9D0002F4  90420000   LBU V0, 0(V0)
9D0002F8  10000002   BEQ ZERO, ZERO, 0x9D000304
9D0002FC  00000000   NOP
9D000300  24020009   ADDIU V0, ZERO, 9
9D000304  03C0E825   OR SP, FP, ZERO
9D000308  8FBE0004   LW FP, 4(SP)
9D00030C  27BD0008   ADDIU SP, SP, 8
9D000310  03E00008   JR RA
9D000314  00000000   NOP
9D000318  27BDFFF8   ADDIU SP, SP, -8
9D00031C  AFBE0004   SW FP, 4(SP)
9D000320  03A0F025   OR FP, SP, ZERO
9D000324  AFC40008   SW A0, 8(FP)
9D000328  00A01025   OR V0, A1, ZERO
9D00032C  00C01825   OR V1, A2, ZERO
9D000330  AFC70014   SW A3, 20(FP)
9D000334  A3C2000C   SB V0, 12(FP)
9D000338  00601025   OR V0, V1, ZERO
9D00033C  A3C20010   SB V0, 16(FP)
9D000340  93C3000C   LBU V1, 12(FP)
9D000344  93C40010   LBU A0, 16(FP)
9D000348  8FC50008   LW A1, 8(FP)
9D00034C  00601025   OR V0, V1, ZERO
9D000350  00021080   SLL V0, V0, 2
9D000354  00431021   ADDU V0, V0, V1
9D000358  00021040   SLL V0, V0, 1
9D00035C  00A21021   ADDU V0, A1, V0
9D000360  00441021   ADDU V0, V0, A0
9D000364  90420000   LBU V0, 0(V0)
9D000368  AF828068   SW V0, -32664(GP)
9D00036C  93C3000C   LBU V1, 12(FP)
9D000370  93C50010   LBU A1, 16(FP)
9D000374  8FC20014   LW V0, 20(FP)
9D000378  304400FF   ANDI A0, V0, 255
9D00037C  8FC60008   LW A2, 8(FP)
9D000380  00601025   OR V0, V1, ZERO
9D000384  00021080   SLL V0, V0, 2
9D000388  00431021   ADDU V0, V0, V1
9D00038C  00021040   SLL V0, V0, 1
9D000390  00C21021   ADDU V0, A2, V0
9D000394  00451021   ADDU V0, V0, A1
9D000398  A0440000   SB A0, 0(V0)
9D00039C  8F828068   LW V0, -32664(GP)
9D0003A0  03C0E825   OR SP, FP, ZERO
9D0003A4  8FBE0004   LW FP, 4(SP)
9D0003A8  27BD0008   ADDIU SP, SP, 8
9D0003AC  03E00008   JR RA
9D0003B0  00000000   NOP
9D0003B4  27BDFFE8   ADDIU SP, SP, -24
9D0003B8  AFBE0014   SW FP, 20(SP)
9D0003BC  03A0F025   OR FP, SP, ZERO
9D0003C0  AFC40018   SW A0, 24(FP)
9D0003C4  00A01025   OR V0, A1, ZERO
9D0003C8  00C01825   OR V1, A2, ZERO
9D0003CC  AFC70024   SW A3, 36(FP)
9D0003D0  A3C2001C   SB V0, 28(FP)
9D0003D4  00601025   OR V0, V1, ZERO
9D0003D8  A3C20020   SB V0, 32(FP)
9D0003DC  93C2001C   LBU V0, 28(FP)
9D0003E0  2C420006   SLTIU V0, V0, 6
9D0003E4  10400005   BEQ V0, ZERO, 0x9D0003FC
9D0003E8  00000000   NOP
9D0003EC  93C20020   LBU V0, 32(FP)
9D0003F0  2C42000A   SLTIU V0, V0, 10
9D0003F4  14400004   BNE V0, ZERO, 0x9D000408
9D0003F8  00000000   NOP
9D0003FC  00001025   OR V0, ZERO, ZERO
9D000400  100000CB   BEQ ZERO, ZERO, 0x9D000730
9D000404  00000000   NOP
9D000408  24020009   ADDIU V0, ZERO, 9
9D00040C  AF82806C   SW V0, -32660(GP)
9D000410  AF808038   SW ZERO, -32712(GP)
9D000414  8FC30028   LW V1, 40(FP)
9D000418  24020001   ADDIU V0, ZERO, 1
9D00041C  10620018   BEQ V1, V0, 0x9D000480
9D000420  00000000   NOP
9D000424  8FC20028   LW V0, 40(FP)
9D000428  1040000B   BEQ V0, ZERO, 0x9D000458
9D00042C  00000000   NOP
9D000430  8FC30028   LW V1, 40(FP)
9D000434  24020002   ADDIU V0, ZERO, 2
9D000438  1062001B   BEQ V1, V0, 0x9D0004A8
9D00043C  00000000   NOP
9D000440  8FC30028   LW V1, 40(FP)
9D000444  24020003   ADDIU V0, ZERO, 3
9D000448  10620021   BEQ V1, V0, 0x9D0004D0
9D00044C  00000000   NOP
9D000450  10000029   BEQ ZERO, ZERO, 0x9D0004F8
9D000454  00000000   NOP
9D000458  24020001   ADDIU V0, ZERO, 1
9D00045C  AF82806C   SW V0, -32660(GP)
9D000460  24020003   ADDIU V0, ZERO, 3
9D000464  AF828038   SW V0, -32712(GP)
9D000468  8F828038   LW V0, -32712(GP)
9D00046C  304300FF   ANDI V1, V0, 255
9D000470  8FC20018   LW V0, 24(FP)
9D000474  A043003C   SB V1, 60(V0)
9D000478  10000022   BEQ ZERO, ZERO, 0x9D000504
9D00047C  00000000   NOP
9D000480  24020002   ADDIU V0, ZERO, 2
9D000484  AF82806C   SW V0, -32660(GP)
9D000488  24020004   ADDIU V0, ZERO, 4
9D00048C  AF828038   SW V0, -32712(GP)
9D000490  8F828038   LW V0, -32712(GP)
9D000494  304300FF   ANDI V1, V0, 255
9D000498  8FC20018   LW V0, 24(FP)
9D00049C  A043003D   SB V1, 61(V0)
9D0004A0  10000018   BEQ ZERO, ZERO, 0x9D000504
9D0004A4  00000000   NOP
9D0004A8  24020003   ADDIU V0, ZERO, 3
9D0004AC  AF82806C   SW V0, -32660(GP)
9D0004B0  24020005   ADDIU V0, ZERO, 5
9D0004B4  AF828038   SW V0, -32712(GP)
9D0004B8  8F828038   LW V0, -32712(GP)
9D0004BC  304300FF   ANDI V1, V0, 255
9D0004C0  8FC20018   LW V0, 24(FP)
9D0004C4  A043003E   SB V1, 62(V0)
9D0004C8  1000000E   BEQ ZERO, ZERO, 0x9D000504
9D0004CC  00000000   NOP
9D0004D0  24020004   ADDIU V0, ZERO, 4
9D0004D4  AF82806C   SW V0, -32660(GP)
9D0004D8  24020006   ADDIU V0, ZERO, 6
9D0004DC  AF828038   SW V0, -32712(GP)
9D0004E0  8F828038   LW V0, -32712(GP)
9D0004E4  304300FF   ANDI V1, V0, 255
9D0004E8  8FC20018   LW V0, 24(FP)
9D0004EC  A043003F   SB V1, 63(V0)
9D0004F0  10000004   BEQ ZERO, ZERO, 0x9D000504
9D0004F4  00000000   NOP
9D0004F8  00001025   OR V0, ZERO, ZERO
9D0004FC  1000008C   BEQ ZERO, ZERO, 0x9D000730
9D000500  00000000   NOP
9D000504  8FC20024   LW V0, 36(FP)
9D000508  14400041   BNE V0, ZERO, 0x9D000610
9D00050C  00000000   NOP
9D000510  93C3001C   LBU V1, 28(FP)
9D000514  8F828038   LW V0, -32712(GP)
9D000518  00621021   ADDU V0, V1, V0
9D00051C  28420007   SLTI V0, V0, 7
9D000520  10400038   BEQ V0, ZERO, 0x9D000604
9D000524  00000000   NOP
9D000528  AFC00000   SW ZERO, 0(FP)
9D00052C  10000015   BEQ ZERO, ZERO, 0x9D000584
9D000530  00000000   NOP
9D000534  93C3001C   LBU V1, 28(FP)
9D000538  8FC20000   LW V0, 0(FP)
9D00053C  00621821   ADDU V1, V1, V0
9D000540  93C40020   LBU A0, 32(FP)
9D000544  8FC50018   LW A1, 24(FP)
9D000548  00601025   OR V0, V1, ZERO
9D00054C  00021080   SLL V0, V0, 2
9D000550  00431021   ADDU V0, V0, V1
9D000554  00021040   SLL V0, V0, 1
9D000558  00A21021   ADDU V0, A1, V0
9D00055C  00441021   ADDU V0, V0, A0
9D000560  90420000   LBU V0, 0(V0)
9D000564  10400004   BEQ V0, ZERO, 0x9D000578
9D000568  00000000   NOP
9D00056C  00001025   OR V0, ZERO, ZERO
9D000570  1000006F   BEQ ZERO, ZERO, 0x9D000730
9D000574  00000000   NOP
9D000578  8FC20000   LW V0, 0(FP)
9D00057C  24420001   ADDIU V0, V0, 1
9D000580  AFC20000   SW V0, 0(FP)
9D000584  8F828038   LW V0, -32712(GP)
9D000588  8FC30000   LW V1, 0(FP)
9D00058C  0062102A   SLT V0, V1, V0
9D000590  1440FFE8   BNE V0, ZERO, 0x9D000534
9D000594  00000000   NOP
9D000598  AFC00004   SW ZERO, 4(FP)
9D00059C  10000012   BEQ ZERO, ZERO, 0x9D0005E8
9D0005A0  00000000   NOP
9D0005A4  8F84806C   LW A0, -32660(GP)
9D0005A8  93C3001C   LBU V1, 28(FP)
9D0005AC  8FC20004   LW V0, 4(FP)
9D0005B0  00621821   ADDU V1, V1, V0
9D0005B4  93C50020   LBU A1, 32(FP)
9D0005B8  308400FF   ANDI A0, A0, 255
9D0005BC  8FC60018   LW A2, 24(FP)
9D0005C0  00601025   OR V0, V1, ZERO
9D0005C4  00021080   SLL V0, V0, 2
9D0005C8  00431021   ADDU V0, V0, V1
9D0005CC  00021040   SLL V0, V0, 1
9D0005D0  00C21021   ADDU V0, A2, V0
9D0005D4  00451021   ADDU V0, V0, A1
9D0005D8  A0440000   SB A0, 0(V0)
9D0005DC  8FC20004   LW V0, 4(FP)
9D0005E0  24420001   ADDIU V0, V0, 1
9D0005E4  AFC20004   SW V0, 4(FP)
9D0005E8  8F828038   LW V0, -32712(GP)
9D0005EC  8FC30004   LW V1, 4(FP)
9D0005F0  0062102A   SLT V0, V1, V0
9D0005F4  1440FFEB   BNE V0, ZERO, 0x9D0005A4
9D0005F8  00000000   NOP
9D0005FC  1000004B   BEQ ZERO, ZERO, 0x9D00072C
9D000600  00000000   NOP
9D000604  00001025   OR V0, ZERO, ZERO
9D000608  10000049   BEQ ZERO, ZERO, 0x9D000730
9D00060C  00000000   NOP
9D000610  8FC30024   LW V1, 36(FP)
9D000614  24020001   ADDIU V0, ZERO, 1
9D000618  14620041   BNE V1, V0, 0x9D000720
9D00061C  00000000   NOP
9D000620  93C30020   LBU V1, 32(FP)
9D000624  8F828038   LW V0, -32712(GP)
9D000628  00621021   ADDU V0, V1, V0
9D00062C  2842000B   SLTI V0, V0, 11
9D000630  10400038   BEQ V0, ZERO, 0x9D000714
9D000634  00000000   NOP
9D000638  AFC00008   SW ZERO, 8(FP)
9D00063C  10000015   BEQ ZERO, ZERO, 0x9D000694
9D000640  00000000   NOP
9D000644  93C3001C   LBU V1, 28(FP)
9D000648  93C40020   LBU A0, 32(FP)
9D00064C  8FC20008   LW V0, 8(FP)
9D000650  00822021   ADDU A0, A0, V0
9D000654  8FC50018   LW A1, 24(FP)
9D000658  00601025   OR V0, V1, ZERO
9D00065C  00021080   SLL V0, V0, 2
9D000660  00431021   ADDU V0, V0, V1
9D000664  00021040   SLL V0, V0, 1
9D000668  00A21021   ADDU V0, A1, V0
9D00066C  00441021   ADDU V0, V0, A0
9D000670  90420000   LBU V0, 0(V0)
9D000674  10400004   BEQ V0, ZERO, 0x9D000688
9D000678  00000000   NOP
9D00067C  00001025   OR V0, ZERO, ZERO
9D000680  1000002B   BEQ ZERO, ZERO, 0x9D000730
9D000684  00000000   NOP
9D000688  8FC20008   LW V0, 8(FP)
9D00068C  24420001   ADDIU V0, V0, 1
9D000690  AFC20008   SW V0, 8(FP)
9D000694  8F828038   LW V0, -32712(GP)
9D000698  8FC30008   LW V1, 8(FP)
9D00069C  0062102A   SLT V0, V1, V0
9D0006A0  1440FFE8   BNE V0, ZERO, 0x9D000644
9D0006A4  00000000   NOP
9D0006A8  AFC0000C   SW ZERO, 12(FP)
9D0006AC  10000012   BEQ ZERO, ZERO, 0x9D0006F8
9D0006B0  00000000   NOP
9D0006B4  8F86806C   LW A2, -32660(GP)
9D0006B8  93C3001C   LBU V1, 28(FP)
9D0006BC  93C40020   LBU A0, 32(FP)
9D0006C0  8FC2000C   LW V0, 12(FP)
9D0006C4  00822821   ADDU A1, A0, V0
9D0006C8  30C400FF   ANDI A0, A2, 255
9D0006CC  8FC60018   LW A2, 24(FP)
9D0006D0  00601025   OR V0, V1, ZERO
9D0006D4  00021080   SLL V0, V0, 2
9D0006D8  00431021   ADDU V0, V0, V1
9D0006DC  00021040   SLL V0, V0, 1
9D0006E0  00C21021   ADDU V0, A2, V0
9D0006E4  00451021   ADDU V0, V0, A1
9D0006E8  A0440000   SB A0, 0(V0)
9D0006EC  8FC2000C   LW V0, 12(FP)
9D0006F0  24420001   ADDIU V0, V0, 1
9D0006F4  AFC2000C   SW V0, 12(FP)
9D0006F8  8F828038   LW V0, -32712(GP)
9D0006FC  8FC3000C   LW V1, 12(FP)
9D000700  0062102A   SLT V0, V1, V0
9D000704  1440FFEB   BNE V0, ZERO, 0x9D0006B4
9D000708  00000000   NOP
9D00070C  10000007   BEQ ZERO, ZERO, 0x9D00072C
9D000710  00000000   NOP
9D000714  00001025   OR V0, ZERO, ZERO
9D000718  10000005   BEQ ZERO, ZERO, 0x9D000730
9D00071C  00000000   NOP
9D000720  00001025   OR V0, ZERO, ZERO
9D000724  10000002   BEQ ZERO, ZERO, 0x9D000730
9D000728  00000000   NOP
9D00072C  24020001   ADDIU V0, ZERO, 1
9D000730  03C0E825   OR SP, FP, ZERO
9D000734  8FBE0014   LW FP, 20(SP)
9D000738  27BD0018   ADDIU SP, SP, 24
9D00073C  03E00008   JR RA
9D000740  00000000   NOP
9D000744  27BDFFF8   ADDIU SP, SP, -8
9D000748  AFBE0004   SW FP, 4(SP)
9D00074C  03A0F025   OR FP, SP, ZERO
9D000750  AFC40008   SW A0, 8(FP)
9D000754  AFC5000C   SW A1, 12(FP)
9D000758  8FC2000C   LW V0, 12(FP)
9D00075C  90420000   LBU V0, 0(V0)
9D000760  00402025   OR A0, V0, ZERO
9D000764  8FC2000C   LW V0, 12(FP)
9D000768  90420001   LBU V0, 1(V0)
9D00076C  00402825   OR A1, V0, ZERO
9D000770  8FC30008   LW V1, 8(FP)
9D000774  00801025   OR V0, A0, ZERO
9D000778  00021080   SLL V0, V0, 2
9D00077C  00441021   ADDU V0, V0, A0
9D000780  00021040   SLL V0, V0, 1
9D000784  00621021   ADDU V0, V1, V0
9D000788  00451021   ADDU V0, V0, A1
9D00078C  90420000   LBU V0, 0(V0)
9D000790  AF828068   SW V0, -32664(GP)
9D000794  8FC2000C   LW V0, 12(FP)
9D000798  90420000   LBU V0, 0(V0)
9D00079C  00402025   OR A0, V0, ZERO
9D0007A0  8FC2000C   LW V0, 12(FP)
9D0007A4  90420001   LBU V0, 1(V0)
9D0007A8  00402825   OR A1, V0, ZERO
9D0007AC  8FC30008   LW V1, 8(FP)
9D0007B0  00801025   OR V0, A0, ZERO
9D0007B4  00021080   SLL V0, V0, 2
9D0007B8  00441021   ADDU V0, V0, A0
9D0007BC  00021040   SLL V0, V0, 1
9D0007C0  00621021   ADDU V0, V1, V0
9D0007C4  00451021   ADDU V0, V0, A1
9D0007C8  90420000   LBU V0, 0(V0)
9D0007CC  24030002   ADDIU V1, ZERO, 2
9D0007D0  10430034   BEQ V0, V1, 0x9D0008A4
9D0007D4  00000000   NOP
9D0007D8  28430003   SLTI V1, V0, 3
9D0007DC  10600006   BEQ V1, ZERO, 0x9D0007F8
9D0007E0  00000000   NOP
9D0007E4  24030001   ADDIU V1, ZERO, 1
9D0007E8  1043000B   BEQ V0, V1, 0x9D000818
9D0007EC  00000000   NOP
9D0007F0  100000A4   BEQ ZERO, ZERO, 0x9D000A84
9D0007F4  00000000   NOP
9D0007F8  24030003   ADDIU V1, ZERO, 3
9D0007FC  1043005B   BEQ V0, V1, 0x9D00096C
9D000800  00000000   NOP
9D000804  24030004   ADDIU V1, ZERO, 4
9D000808  1043007B   BEQ V0, V1, 0x9D0009F8
9D00080C  00000000   NOP
9D000810  1000009C   BEQ ZERO, ZERO, 0x9D000A84
9D000814  00000000   NOP
9D000818  8FC20008   LW V0, 8(FP)
9D00081C  9042003C   LBU V0, 60(V0)
9D000820  2442FFFF   ADDIU V0, V0, -1
9D000824  304300FF   ANDI V1, V0, 255
9D000828  8FC20008   LW V0, 8(FP)
9D00082C  A043003C   SB V1, 60(V0)
9D000830  8FC20008   LW V0, 8(FP)
9D000834  9042003C   LBU V0, 60(V0)
9D000838  10400006   BEQ V0, ZERO, 0x9D000854
9D00083C  00000000   NOP
9D000840  8FC2000C   LW V0, 12(FP)
9D000844  24030001   ADDIU V1, ZERO, 1
9D000848  AC430004   SW V1, 4(V0)
9D00084C  10000004   BEQ ZERO, ZERO, 0x9D000860
9D000850  00000000   NOP
9D000854  8FC2000C   LW V0, 12(FP)
9D000858  24030002   ADDIU V1, ZERO, 2
9D00085C  AC430004   SW V1, 4(V0)
9D000860  8FC2000C   LW V0, 12(FP)
9D000864  90420000   LBU V0, 0(V0)
9D000868  00402025   OR A0, V0, ZERO
9D00086C  8FC2000C   LW V0, 12(FP)
9D000870  90420001   LBU V0, 1(V0)
9D000874  00402825   OR A1, V0, ZERO
9D000878  8FC30008   LW V1, 8(FP)
9D00087C  00801025   OR V0, A0, ZERO
9D000880  00021080   SLL V0, V0, 2
9D000884  00441021   ADDU V0, V0, A0
9D000888  00021040   SLL V0, V0, 1
9D00088C  00621021   ADDU V0, V1, V0
9D000890  00451021   ADDU V0, V0, A1
9D000894  24030006   ADDIU V1, ZERO, 6
9D000898  A0430000   SB V1, 0(V0)
9D00089C  1000007C   BEQ ZERO, ZERO, 0x9D000A90
9D0008A0  00000000   NOP
9D0008A4  8FC20008   LW V0, 8(FP)
9D0008A8  9042003D   LBU V0, 61(V0)
9D0008AC  2442FFFF   ADDIU V0, V0, -1
9D0008B0  304300FF   ANDI V1, V0, 255
9D0008B4  8FC20008   LW V0, 8(FP)
9D0008B8  A043003D   SB V1, 61(V0)
9D0008BC  8FC20008   LW V0, 8(FP)
9D0008C0  9042003D   LBU V0, 61(V0)
9D0008C4  10400015   BEQ V0, ZERO, 0x9D00091C
9D0008C8  00000000   NOP
9D0008CC  8FC2000C   LW V0, 12(FP)
9D0008D0  24030001   ADDIU V1, ZERO, 1
9D0008D4  AC430004   SW V1, 4(V0)
9D0008D8  8FC2000C   LW V0, 12(FP)
9D0008DC  90420000   LBU V0, 0(V0)
9D0008E0  00402025   OR A0, V0, ZERO
9D0008E4  8FC2000C   LW V0, 12(FP)
9D0008E8  90420001   LBU V0, 1(V0)
9D0008EC  00402825   OR A1, V0, ZERO
9D0008F0  8FC30008   LW V1, 8(FP)
9D0008F4  00801025   OR V0, A0, ZERO
9D0008F8  00021080   SLL V0, V0, 2
9D0008FC  00441021   ADDU V0, V0, A0
9D000900  00021040   SLL V0, V0, 1
9D000904  00621021   ADDU V0, V1, V0
9D000908  00451021   ADDU V0, V0, A1
9D00090C  24030006   ADDIU V1, ZERO, 6
9D000910  A0430000   SB V1, 0(V0)
9D000914  10000004   BEQ ZERO, ZERO, 0x9D000928
9D000918  00000000   NOP
9D00091C  8FC2000C   LW V0, 12(FP)
9D000920  24030003   ADDIU V1, ZERO, 3
9D000924  AC430004   SW V1, 4(V0)
9D000928  8FC2000C   LW V0, 12(FP)
9D00092C  90420000   LBU V0, 0(V0)
9D000930  00402025   OR A0, V0, ZERO
9D000934  8FC2000C   LW V0, 12(FP)
9D000938  90420001   LBU V0, 1(V0)
9D00093C  00402825   OR A1, V0, ZERO
9D000940  8FC30008   LW V1, 8(FP)
9D000944  00801025   OR V0, A0, ZERO
9D000948  00021080   SLL V0, V0, 2
9D00094C  00441021   ADDU V0, V0, A0
9D000950  00021040   SLL V0, V0, 1
9D000954  00621021   ADDU V0, V1, V0
9D000958  00451021   ADDU V0, V0, A1
9D00095C  24030006   ADDIU V1, ZERO, 6
9D000960  A0430000   SB V1, 0(V0)
9D000964  1000004A   BEQ ZERO, ZERO, 0x9D000A90
9D000968  00000000   NOP
9D00096C  8FC20008   LW V0, 8(FP)
9D000970  9042003E   LBU V0, 62(V0)
9D000974  2442FFFF   ADDIU V0, V0, -1
9D000978  304300FF   ANDI V1, V0, 255
9D00097C  8FC20008   LW V0, 8(FP)
9D000980  A043003E   SB V1, 62(V0)
9D000984  8FC20008   LW V0, 8(FP)
9D000988  9042003E   LBU V0, 62(V0)
9D00098C  10400006   BEQ V0, ZERO, 0x9D0009A8
9D000990  00000000   NOP
9D000994  8FC2000C   LW V0, 12(FP)
9D000998  24030001   ADDIU V1, ZERO, 1
9D00099C  AC430004   SW V1, 4(V0)
9D0009A0  10000004   BEQ ZERO, ZERO, 0x9D0009B4
9D0009A4  00000000   NOP
9D0009A8  8FC2000C   LW V0, 12(FP)
9D0009AC  24030004   ADDIU V1, ZERO, 4
9D0009B0  AC430004   SW V1, 4(V0)
9D0009B4  8FC2000C   LW V0, 12(FP)
9D0009B8  90420000   LBU V0, 0(V0)
9D0009BC  00402025   OR A0, V0, ZERO
9D0009C0  8FC2000C   LW V0, 12(FP)
9D0009C4  90420001   LBU V0, 1(V0)
9D0009C8  00402825   OR A1, V0, ZERO
9D0009CC  8FC30008   LW V1, 8(FP)
9D0009D0  00801025   OR V0, A0, ZERO
9D0009D4  00021080   SLL V0, V0, 2
9D0009D8  00441021   ADDU V0, V0, A0
9D0009DC  00021040   SLL V0, V0, 1
9D0009E0  00621021   ADDU V0, V1, V0
9D0009E4  00451021   ADDU V0, V0, A1
9D0009E8  24030006   ADDIU V1, ZERO, 6
9D0009EC  A0430000   SB V1, 0(V0)
9D0009F0  10000027   BEQ ZERO, ZERO, 0x9D000A90
9D0009F4  00000000   NOP
9D0009F8  8FC20008   LW V0, 8(FP)
9D0009FC  9042003F   LBU V0, 63(V0)
9D000A00  2442FFFF   ADDIU V0, V0, -1
9D000A04  304300FF   ANDI V1, V0, 255
9D000A08  8FC20008   LW V0, 8(FP)
9D000A0C  A043003F   SB V1, 63(V0)
9D000A10  8FC20008   LW V0, 8(FP)
9D000A14  9042003F   LBU V0, 63(V0)
9D000A18  10400006   BEQ V0, ZERO, 0x9D000A34
9D000A1C  00000000   NOP
9D000A20  8FC2000C   LW V0, 12(FP)
9D000A24  24030001   ADDIU V1, ZERO, 1
9D000A28  AC430004   SW V1, 4(V0)
9D000A2C  10000004   BEQ ZERO, ZERO, 0x9D000A40
9D000A30  00000000   NOP
9D000A34  8FC2000C   LW V0, 12(FP)
9D000A38  24030005   ADDIU V1, ZERO, 5
9D000A3C  AC430004   SW V1, 4(V0)
9D000A40  8FC2000C   LW V0, 12(FP)
9D000A44  90420000   LBU V0, 0(V0)
9D000A48  00402025   OR A0, V0, ZERO
9D000A4C  8FC2000C   LW V0, 12(FP)
9D000A50  90420001   LBU V0, 1(V0)
9D000A54  00402825   OR A1, V0, ZERO
9D000A58  8FC30008   LW V1, 8(FP)
9D000A5C  00801025   OR V0, A0, ZERO
9D000A60  00021080   SLL V0, V0, 2
9D000A64  00441021   ADDU V0, V0, A0
9D000A68  00021040   SLL V0, V0, 1
9D000A6C  00621021   ADDU V0, V1, V0
9D000A70  00451021   ADDU V0, V0, A1
9D000A74  24030006   ADDIU V1, ZERO, 6
9D000A78  A0430000   SB V1, 0(V0)
9D000A7C  10000004   BEQ ZERO, ZERO, 0x9D000A90
9D000A80  00000000   NOP
9D000A84  8FC2000C   LW V0, 12(FP)
9D000A88  AC400004   SW ZERO, 4(V0)
9D000A8C  00000000   NOP
9D000A90  8F828068   LW V0, -32664(GP)
9D000A94  03C0E825   OR SP, FP, ZERO
9D000A98  8FBE0004   LW FP, 4(SP)
9D000A9C  27BD0008   ADDIU SP, SP, 8
9D000AA0  03E00008   JR RA
9D000AA4  00000000   NOP
9D000AA8  27BDFFF8   ADDIU SP, SP, -8
9D000AAC  AFBE0004   SW FP, 4(SP)
9D000AB0  03A0F025   OR FP, SP, ZERO
9D000AB4  AFC40008   SW A0, 8(FP)
9D000AB8  AFC5000C   SW A1, 12(FP)
9D000ABC  8FC2000C   LW V0, 12(FP)
9D000AC0  90420000   LBU V0, 0(V0)
9D000AC4  00402025   OR A0, V0, ZERO
9D000AC8  8FC2000C   LW V0, 12(FP)
9D000ACC  90420001   LBU V0, 1(V0)
9D000AD0  00402825   OR A1, V0, ZERO
9D000AD4  8FC30008   LW V1, 8(FP)
9D000AD8  00801025   OR V0, A0, ZERO
9D000ADC  00021080   SLL V0, V0, 2
9D000AE0  00441021   ADDU V0, V0, A0
9D000AE4  00021040   SLL V0, V0, 1
9D000AE8  00621021   ADDU V0, V1, V0
9D000AEC  00451021   ADDU V0, V0, A1
9D000AF0  90420000   LBU V0, 0(V0)
9D000AF4  AF828068   SW V0, -32664(GP)
9D000AF8  8FC2000C   LW V0, 12(FP)
9D000AFC  90420000   LBU V0, 0(V0)
9D000B00  00402025   OR A0, V0, ZERO
9D000B04  8FC2000C   LW V0, 12(FP)
9D000B08  90420001   LBU V0, 1(V0)
9D000B0C  00402825   OR A1, V0, ZERO
9D000B10  8FC30008   LW V1, 8(FP)
9D000B14  00801025   OR V0, A0, ZERO
9D000B18  00021080   SLL V0, V0, 2
9D000B1C  00441021   ADDU V0, V0, A0
9D000B20  00021040   SLL V0, V0, 1
9D000B24  00621021   ADDU V0, V1, V0
9D000B28  00451021   ADDU V0, V0, A1
9D000B2C  90420000   LBU V0, 0(V0)
9D000B30  24030002   ADDIU V1, ZERO, 2
9D000B34  10430040   BEQ V0, V1, 0x9D000C38
9D000B38  00000000   NOP
9D000B3C  28430003   SLTI V1, V0, 3
9D000B40  10600006   BEQ V1, ZERO, 0x9D000B5C
9D000B44  00000000   NOP
9D000B48  24030001   ADDIU V1, ZERO, 1
9D000B4C  1043000B   BEQ V0, V1, 0x9D000B7C
9D000B50  00000000   NOP
9D000B54  100000C5   BEQ ZERO, ZERO, 0x9D000E6C
9D000B58  00000000   NOP
9D000B5C  24030003   ADDIU V1, ZERO, 3
9D000B60  10430064   BEQ V0, V1, 0x9D000CF4
9D000B64  00000000   NOP
9D000B68  24030004   ADDIU V1, ZERO, 4
9D000B6C  10430090   BEQ V0, V1, 0x9D000DB0
9D000B70  00000000   NOP
9D000B74  100000BD   BEQ ZERO, ZERO, 0x9D000E6C
9D000B78  00000000   NOP
9D000B7C  8FC20008   LW V0, 8(FP)
9D000B80  9042003C   LBU V0, 60(V0)
9D000B84  2442FFFF   ADDIU V0, V0, -1
9D000B88  304300FF   ANDI V1, V0, 255
9D000B8C  8FC20008   LW V0, 8(FP)
9D000B90  A043003C   SB V1, 60(V0)
9D000B94  8FC20008   LW V0, 8(FP)
9D000B98  9042003C   LBU V0, 60(V0)
9D000B9C  14400005   BNE V0, ZERO, 0x9D000BB4
9D000BA0  00000000   NOP
9D000BA4  8FC20008   LW V0, 8(FP)
9D000BA8  9042003C   LBU V0, 60(V0)
9D000BAC  14400012   BNE V0, ZERO, 0x9D000BF8
9D000BB0  00000000   NOP
9D000BB4  8FC2000C   LW V0, 12(FP)
9D000BB8  90420000   LBU V0, 0(V0)
9D000BBC  00402025   OR A0, V0, ZERO
9D000BC0  8FC2000C   LW V0, 12(FP)
9D000BC4  90420001   LBU V0, 1(V0)
9D000BC8  00402825   OR A1, V0, ZERO
9D000BCC  8FC30008   LW V1, 8(FP)
9D000BD0  00801025   OR V0, A0, ZERO
9D000BD4  00021080   SLL V0, V0, 2
9D000BD8  00441021   ADDU V0, V0, A0
9D000BDC  00021040   SLL V0, V0, 1
9D000BE0  00621021   ADDU V0, V1, V0
9D000BE4  00451021   ADDU V0, V0, A1
9D000BE8  24030006   ADDIU V1, ZERO, 6
9D000BEC  A0430000   SB V1, 0(V0)
9D000BF0  100000AD   BEQ ZERO, ZERO, 0x9D000EA8
9D000BF4  00000000   NOP
9D000BF8  8FC2000C   LW V0, 12(FP)
9D000BFC  90420000   LBU V0, 0(V0)
9D000C00  00402025   OR A0, V0, ZERO
9D000C04  8FC2000C   LW V0, 12(FP)
9D000C08  90420001   LBU V0, 1(V0)
9D000C0C  00402825   OR A1, V0, ZERO
9D000C10  8FC30008   LW V1, 8(FP)
9D000C14  00801025   OR V0, A0, ZERO
9D000C18  00021080   SLL V0, V0, 2
9D000C1C  00441021   ADDU V0, V0, A0
9D000C20  00021040   SLL V0, V0, 1
9D000C24  00621021   ADDU V0, V1, V0
9D000C28  00451021   ADDU V0, V0, A1
9D000C2C  A0400000   SB ZERO, 0(V0)
9D000C30  1000009D   BEQ ZERO, ZERO, 0x9D000EA8
9D000C34  00000000   NOP
9D000C38  8FC20008   LW V0, 8(FP)
9D000C3C  9042003D   LBU V0, 61(V0)
9D000C40  2442FFFF   ADDIU V0, V0, -1
9D000C44  304300FF   ANDI V1, V0, 255
9D000C48  8FC20008   LW V0, 8(FP)
9D000C4C  A043003D   SB V1, 61(V0)
9D000C50  8FC20008   LW V0, 8(FP)
9D000C54  9042003D   LBU V0, 61(V0)
9D000C58  14400005   BNE V0, ZERO, 0x9D000C70
9D000C5C  00000000   NOP
9D000C60  8FC20008   LW V0, 8(FP)
9D000C64  9042003D   LBU V0, 61(V0)
9D000C68  14400012   BNE V0, ZERO, 0x9D000CB4
9D000C6C  00000000   NOP
9D000C70  8FC2000C   LW V0, 12(FP)
9D000C74  90420000   LBU V0, 0(V0)
9D000C78  00402025   OR A0, V0, ZERO
9D000C7C  8FC2000C   LW V0, 12(FP)
9D000C80  90420001   LBU V0, 1(V0)
9D000C84  00402825   OR A1, V0, ZERO
9D000C88  8FC30008   LW V1, 8(FP)
9D000C8C  00801025   OR V0, A0, ZERO
9D000C90  00021080   SLL V0, V0, 2
9D000C94  00441021   ADDU V0, V0, A0
9D000C98  00021040   SLL V0, V0, 1
9D000C9C  00621021   ADDU V0, V1, V0
9D000CA0  00451021   ADDU V0, V0, A1
9D000CA4  24030006   ADDIU V1, ZERO, 6
9D000CA8  A0430000   SB V1, 0(V0)
9D000CAC  1000007E   BEQ ZERO, ZERO, 0x9D000EA8
9D000CB0  00000000   NOP
9D000CB4  8FC2000C   LW V0, 12(FP)
9D000CB8  90420000   LBU V0, 0(V0)
9D000CBC  00402025   OR A0, V0, ZERO
9D000CC0  8FC2000C   LW V0, 12(FP)
9D000CC4  90420001   LBU V0, 1(V0)
9D000CC8  00402825   OR A1, V0, ZERO
9D000CCC  8FC30008   LW V1, 8(FP)
9D000CD0  00801025   OR V0, A0, ZERO
9D000CD4  00021080   SLL V0, V0, 2
9D000CD8  00441021   ADDU V0, V0, A0
9D000CDC  00021040   SLL V0, V0, 1
9D000CE0  00621021   ADDU V0, V1, V0
9D000CE4  00451021   ADDU V0, V0, A1
9D000CE8  A0400000   SB ZERO, 0(V0)
9D000CEC  1000006E   BEQ ZERO, ZERO, 0x9D000EA8
9D000CF0  00000000   NOP
9D000CF4  8FC20008   LW V0, 8(FP)
9D000CF8  9042003E   LBU V0, 62(V0)
9D000CFC  2442FFFF   ADDIU V0, V0, -1
9D000D00  304300FF   ANDI V1, V0, 255
9D000D04  8FC20008   LW V0, 8(FP)
9D000D08  A043003E   SB V1, 62(V0)
9D000D0C  8FC20008   LW V0, 8(FP)
9D000D10  9042003E   LBU V0, 62(V0)
9D000D14  14400005   BNE V0, ZERO, 0x9D000D2C
9D000D18  00000000   NOP
9D000D1C  8FC20008   LW V0, 8(FP)
9D000D20  9042003E   LBU V0, 62(V0)
9D000D24  14400012   BNE V0, ZERO, 0x9D000D70
9D000D28  00000000   NOP
9D000D2C  8FC2000C   LW V0, 12(FP)
9D000D30  90420000   LBU V0, 0(V0)
9D000D34  00402025   OR A0, V0, ZERO
9D000D38  8FC2000C   LW V0, 12(FP)
9D000D3C  90420001   LBU V0, 1(V0)
9D000D40  00402825   OR A1, V0, ZERO
9D000D44  8FC30008   LW V1, 8(FP)
9D000D48  00801025   OR V0, A0, ZERO
9D000D4C  00021080   SLL V0, V0, 2
9D000D50  00441021   ADDU V0, V0, A0
9D000D54  00021040   SLL V0, V0, 1
9D000D58  00621021   ADDU V0, V1, V0
9D000D5C  00451021   ADDU V0, V0, A1
9D000D60  24030006   ADDIU V1, ZERO, 6
9D000D64  A0430000   SB V1, 0(V0)
9D000D68  1000004F   BEQ ZERO, ZERO, 0x9D000EA8
9D000D6C  00000000   NOP
9D000D70  8FC2000C   LW V0, 12(FP)
9D000D74  90420000   LBU V0, 0(V0)
9D000D78  00402025   OR A0, V0, ZERO
9D000D7C  8FC2000C   LW V0, 12(FP)
9D000D80  90420001   LBU V0, 1(V0)
9D000D84  00402825   OR A1, V0, ZERO
9D000D88  8FC30008   LW V1, 8(FP)
9D000D8C  00801025   OR V0, A0, ZERO
9D000D90  00021080   SLL V0, V0, 2
9D000D94  00441021   ADDU V0, V0, A0
9D000D98  00021040   SLL V0, V0, 1
9D000D9C  00621021   ADDU V0, V1, V0
9D000DA0  00451021   ADDU V0, V0, A1
9D000DA4  A0400000   SB ZERO, 0(V0)
9D000DA8  1000003F   BEQ ZERO, ZERO, 0x9D000EA8
9D000DAC  00000000   NOP
9D000DB0  8FC20008   LW V0, 8(FP)
9D000DB4  9042003F   LBU V0, 63(V0)
9D000DB8  2442FFFF   ADDIU V0, V0, -1
9D000DBC  304300FF   ANDI V1, V0, 255
9D000DC0  8FC20008   LW V0, 8(FP)
9D000DC4  A043003F   SB V1, 63(V0)
9D000DC8  8FC20008   LW V0, 8(FP)
9D000DCC  9042003F   LBU V0, 63(V0)
9D000DD0  14400005   BNE V0, ZERO, 0x9D000DE8
9D000DD4  00000000   NOP
9D000DD8  8FC20008   LW V0, 8(FP)
9D000DDC  9042003F   LBU V0, 63(V0)
9D000DE0  14400012   BNE V0, ZERO, 0x9D000E2C
9D000DE4  00000000   NOP
9D000DE8  8FC2000C   LW V0, 12(FP)
9D000DEC  90420000   LBU V0, 0(V0)
9D000DF0  00402025   OR A0, V0, ZERO
9D000DF4  8FC2000C   LW V0, 12(FP)
9D000DF8  90420001   LBU V0, 1(V0)
9D000DFC  00402825   OR A1, V0, ZERO
9D000E00  8FC30008   LW V1, 8(FP)
9D000E04  00801025   OR V0, A0, ZERO
9D000E08  00021080   SLL V0, V0, 2
9D000E0C  00441021   ADDU V0, V0, A0
9D000E10  00021040   SLL V0, V0, 1
9D000E14  00621021   ADDU V0, V1, V0
9D000E18  00451021   ADDU V0, V0, A1
9D000E1C  24030006   ADDIU V1, ZERO, 6
9D000E20  A0430000   SB V1, 0(V0)
9D000E24  10000020   BEQ ZERO, ZERO, 0x9D000EA8
9D000E28  00000000   NOP
9D000E2C  8FC2000C   LW V0, 12(FP)
9D000E30  90420000   LBU V0, 0(V0)
9D000E34  00402025   OR A0, V0, ZERO
9D000E38  8FC2000C   LW V0, 12(FP)
9D000E3C  90420001   LBU V0, 1(V0)
9D000E40  00402825   OR A1, V0, ZERO
9D000E44  8FC30008   LW V1, 8(FP)
9D000E48  00801025   OR V0, A0, ZERO
9D000E4C  00021080   SLL V0, V0, 2
9D000E50  00441021   ADDU V0, V0, A0
9D000E54  00021040   SLL V0, V0, 1
9D000E58  00621021   ADDU V0, V1, V0
9D000E5C  00451021   ADDU V0, V0, A1
9D000E60  A0400000   SB ZERO, 0(V0)
9D000E64  10000010   BEQ ZERO, ZERO, 0x9D000EA8
9D000E68  00000000   NOP
9D000E6C  8FC2000C   LW V0, 12(FP)
9D000E70  90420000   LBU V0, 0(V0)
9D000E74  00402025   OR A0, V0, ZERO
9D000E78  8FC2000C   LW V0, 12(FP)
9D000E7C  90420001   LBU V0, 1(V0)
9D000E80  00402825   OR A1, V0, ZERO
9D000E84  8FC30008   LW V1, 8(FP)
9D000E88  00801025   OR V0, A0, ZERO
9D000E8C  00021080   SLL V0, V0, 2
9D000E90  00441021   ADDU V0, V0, A0
9D000E94  00021040   SLL V0, V0, 1
9D000E98  00621021   ADDU V0, V1, V0
9D000E9C  00451021   ADDU V0, V0, A1
9D000EA0  A0400000   SB ZERO, 0(V0)
9D000EA4  00000000   NOP
9D000EA8  8F828068   LW V0, -32664(GP)
9D000EAC  03C0E825   OR SP, FP, ZERO
9D000EB0  8FBE0004   LW FP, 4(SP)
9D000EB4  27BD0008   ADDIU SP, SP, 8
9D000EB8  03E00008   JR RA
9D000EBC  00000000   NOP
9D000EC0  27BDFFF8   ADDIU SP, SP, -8
9D000EC4  AFBE0004   SW FP, 4(SP)
9D000EC8  03A0F025   OR FP, SP, ZERO
9D000ECC  AFC40008   SW A0, 8(FP)
9D000ED0  A380803C   SB ZERO, -32708(GP)
9D000ED4  8FC20008   LW V0, 8(FP)
9D000ED8  9042003F   LBU V0, 63(V0)
9D000EDC  10400005   BEQ V0, ZERO, 0x9D000EF4
9D000EE0  00000000   NOP
9D000EE4  9382803C   LBU V0, -32708(GP)
9D000EE8  34420008   ORI V0, V0, 8
9D000EEC  304200FF   ANDI V0, V0, 255
9D000EF0  A382803C   SB V0, -32708(GP)
9D000EF4  8FC20008   LW V0, 8(FP)
9D000EF8  9042003E   LBU V0, 62(V0)
9D000EFC  10400005   BEQ V0, ZERO, 0x9D000F14
9D000F00  00000000   NOP
9D000F04  9382803C   LBU V0, -32708(GP)
9D000F08  34420004   ORI V0, V0, 4
9D000F0C  304200FF   ANDI V0, V0, 255
9D000F10  A382803C   SB V0, -32708(GP)
9D000F14  8FC20008   LW V0, 8(FP)
9D000F18  9042003D   LBU V0, 61(V0)
9D000F1C  10400005   BEQ V0, ZERO, 0x9D000F34
9D000F20  00000000   NOP
9D000F24  9382803C   LBU V0, -32708(GP)
9D000F28  34420002   ORI V0, V0, 2
9D000F2C  304200FF   ANDI V0, V0, 255
9D000F30  A382803C   SB V0, -32708(GP)
9D000F34  8FC20008   LW V0, 8(FP)
9D000F38  9042003C   LBU V0, 60(V0)
9D000F3C  10400005   BEQ V0, ZERO, 0x9D000F54
9D000F40  00000000   NOP
9D000F44  9382803C   LBU V0, -32708(GP)
9D000F48  34420001   ORI V0, V0, 1
9D000F4C  304200FF   ANDI V0, V0, 255
9D000F50  A382803C   SB V0, -32708(GP)
9D000F54  9382803C   LBU V0, -32708(GP)
9D000F58  03C0E825   OR SP, FP, ZERO
9D000F5C  8FBE0004   LW FP, 4(SP)
9D000F60  27BD0008   ADDIU SP, SP, 8
9D000F64  03E00008   JR RA
9D000F68  00000000   NOP
9D000F6C  27BDFFE0   ADDIU SP, SP, -32
9D000F70  AFBF001C   SW RA, 28(SP)
9D000F74  AFBE0018   SW FP, 24(SP)
9D000F78  03A0F025   OR FP, SP, ZERO
9D000F7C  AFC40020   SW A0, 32(FP)
9D000F80  A3808040   SB ZERO, -32704(GP)
9D000F84  A380803F   SB ZERO, -32705(GP)
9D000F88  A380803E   SB ZERO, -32706(GP)
9D000F8C  A380803D   SB ZERO, -32707(GP)
9D000F90  10000085   BEQ ZERO, ZERO, 0x9D0011A8
9D000F94  00000000   NOP
9D000F98  0F4022EF   JAL rand
9D000F9C  00000000   NOP
9D000FA0  00402025   OR A0, V0, ZERO
9D000FA4  3C022AAA   LUI V0, 10922
9D000FA8  3442AAAB   ORI V0, V0, -21845
9D000FAC  00820018   MULT 0, A0, V0
9D000FB0  00001810   MFHI V1
9D000FB4  000417C3   SRA V0, A0, 31
9D000FB8  00621823   SUBU V1, V1, V0
9D000FBC  00601025   OR V0, V1, ZERO
9D000FC0  00021040   SLL V0, V0, 1
9D000FC4  00431021   ADDU V0, V0, V1
9D000FC8  00021040   SLL V0, V0, 1
9D000FCC  00821823   SUBU V1, A0, V0
9D000FD0  306200FF   ANDI V0, V1, 255
9D000FD4  A3828041   SB V0, -32703(GP)
9D000FD8  0F4022EF   JAL rand
9D000FDC  00000000   NOP
9D000FE0  00402025   OR A0, V0, ZERO
9D000FE4  3C026666   LUI V0, 26214
9D000FE8  34426667   ORI V0, V0, 26215
9D000FEC  00820018   MULT 0, A0, V0
9D000FF0  00001010   MFHI V0
9D000FF4  00021883   SRA V1, V0, 2
9D000FF8  000417C3   SRA V0, A0, 31
9D000FFC  00621823   SUBU V1, V1, V0
9D001000  00601025   OR V0, V1, ZERO
9D001004  00021080   SLL V0, V0, 2
9D001008  00431021   ADDU V0, V0, V1
9D00100C  00021040   SLL V0, V0, 1
9D001010  00821823   SUBU V1, A0, V0
9D001014  306200FF   ANDI V0, V1, 255
9D001018  A3828042   SB V0, -32702(GP)
9D00101C  0F4022EF   JAL rand
9D001020  00000000   NOP
9D001024  00401825   OR V1, V0, ZERO
9D001028  000317C3   SRA V0, V1, 31
9D00102C  000217C2   SRL V0, V0, 31
9D001030  00621821   ADDU V1, V1, V0
9D001034  30630001   ANDI V1, V1, 1
9D001038  00621023   SUBU V0, V1, V0
9D00103C  304200FF   ANDI V0, V0, 255
9D001040  A3828043   SB V0, -32701(GP)
9D001044  93828040   LBU V0, -32704(GP)
9D001048  14400010   BNE V0, ZERO, 0x9D00108C
9D00104C  00000000   NOP
9D001050  93838041   LBU V1, -32703(GP)
9D001054  93848042   LBU A0, -32702(GP)
9D001058  93828043   LBU V0, -32701(GP)
9D00105C  00402825   OR A1, V0, ZERO
9D001060  24020003   ADDIU V0, ZERO, 3
9D001064  AFA20010   SW V0, 16(SP)
9D001068  00A03825   OR A3, A1, ZERO
9D00106C  00803025   OR A2, A0, ZERO
9D001070  00602825   OR A1, V1, ZERO
9D001074  8FC40020   LW A0, 32(FP)
9D001078  0F4000ED   JAL FieldAddBoat
9D00107C  00000000   NOP
9D001080  A3828040   SB V0, -32704(GP)
9D001084  10000048   BEQ ZERO, ZERO, 0x9D0011A8
9D001088  00000000   NOP
9D00108C  93838040   LBU V1, -32704(GP)
9D001090  24020001   ADDIU V0, ZERO, 1
9D001094  14620013   BNE V1, V0, 0x9D0010E4
9D001098  00000000   NOP
9D00109C  9382803F   LBU V0, -32705(GP)
9D0010A0  14400010   BNE V0, ZERO, 0x9D0010E4
9D0010A4  00000000   NOP
9D0010A8  93838041   LBU V1, -32703(GP)
9D0010AC  93848042   LBU A0, -32702(GP)
9D0010B0  93828043   LBU V0, -32701(GP)
9D0010B4  00402825   OR A1, V0, ZERO
9D0010B8  24020002   ADDIU V0, ZERO, 2
9D0010BC  AFA20010   SW V0, 16(SP)
9D0010C0  00A03825   OR A3, A1, ZERO
9D0010C4  00803025   OR A2, A0, ZERO
9D0010C8  00602825   OR A1, V1, ZERO
9D0010CC  8FC40020   LW A0, 32(FP)
9D0010D0  0F4000ED   JAL FieldAddBoat
9D0010D4  00000000   NOP
9D0010D8  A382803F   SB V0, -32705(GP)
9D0010DC  10000032   BEQ ZERO, ZERO, 0x9D0011A8
9D0010E0  00000000   NOP
9D0010E4  9383803F   LBU V1, -32705(GP)
9D0010E8  24020001   ADDIU V0, ZERO, 1
9D0010EC  14620013   BNE V1, V0, 0x9D00113C
9D0010F0  00000000   NOP
9D0010F4  9382803E   LBU V0, -32706(GP)
9D0010F8  14400010   BNE V0, ZERO, 0x9D00113C
9D0010FC  00000000   NOP
9D001100  93838041   LBU V1, -32703(GP)
9D001104  93848042   LBU A0, -32702(GP)
9D001108  93828043   LBU V0, -32701(GP)
9D00110C  00402825   OR A1, V0, ZERO
9D001110  24020001   ADDIU V0, ZERO, 1
9D001114  AFA20010   SW V0, 16(SP)
9D001118  00A03825   OR A3, A1, ZERO
9D00111C  00803025   OR A2, A0, ZERO
9D001120  00602825   OR A1, V1, ZERO
9D001124  8FC40020   LW A0, 32(FP)
9D001128  0F4000ED   JAL FieldAddBoat
9D00112C  00000000   NOP
9D001130  A382803E   SB V0, -32706(GP)
9D001134  1000001C   BEQ ZERO, ZERO, 0x9D0011A8
9D001138  00000000   NOP
9D00113C  9383803E   LBU V1, -32706(GP)
9D001140  24020001   ADDIU V0, ZERO, 1
9D001144  14620011   BNE V1, V0, 0x9D00118C
9D001148  00000000   NOP
9D00114C  9382803D   LBU V0, -32707(GP)
9D001150  1440000E   BNE V0, ZERO, 0x9D00118C
9D001154  00000000   NOP
9D001158  93828041   LBU V0, -32703(GP)
9D00115C  93838042   LBU V1, -32702(GP)
9D001160  93848043   LBU A0, -32701(GP)
9D001164  AFA00010   SW ZERO, 16(SP)
9D001168  00803825   OR A3, A0, ZERO
9D00116C  00603025   OR A2, V1, ZERO
9D001170  00402825   OR A1, V0, ZERO
9D001174  8FC40020   LW A0, 32(FP)
9D001178  0F4000ED   JAL FieldAddBoat
9D00117C  00000000   NOP
9D001180  A382803D   SB V0, -32707(GP)
9D001184  10000008   BEQ ZERO, ZERO, 0x9D0011A8
9D001188  00000000   NOP
9D00118C  9383803D   LBU V1, -32707(GP)
9D001190  24020001   ADDIU V0, ZERO, 1
9D001194  14620004   BNE V1, V0, 0x9D0011A8
9D001198  00000000   NOP
9D00119C  24020001   ADDIU V0, ZERO, 1
9D0011A0  10000009   BEQ ZERO, ZERO, 0x9D0011C8
9D0011A4  00000000   NOP
9D0011A8  9382803D   LBU V0, -32707(GP)
9D0011AC  1040FF7A   BEQ V0, ZERO, 0x9D000F98
9D0011B0  00000000   NOP
9D0011B4  9383803D   LBU V1, -32707(GP)
9D0011B8  24020001   ADDIU V0, ZERO, 1
9D0011BC  1062FF76   BEQ V1, V0, 0x9D000F98
9D0011C0  00000000   NOP
9D0011C4  00001025   OR V0, ZERO, ZERO
9D0011C8  03C0E825   OR SP, FP, ZERO
9D0011CC  8FBF001C   LW RA, 28(SP)
9D0011D0  8FBE0018   LW FP, 24(SP)
9D0011D4  27BD0020   ADDIU SP, SP, 32
9D0011D8  03E00008   JR RA
9D0011DC  00000000   NOP
9D0011E0  27BDFFE8   ADDIU SP, SP, -24
9D0011E4  AFBF0014   SW RA, 20(SP)
9D0011E8  AFBE0010   SW FP, 16(SP)
9D0011EC  03A0F025   OR FP, SP, ZERO
9D0011F0  AFC40018   SW A0, 24(FP)
9D0011F4  AFC5001C   SW A1, 28(FP)
9D0011F8  8F82804C   LW V0, -32692(GP)
9D0011FC  24420001   ADDIU V0, V0, 1
9D001200  AF82804C   SW V0, -32692(GP)
9D001204  0F4022EF   JAL rand
9D001208  00000000   NOP
9D00120C  00401825   OR V1, V0, ZERO
9D001210  8F82804C   LW V0, -32692(GP)
9D001214  00621021   ADDU V0, V1, V0
9D001218  00402025   OR A0, V0, ZERO
9D00121C  0F40245F   JAL srand
9D001220  00000000   NOP
9D001224  0F4022EF   JAL rand
9D001228  00000000   NOP
9D00122C  00402025   OR A0, V0, ZERO
9D001230  3C022AAA   LUI V0, 10922
9D001234  3442AAAB   ORI V0, V0, -21845
9D001238  00820018   MULT 0, A0, V0
9D00123C  00001810   MFHI V1
9D001240  000417C3   SRA V0, A0, 31
9D001244  00621823   SUBU V1, V1, V0
9D001248  00601025   OR V0, V1, ZERO
9D00124C  00021040   SLL V0, V0, 1
9D001250  00431021   ADDU V0, V0, V1
9D001254  00021040   SLL V0, V0, 1
9D001258  00821823   SUBU V1, A0, V0
9D00125C  306200FF   ANDI V0, V1, 255
9D001260  A3828041   SB V0, -32703(GP)
9D001264  0F4022EF   JAL rand
9D001268  00000000   NOP
9D00126C  00402025   OR A0, V0, ZERO
9D001270  3C026666   LUI V0, 26214
9D001274  34426667   ORI V0, V0, 26215
9D001278  00820018   MULT 0, A0, V0
9D00127C  00001010   MFHI V0
9D001280  00021883   SRA V1, V0, 2
9D001284  000417C3   SRA V0, A0, 31
9D001288  00621823   SUBU V1, V1, V0
9D00128C  00601025   OR V0, V1, ZERO
9D001290  00021080   SLL V0, V0, 2
9D001294  00431021   ADDU V0, V0, V1
9D001298  00021040   SLL V0, V0, 1
9D00129C  00821823   SUBU V1, A0, V0
9D0012A0  306200FF   ANDI V0, V1, 255
9D0012A4  A3828042   SB V0, -32702(GP)
9D0012A8  93828041   LBU V0, -32703(GP)
9D0012AC  00402025   OR A0, V0, ZERO
9D0012B0  93828042   LBU V0, -32702(GP)
9D0012B4  00402825   OR A1, V0, ZERO
9D0012B8  8FC3001C   LW V1, 28(FP)
9D0012BC  00801025   OR V0, A0, ZERO
9D0012C0  00021080   SLL V0, V0, 2
9D0012C4  00441021   ADDU V0, V0, A0
9D0012C8  00021040   SLL V0, V0, 1
9D0012CC  00621021   ADDU V0, V1, V0
9D0012D0  00451021   ADDU V0, V0, A1
9D0012D4  90430000   LBU V1, 0(V0)
9D0012D8  24020005   ADDIU V0, ZERO, 5
9D0012DC  1462FFD1   BNE V1, V0, 0x9D001224
9D0012E0  00000000   NOP
9D0012E4  93828041   LBU V0, -32703(GP)
9D0012E8  A3828044   SB V0, -32700(GP)
9D0012EC  93828042   LBU V0, -32702(GP)
9D0012F0  A3828045   SB V0, -32699(GP)
9D0012F4  00000000   NOP
9D0012F8  8FC20018   LW V0, 24(FP)
9D0012FC  8F848044   LW A0, -32700(GP)
9D001300  8F838048   LW V1, -32696(GP)
9D001304  AC440000   SW A0, 0(V0)
9D001308  AC430004   SW V1, 4(V0)
9D00130C  8FC20018   LW V0, 24(FP)
9D001310  03C0E825   OR SP, FP, ZERO
9D001314  8FBF0014   LW RA, 20(SP)
9D001318  8FBE0010   LW FP, 16(SP)
9D00131C  27BD0018   ADDIU SP, SP, 24
9D001320  03E00008   JR RA
9D001324  00000000   NOP
---  c:/users/james/desktop/ece13/jensming/lab09/lab9.x/circularbuffer.c  -------------------------------
1:                   /*
2:                    * Copyright Bar Smith, Bryant Mairs 2012
3:                    *
4:                    * This program is free software: you can redistribute it and/or modify
5:                    * it under the terms of the GNU General Public License as published by
6:                    * the Free Software Foundation, either version 3 of the License, or
7:                    * (at your option) any later version.
8:                    *
9:                    * This program is distributed in the hope that it will be useful,
10:                   * but WITHOUT ANY WARRANTY; without even the implied warranty of
11:                   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
12:                   * GNU General Public License for more details.
13:                   *
14:                   * You should have received a copy of the GNU General Public License
15:                   * along with this program.  If not, see <http://www.gnu.org/licenses.
16:                   */
17:                   
18:                  /**
19:                   * @file   CircularBuffer.c
20:                   * @author Bar Smith
21:                   * @author Bryant Mairs
22:                   * @date   August, 2012
23:                   * @brief  Provides a circular buffer implementation for bytes and non-primitive datatypes.
24:                   *
25:                   * This circular buffer provides a single buffer interface for almost any situation necessary. It
26:                   * has been written for use with the dsPIC33f, but has been tested on x86.
27:                   *
28:                   * Unit testing has been completed on x86 by compiling with the UNIT_TEST_CIRCULAR_BUFFER macro.
29:                   * With gcc: `gcc CircularBuffer.c -DUNIT_TEST_CIRCULAR_BUFFER -Wall -g`
30:                   */
31:                  #include "CircularBuffer.h"
32:                  #include "BOARD.h"
33:                  
34:                  #include <stddef.h>
35:                  #include <stdint.h>
36:                  #include <stdlib.h>
37:                  #include <stdio.h>
38:                  
39:                  
40:                  int CB_Init(CircularBuffer *b, uint8_t *buffer, const uint16_t size)
41:                  {
42:                  	// Check the validity of pointers.
43:                  	if (!buffer || !b) {
44:                  		return FALSE;
45:                  	}
46:                  
47:                  	// Checks that the size is valid.
48:                  	if (size <= 1) {
49:                  		return FALSE;
50:                  	}
51:                  
52:                  	// Store the buffer pointer and initialize it all to zero.
53:                  	// This is not necessary, but makes debugging easier.
54:                  	b->data = buffer;
55:                  	uint16_t i;
56:                  	for (i = 0; i < size; ++i) {
57:                  		b->data[i] = 0;
58:                  	}
59:                  
60:                  	// Initialize all variables. The only one of note is `empty`, which is initialized to TRUE.
61:                  	b->readIndex = 0;
62:                  	b->writeIndex = 0;
63:                  	b->staticSize = size;
64:                  	b->dataSize = 0;
65:                  	b->overflowCount = 0;
66:                  
67:                  	return TRUE;
68:                  }
69:                  
70:                  int CB_ReadByte(CircularBuffer *b, uint8_t *outData)
71:                  {
72:                  	if (b) {
73:                  		if (b->dataSize) {
74:                  			//copys the last element from the buffer to data
75:                  			*outData = b->data[b->readIndex];
76:                  			//sets the buffer empty if there was only one element in it
77:                  			if (b->dataSize == 1) {
78:                  				//checks for wrap around
79:                  				b->readIndex = b->readIndex < (b->staticSize - 1)?b->readIndex + 1:0;
80:                  			} else {
81:                  				//checks for wrap around and moves indicies
82:                  				b->readIndex = b->readIndex < (b->staticSize - 1)?b->readIndex + 1:0;
83:                  			}
84:                  			--b->dataSize;
85:                  			return TRUE;
86:                  		}
87:                  	}
88:                  	return FALSE;
89:                  }
90:                  
91:                  int CB_ReadMany(CircularBuffer *b, void *outData, uint16_t size)
92:                  {
93:                  	int16_t i;
94:                  	if (b && outData) {
95:                  		//cast data so that it can be used to ready bytes
96:                  		uint8_t *data_u = (uint8_t*)outData;
97:                  		//check if there are enough items in the buffer to read
98:                  		if (b->dataSize >= size) {
99:                  
100:                 			// And read the data.
101:                 			for (i = 0; i < size; ++i) {
102:                 				data_u[i] = b->data[b->readIndex];
103:                 
104:                 				// Update the readIndex taking into account wrap-around.
105:                 				if (b->readIndex < b->staticSize - 1) {
106:                 					++b->readIndex;
107:                 				} else {
108:                 					b->readIndex = 0;
109:                 				}
110:                 			}
111:                 			b->dataSize -= size;
112:                 			return TRUE;
113:                 		}
114:                 	}
115:                 	return FALSE;
116:                 }
117:                 
118:                 int CB_WriteByte(CircularBuffer *b, uint8_t inData)
119:                 {
120:                 	if (b) {
121:                 		// If the buffer is full the overflow count is incremented and no data is written.
122:                 		if (b->dataSize == b->staticSize) {
123:                 			++b->overflowCount;
124:                 			return FALSE;
125:                 		} else {
126:                 			b->data[b->writeIndex] = inData;
127:                 			// Now update the writeIndex taking into account wrap-around.
128:                 			b->writeIndex = b->writeIndex < (b->staticSize - 1) ? b->writeIndex + 1: 0;
129:                 			++b->dataSize;
130:                 			return TRUE;
131:                 		}
132:                 	}
133:                 	return FALSE;
134:                 }
135:                 
136:                 int CB_WriteMany(CircularBuffer *b, const void *inData, uint16_t size, uint8_t failEarly)
137:                 {
138:                 	if (b && inData) {
139:                 		uint8_t *data_u = (uint8_t*)inData;
140:                 		//if the fail early value is set
141:                 		if (failEarly) {
142:                 			//Checks to make sure there is enough space
143:                 			if (b->staticSize - b->dataSize < size) {
144:                 				return FALSE;
145:                 			} else {
146:                 				int i = 0;
147:                 				//runs size times
148:                 				while (i < size) {
149:                 					//writes to the buffer
150:                 					b->data[b->writeIndex] = data_u[i];
151:                 					++i;
152:                 					//checks for wrap around and moves the indicies
153:                 					b->writeIndex = b->writeIndex < (b->staticSize - 1) ? b->writeIndex + 1: 0;
154:                 				}
155:                 				b->dataSize += i;
156:                 				return TRUE;
157:                 			}
158:                 		}
159:                 		// Otherwise we try and write as much data as we can.
160:                 		else {
161:                 			int i = 0;
162:                 			while (i < size) {
163:                 				//if the buffer is full the overflow count is increased and FALSE is returned
164:                 				if (b->dataSize == b->staticSize) {
165:                 					b->overflowCount += (size - i);
166:                 					return FALSE;
167:                 				}
168:                 				//reads an element from the buffer to data
169:                 				b->data[b->writeIndex] = data_u[i];
170:                 				++i;
171:                 				++b->dataSize;
172:                 				//move the indicies and check for wrap around
173:                 				b->writeIndex = (b->writeIndex < (b->staticSize - 1)) ? b->writeIndex + 1: 0;
174:                 			}
175:                 			return TRUE;
176:                 		}
177:                 	}
178:                 	return FALSE;
179:                 }
180:                 
181:                 int CB_Peek(const CircularBuffer *b, uint8_t *outData)
182:                 {
183:                 	if (b) {
184:                 		if (b->dataSize > 0) {
185:                 			*outData = b->data[b->readIndex];
186:                 			return TRUE;
187:                 		}
188:                 	}
189:                 	return FALSE;
190:                 }
191:                 
192:                 int CB_PeekMany (const CircularBuffer *b, void *outData, uint16_t size)
193:                 {
194:                 	uint16_t i;
195:                 	int tmpHead;
196:                 
197:                 	if (b) {
198:                 		uint8_t *data_u = (uint8_t*)outData;
199:                 		// Make sure there's enough data to read off and read them off one-by-one.
200:                 		if (b->dataSize >= size) {
201:                 			tmpHead = b->readIndex;
202:                 			for (i = 0; i < size; ++i) {
203:                 				data_u[i] = b->data[tmpHead];
204:                 
205:                 				// Handle wrapping around the buffer.
206:                 				if (tmpHead < b->staticSize - 1) {
207:                 					++tmpHead;
208:                 				} else {
209:                 					tmpHead = 0;
210:                 				}
211:                 			}
212:                 			return TRUE;
213:                 		}
214:                 	}
215:                 	return FALSE;
216:                 }
217:                 
218:                 int CB_Remove(CircularBuffer *b, uint16_t size){
219:                 	// If there are more elements in the buffer.
220:                 	if (b->dataSize > size) {
221:                 		// Checks to see if the buffer will wrap around.
222:                 		if ((b->staticSize - b->readIndex) < size) {
223:                 			b-> readIndex = size - (b->staticSize - b->readIndex);
224:                 		} else {
225:                 			// If the buffer will not wrap around size is added to read index.
226:                 			b->readIndex = b->readIndex + size;
227:                 		}
228:                 		b->dataSize -= size;
229:                 		return TRUE;
230:                 	}
231:                 	// If one is trying to remove more elements than are in the buffer, the buffer is made empty.
232:                 	else {
233:                 		b->readIndex = b->writeIndex;
234:                 		b->dataSize = 0;
235:                 		return TRUE;
236:                 	}
237:                 }
238:                 
239:                 /**
240:                  * This begins the unit testing code. Directions for compilation are at the top of the header file.
241:                  */
242:                 #ifdef UNIT_TEST_CIRCULAR_BUFFER
243:                 
244:                 #include <string.h>
245:                 #include <stdio.h>
246:                 #include <assert.h>
247:                 
248:                 /**
249:                  * @brief A struct used for testing.
250:                  */
251:                 typedef struct {
252:                 	uint8_t hey;
253:                 	int foo;
254:                 	float bar;
255:                 } TestStruct;
256:                 
257:                 /**
258:                  * @brief Returns whether two circular buffers are equal in their metadata.
259:                  *
260:                  * This does not do an exact comparison of their data arrays, just their metadata.
261:                  */
262:                 int TestStructEqual(const TestStruct *a, const TestStruct *b)
263:                 {
264:                 	return (a->hey == b->hey &&
265:                 	        a->foo == b->foo &&
266:                 	        a->bar == b->bar);
267:                 }
268:                 
269:                 /**
270:                  * @brief Run various unit tests confirming proper operation of the CircularBuffer.
271:                  *
272:                  * To run (assuming all files in the same directory and that's your current directory):
273:                  * ```
274:                  * $ gcc CircularBuffer.c -DUNIT_TEST_CIRCULAR_BUFFER -Wall -g
275:                  * $ a.out
276:                  * Running unit tests.
277:                  * All tests passed.
278:                  * $
279:                  */
280:                 int main()
281:                 {
282:                 	printf("Running unit tests.\n");
283:                 
284:                 	// These tests check the ability of the circular buffer to write a single item and
285:                 	// then read it back.
286:                 	{
287:                 		// Create a new circular buffer.
288:                 		CircularBuffer b;
289:                 		uint16_t size = 256;
290:                 		uint8_t *buffer = (uint8_t*)malloc(256*sizeof(uint8_t));
291:                 		CB_Init(&b, buffer, size);
292:                 		assert(!b.dataSize);
293:                 
294:                 		// Add a single item and check.
295:                 		CB_WriteByte(&b, 0x56);
296:                 		assert(b.dataSize == 1);
297:                 		uint8_t peekval;
298:                 		assert(CB_Peek(&b, &peekval));
299:                 		assert(peekval == 0x56);
300:                 
301:                 
302:                 		// Remove that item and check.
303:                 		uint8_t d;
304:                 		assert(CB_ReadByte(&b, &d) && d == 0x56);
305:                 		assert(b.dataSize == 0);
306:                 		assert(CB_Peek(&b, &peekval) == 0);
307:                 
308:                 		free(buffer);
309:                 	}
310:                 
311:                 	/* This tests the ability of the buffer to read and write many items. This code also tests
312:                 	writing two and reading from a buffer which has been wrapped around. Deeppeek is tested.
313:                 	*/
314:                 	{
315:                 		// Create a new circular buffer.
316:                 		CircularBuffer b;
317:                 		uint16_t size = 256;
318:                 		uint8_t *buffer = (uint8_t*)malloc(256*sizeof(uint8_t));
319:                 		CB_Init(&b, buffer, size);
320:                 		assert(!b.dataSize);
321:                 
322:                 		// Here we make a 1016 int8_t long string for testing. Testing with the library with BUFFER_SIZE
323:                 		// set to larger than 1016 will produce errors.
324:                 		int8_t testString[] = "Copyright (C) <year> <copyright holders> Permission is hereby granted, free of int8_tge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.";
325:                 		// Fill the buffer to SIZE+1 and check.
326:                 		uint16_t i;
327:                 		for (i = 0; i < b.staticSize; ++i) {
328:                 			assert(b.dataSize == i);
329:                 			assert(CB_WriteByte(&b, testString[i]));
330:                 			assert(b.dataSize == i + 1);
331:                 		}
332:                 		assert(!CB_WriteByte(&b, 0x89));
333:                 		assert(b.overflowCount == 1);
334:                 
335:                 
336:                 		// Run a deepPeek on the now-full buffer.
337:                 		uint8_t tmpString[b.staticSize];
338:                 		assert(CB_PeekMany(&b, tmpString, b.staticSize));
339:                 		assert(b.dataSize == b.staticSize);
340:                 
341:                 
342:                 		i = 0;
343:                 		while(i < 256){
344:                 			++i;
345:                 		}
346:                 		assert(memcmp(testString, tmpString, b.staticSize) == 0);
347:                 		assert(b.dataSize);
348:                 
349:                 		// Verify reading of an entire circular-buffer
350:                 		uint8_t d;
351:                 		i = b.dataSize;
352:                 		while (i > 0) {
353:                 			assert(CB_ReadByte(&b, &d));
354:                 			assert(d == testString[b.staticSize - i]);
355:                 			i--;
356:                 		}
357:                 		assert(b.dataSize == 0);
358:                 		d = 0x77;
359:                 		int8_t d2 = d;
360:                 		assert(!CB_ReadByte(&b, &d));
361:                 		assert(d == d2); //nothing has been read
362:                 
363:                 		// Test element insertion when the buffer wraps around.
364:                 		uint8_t peekval;
365:                 		assert(CB_WriteByte(&b, 91));
366:                 		assert(b.overflowCount == 1); // Overflow is triggered on an earlier test
367:                 		assert(b.dataSize == 1);
368:                 		CB_Peek(&b, &peekval);
369:                 		assert(peekval == 91);
370:                 		assert(CB_WriteByte(&b, 92));
371:                 		assert(b.dataSize == 2);
372:                 		assert(CB_WriteByte(&b, 93));
373:                 		assert(b.dataSize == 3);
374:                 		assert(CB_WriteByte(&b, 94));
375:                 		assert(b.dataSize == 4);
376:                 
377:                 		// Test DeepPeek on wrapped-around buffers
378:                 		uint8_t peekData[4];
379:                 		assert(CB_PeekMany(&b, peekData, 4));
380:                 		assert(peekData[0] == 91);
381:                 		assert(peekData[1] == 92);
382:                 		assert(peekData[2] == 93);
383:                 		assert(peekData[3] == 94);
384:                 
385:                 		// Test reading now.
386:                 		assert(CB_ReadByte(&b, &d) && d == 91);
387:                 		assert(CB_ReadByte(&b, &d) && d == 92);
388:                 		assert(CB_ReadByte(&b, &d) && d == 93);
389:                 		assert(CB_ReadByte(&b, &d) && d == 94);
390:                 		assert(!CB_ReadByte(&b, &d) && d == 94);
391:                 
392:                 		free(buffer);
393:                 	}
394:                 
395:                 	/* This section of test code checks that CB_Init will not initialize a buffer if its
396:                 	arguments are not valid.
397:                 	*/
398:                 	{
399:                 
400:                 		//Test initialization with invalid arguments
401:                 		CircularBuffer b;
402:                 		uint8_t *buffer = (uint8_t*)malloc(256*sizeof(uint8_t));
403:                 		assert(CB_Init(&b, buffer, 0) == FALSE); //checks the invalid argument size = 0
404:                 		assert(CB_Init(&b, buffer, 1) == FALSE); //checks the invalid argument size = 1
405:                 		assert(CB_Init(&b, buffer, 128) == TRUE); //checks that the function returns TRUE upon TRUE
406:                 		buffer = NULL;
407:                 		assert(CB_Init(&b, buffer, 16) == FALSE); //tests the invalid argument where buffer is a null pointer
408:                 
409:                 		free(buffer);
410:                 	}
411:                 
412:                 	/* This code tests the buffer at the edge case size is two.
413:                 	*/
414:                 	{
415:                 		//Test functionality at edge case size is 2
416:                 		uint8_t CBtestbuf[2];
417:                 		CircularBuffer b;
418:                 		CB_Init(&b, CBtestbuf, 2);  //creates a new buffer of length two
419:                 		assert(!b.dataSize);
420:                 
421:                 		// Add a single item and check.
422:                 		uint8_t peekval;
423:                 		CB_WriteByte(&b, 0x56);
424:                 		assert(b.dataSize == 1);
425:                 		CB_Peek(&b, &peekval);
426:                 		assert(peekval == 0x56);
427:                 
428:                 		// Remove that item and check.
429:                 		uint8_t e;
430:                 		assert(CB_ReadByte(&b, &e) && e == 0x56);
431:                 		assert(b.dataSize == 0);
432:                 		assert(CB_Peek(&b, &peekval) == 0);
433:                 
434:                 		//Now write two characters to the buffer
435:                 		assert(CB_WriteByte(&b, 0x56));
436:                 		assert(CB_WriteByte(&b, 0x58));
437:                 		assert(b.dataSize == 2); //Check to see if the length is correct
438:                 		CB_WriteByte(&b, 0x59);  //Write a third element to the two bit buffer
439:                 		assert(b.overflowCount == 1); //Check that overflow has occurred
440:                 		assert(CB_ReadByte(&b, &e) && e == 0x56); //Check Reading an element
441:                 		assert(b.dataSize == 1); //Check the length of the buffer
442:                 		assert(CB_ReadByte(&b, &e) && e == 0x58); //Check Reading an element
443:                 		assert(b.dataSize == 0); //Check that the buffer is now empty
444:                 		assert(CB_ReadByte(&b, &e) == FALSE); //checks that the empty buffer cannot be read from
445:                 	}
446:                 
447:                 	/* This code tests the edge case where the buffer is at the maximum size.  The size
448:                 	is limited by the maximum value which can be held in a uint16_t.
449:                 	*/
450:                 	{
451:                 		//Test functionality at edge case size is UINT16_MAX
452:                 		CircularBuffer b;
453:                 		uint8_t *buffertwo = (uint8_t*)malloc(UINT16_MAX*sizeof(uint8_t));
454:                 
455:                 		CB_Init(&b, buffertwo, UINT16_MAX);
456:                 		assert(!b.dataSize);
457:                 		assert(b.staticSize == UINT16_MAX);
458:                 
459:                 
460:                 		// Here we use the same UINT16_MAX int8_character long string for testing. Testing with the library with BUFFER_SIZE
461:                 		// set to larger than UINT16_MAX will produce errors.
462:                 		uint8_t testStringtwo[b.staticSize+1];
463:                 
464:                 		int i;
465:                 		for (i = 0; i < b.staticSize; ++i) {
466:                 			testStringtwo[i] = i;
467:                 		}
468:                 
469:                 		// Fill the buffer to SIZE+1 and check
470:                 		for (i = 0; i < b.staticSize; ++i) {
471:                 			assert(b.dataSize == i);
472:                 			assert(CB_WriteByte(&b, i));
473:                 			assert(b.dataSize == i + 1);
474:                 		}
475:                 		assert(!CB_WriteByte(&b, 0x89));
476:                 		assert(b.overflowCount == 1);
477:                 
478:                 		// Run a deepPeek on the now-full buffer.
479:                 		uint8_t tmpStringtwo[b.staticSize];
480:                 		assert(CB_PeekMany(&b, tmpStringtwo, b.staticSize));
481:                 		assert(b.dataSize == b.staticSize);
482:                 		assert(memcmp(testStringtwo, tmpStringtwo, b.staticSize) == 0);
483:                 
484:                 		// Verify reading of an entire circular-buffer
485:                 		uint8_t d;
486:                 		for (i = b.dataSize; i > 0; --i) {
487:                 			assert(CB_ReadByte(&b, &d));
488:                 			assert(d == testStringtwo[b.staticSize - i]);
489:                 		}
490:                 		assert(b.dataSize == 0);
491:                 		d = 0x77;
492:                 		int8_t d3 = d;
493:                 		assert(!CB_ReadByte(&b, &d));
494:                 		assert(d == d3);
495:                 		assert(!b.dataSize);
496:                 
497:                 		// Test element insertion when the buffer wraps around.
498:                 		uint8_t peekval;
499:                 		assert(CB_WriteByte(&b, 91));
500:                 		assert(b.overflowCount == 1); // Overflow is triggered on an earlier test
501:                 		assert(b.dataSize == 1);
502:                 		CB_Peek(&b, &peekval);
503:                 		assert(peekval == 91);
504:                 		assert(CB_WriteByte(&b, 92));
505:                 		assert(b.dataSize == 2);
506:                 		assert(CB_WriteByte(&b, 93));
507:                 		assert(b.dataSize == 3);
508:                 		assert(CB_WriteByte(&b, 94));
509:                 		assert(b.dataSize == 4);
510:                 
511:                 		// Test DeepPeek on wrapped-around buffers
512:                 		uint8_t peekDatatwo[4];
513:                 		assert(CB_PeekMany(&b, peekDatatwo, 4));
514:                 		assert(peekDatatwo[0] == 91);
515:                 		assert(peekDatatwo[1] == 92);
516:                 		assert(peekDatatwo[2] == 93);
517:                 		assert(peekDatatwo[3] == 94);
518:                 
519:                 		// Test reading now.
520:                 		assert(CB_ReadByte(&b, &d) && d == 91);
521:                 		assert(CB_ReadByte(&b, &d) && d == 92);
522:                 		assert(CB_ReadByte(&b, &d) && d == 93);
523:                 		assert(CB_ReadByte(&b, &d) && d == 94);
524:                 		assert(!CB_ReadByte(&b, &d) && d == 94);
525:                 
526:                 		free(buffertwo);
527:                 	}
528:                 
529:                 	/* This tests the remove function
530:                 	*/
531:                 	{
532:                 		/**Test Remove Function*/
533:                 		CircularBuffer b;
534:                 		uint8_t CBtestbuften[10];
535:                 		CB_Init(&b, CBtestbuften, 10);  //creates a new buffer of length ten
536:                 		assert(!b.dataSize);
537:                 
538:                 		int i;
539:                 		i = 0;
540:                 		while(i < 9){
541:                 			CB_WriteByte(&b, i);
542:                 			++i;
543:                 		}
544:                 		//Test removing a valid number of items
545:                 		assert(b.dataSize == 9);
546:                 		assert(CB_Remove(&b, 4));
547:                 		assert(b.dataSize == 5);
548:                 		uint8_t d;
549:                 		CB_ReadByte(&b, &d);
550:                 		assert(d == 4);
551:                 
552:                 		//Test removing more items than are in the buffer
553:                 		assert(b.dataSize == 4);
554:                 		CB_Remove(&b, 10);
555:                 		assert(b.dataSize == 0); //The buffer is now empty
556:                 	}
557:                 
558:                 	/* This tests using the CB_ReadMany function to read a buffer.
559:                 	*/
560:                 	{
561:                 		/**Test reading multiple values from the buffer using CB_ReadMany */
562:                 		CircularBuffer b;
563:                 		uint8_t CBtestbufthirty[30];
564:                 		CB_Init(&b, CBtestbufthirty, 30);  //creates a new buffer of length thirty
565:                 		assert(!b.dataSize);
566:                 
567:                 		int i = 0;
568:                 		while(i < 30){
569:                 			CB_WriteByte(&b, i);
570:                 			++i;
571:                 		}
572:                 		assert(b.dataSize == 30);
573:                 
574:                 		uint8_t readresults[30];
575:                 		assert(CB_ReadMany(&b,readresults, 15));
576:                 		i = 0;
577:                 		while(i < 15){
578:                 			assert(readresults[i] == i);
579:                 			++i;
580:                 		}
581:                 		assert(b.dataSize == 15);
582:                 		assert(CB_ReadMany(&b,readresults, 15));
583:                 		assert(b.dataSize == 0); //Checks that buffer is now empty
584:                 		assert(b.readIndex == b.writeIndex); //checks that the pointers are equal
585:                 	}
586:                 
587:                 
588:                 	/* This tests using CB_WriteMany to write to a buffer.
589:                 	*/
590:                 	{
591:                 		/**Testing the WriteMany function*/
592:                 		CircularBuffer b;
593:                 		uint8_t CBtestbufthirty[30];
594:                 		CB_Init(&b, CBtestbufthirty, 30);  //re-initializes buffer of length thirty
595:                 		assert(!b.dataSize);
596:                 
597:                 		uint8_t readresults[100];
598:                 		int i = 0;
599:                 		while (i < 100) {
600:                 			readresults[i] = i;
601:                 			++i;
602:                 		}
603:                 		assert(CB_WriteMany(&b, readresults, 22, TRUE)); //write 22 values from readresults to the buffer
604:                 		assert(b.dataSize == 22);
605:                 
606:                 		uint8_t d;
607:                 		i = 0;
608:                 		while (i < 22) {
609:                 			CB_ReadByte(&b, &d);
610:                 			assert(d == i);
611:                 			++i;
612:                 		}
613:                 
614:                 		CB_Init(&b, CBtestbufthirty, 30);  //re-initializes buffer of length thirty
615:                 		assert(!b.dataSize);
616:                 		assert(b.readIndex == b.writeIndex);
617:                 		i = 0;
618:                 		while (i < 30) {
619:                 			readresults[i] = i;
620:                 			++i;
621:                 		}
622:                 		CB_WriteMany(&b, readresults, 22, FALSE); //write 22 values from readresults to the buffer
623:                 		assert(b.dataSize == 22);
624:                 		i = 0;
625:                 		while (i < 22) {
626:                 			CB_ReadByte(&b, &d);
627:                 			assert(d == i);
628:                 			++i;
629:                 		}
630:                 
631:                 		/**Now test the failure criteria specified in failEarly*/
632:                 		CB_Init(&b, CBtestbufthirty, 30);  //re-initializes buffer of length thirty
633:                 		CB_WriteMany(&b, readresults, 18, TRUE);
634:                 		assert(b.dataSize == 18);
635:                 		assert(CB_WriteMany(&b, readresults, 50, TRUE) == FALSE); //Writing more than the buffer can hold returns an error
636:                 		assert(b.dataSize == 18); // Checks that nothing was written
637:                 		assert(!CB_WriteMany(&b, readresults, 100, FALSE)); // Now without the size check
638:                 		assert(b.dataSize == 30); //Checks that buffer is now full
639:                 		assert(b.overflowCount == 88); //100-(30-18) = 88 elements have overflowed
640:                 
641:                 		i = 0;
642:                 		while (i < 18) {
643:                 			CB_ReadByte(&b, &d);
644:                 			assert(i == d);
645:                 			++i;
646:                 		}
647:                 		while (i < 12) {
648:                 			CB_ReadByte(&b, &d);
649:                 			assert(i == d);
650:                 			++i;
651:                 		}
652:                 	}
653:                 
654:                 	/* This code tests using the CB_WriteMany and CB_ReadMany functions to read and write
655:                 	structures to a buffer.  CB_PeekMany is also tested.
656:                 	*/
657:                 	{
658:                 		// The test circular buffer
659:                 		CircularBuffer c;
660:                 
661:                 		//Testing writing of a structure to the buffer and reading it back
662:                 		// Create a new circular buffer.
663:                 		TestStruct t1 = {6, 42, 1.5};
664:                 
665:                 		uint16_t sizetwo = 256*sizeof(TestStruct);
666:                 		uint8_t structbuff[sizetwo];
667:                 		assert(CB_Init(&c, structbuff, sizetwo)); //Creates a buffer to hold 256 TestStruct structures
668:                 		assert(!c.dataSize);
669:                 		CB_WriteMany(&c, &t1, sizeof(TestStruct), TRUE);
670:                 		assert(c.dataSize == sizeof(TestStruct));
671:                 
672:                 		TestStruct f;
673:                 		CB_ReadMany(&c, &f, sizeof(TestStruct)); //read the structure back from the buffer
674:                 		assert(!c.dataSize); //the buffer is now empty
675:                 		assert(TestStructEqual(&f, &t1));
676:                 
677:                 		TestStruct t2 = {56, 700, 5.75}; //filled with arbitrary values
678:                 
679:                 		//Write a single structure to the buffer and then read it back
680:                 		assert(c.dataSize == 0);
681:                 		assert(CB_WriteMany(&c, &t2, sizeof(TestStruct), TRUE));
682:                 		assert(c.dataSize == sizeof(TestStruct));
683:                 
684:                 		assert(CB_ReadMany(&c, &f, sizeof(TestStruct))); //read the structure back from the buffer
685:                 		assert(TestStructEqual(&f, &t2));
686:                 
687:                 		//Write two structures to the buffer and then read them back
688:                 		CB_WriteMany(&c, &t1, sizeof(TestStruct), TRUE);
689:                 		CB_WriteMany(&c, &t2, sizeof(TestStruct), TRUE);
690:                 
691:                 		assert(c.dataSize == 2*sizeof(TestStruct));
692:                 
693:                 		CB_ReadMany(&c, &f, sizeof(TestStruct)); //read first the structure back from the buffer
694:                 		assert(TestStructEqual(&f, &t1));
695:                 
696:                 		CB_ReadMany(&c, &f, sizeof(TestStruct)); //read the second structure back from the buffer
697:                 		assert(TestStructEqual(&f, &t2));
698:                 
699:                 		assert(c.readIndex == c.writeIndex); //The buffer is now empty.
700:                 
701:                 		// Write four structures to the buffer using a loop and read them back.
702:                 
703:                 		CB_WriteMany(&c, &t1, sizeof(TestStruct), TRUE);
704:                 		CB_WriteMany(&c, &t2, sizeof(TestStruct), TRUE);
705:                 		CB_WriteMany(&c, &t1, sizeof(TestStruct), TRUE);
706:                 		CB_WriteMany(&c, &t2, sizeof(TestStruct), TRUE);
707:                 
708:                 		assert(c.dataSize == 4*sizeof(TestStruct));
709:                 
710:                 		CB_ReadMany(&c, &f, sizeof(TestStruct)); //read first the structure back from the buffer
711:                 		assert(TestStructEqual(&f, &t1));
712:                 
713:                 		assert(c.dataSize == 3*sizeof(TestStruct));
714:                 
715:                 		CB_ReadMany(&c, &f, sizeof(TestStruct)); //read the second structure back from the buffer
716:                 		assert(TestStructEqual(&f, &t2));
717:                 
718:                 		assert(c.dataSize == 2*sizeof(TestStruct));
719:                 
720:                 		CB_ReadMany(&c, &f, sizeof(TestStruct)); //read third the structure back from the buffer
721:                 		assert(TestStructEqual(&f, &t1));
722:                 
723:                 		assert(c.dataSize == 1*sizeof(TestStruct));
724:                 
725:                 		CB_ReadMany(&c, &f, sizeof(TestStruct)); //read the fourth structure back from the buffer
726:                 		assert(TestStructEqual(&f, &t2));
727:                 
728:                 		assert(c.dataSize == 0); //the buffer is now empty
729:                 
730:                 		// Now write six structures and then read them off using a loop.
731:                 		CB_WriteMany(&c, &t1, sizeof(TestStruct), TRUE);
732:                 		CB_WriteMany(&c, &t2, sizeof(TestStruct), TRUE);
733:                 		CB_WriteMany(&c, &t1, sizeof(TestStruct), TRUE);
734:                 		CB_WriteMany(&c, &t2, sizeof(TestStruct), TRUE);
735:                 		CB_WriteMany(&c, &t1, sizeof(TestStruct), TRUE);
736:                 		CB_WriteMany(&c, &t2, sizeof(TestStruct), TRUE);
737:                 
738:                 		int i = 0;
739:                 		while (i < 3) {
740:                 			CB_ReadMany(&c, &f, sizeof(TestStruct)); //read first the structure back from the buffer
741:                 			assert(TestStructEqual(&f, &t1));
742:                 
743:                 			CB_ReadMany(&c, &f, sizeof(TestStruct)); //read the second structure back from the buffer
744:                 			assert(TestStructEqual(&f, &t2));
745:                 
746:                 			++i;
747:                 		}
748:                 
749:                 		//Now write from a loop and read from a loop
750:                 		i = 0;
751:                 		while (i < 3) {
752:                 			CB_WriteMany(&c, &t1, sizeof(TestStruct), TRUE);
753:                 			CB_WriteMany(&c, &t2, sizeof(TestStruct), TRUE);
754:                 			++i;
755:                 		}
756:                 
757:                 		i = 0;
758:                 		while (i < 3) {
759:                 			CB_ReadMany(&c, &f, sizeof(TestStruct)); //read first the structure back from the buffer
760:                 			assert(TestStructEqual(&f, &t1));
761:                 
762:                 			CB_ReadMany(&c, &f, sizeof(TestStruct)); //read the second structure back from the buffer
763:                 			assert(TestStructEqual(&f, &t2));
764:                 
765:                 			++i;
766:                 		}
767:                 
768:                 		assert(c.readIndex == c.writeIndex); //the buffer is empty
769:                 
770:                 		//Now write 40 elements from a loop and read 40 elements from a loop
771:                 		i = 0;
772:                 		while (i < 20) {
773:                 			CB_WriteMany(&c, &t1, sizeof(TestStruct), TRUE);
774:                 			CB_WriteMany(&c, &t2, sizeof(TestStruct), TRUE);
775:                 			++i;
776:                 		}
777:                 
778:                 		i = 0;
779:                 		while (i < 20) {
780:                 			CB_ReadMany(&c, &f, sizeof(TestStruct)); //read first the structure back from the buffer
781:                 			assert(TestStructEqual(&f, &t1));
782:                 
783:                 			CB_ReadMany(&c, &f, sizeof(TestStruct)); //read the second structure back from the buffer
784:                 			assert(TestStructEqual(&f, &t2));
785:                 
786:                 			++i;
787:                 		}
788:                 
789:                 		//Now try to overfill a buffer and then read the structures back
790:                 		//C is length 256*sizeof(TestStruct) so we will try to write 260 structures
791:                 		assert(c.readIndex == c.writeIndex); //the buffer is empty
792:                 		assert(c.dataSize == 0);
793:                 
794:                 		i = 0;
795:                 		while (i < 130) { //writes 260 structures to the buffer
796:                 			CB_WriteMany(&c, &t1, sizeof(TestStruct), TRUE);
797:                 			CB_WriteMany(&c, &t2, sizeof(TestStruct), TRUE);
798:                 			++i;
799:                 		}
800:                 
801:                 		i = 0;
802:                 		while (i < 128) {
803:                 			CB_ReadMany(&c, &f, sizeof(TestStruct)); //read first the structure back from the buffer
804:                 			assert(TestStructEqual(&f, &t1));
805:                 
806:                 			CB_ReadMany(&c, &f, sizeof(TestStruct)); //read the second structure back from the buffer
807:                 			assert(TestStructEqual(&f, &t2));
808:                 
809:                 			++i;
810:                 		}
811:                 
812:                 		assert(c.readIndex == c.writeIndex); //the buffer is empty
813:                 		assert(c.dataSize == 0);
814:                 
815:                 		//Testing CB_PeekMany on structures
816:                 		TestStruct peekTest;
817:                 
818:                 		CB_WriteMany(&c, &t1, sizeof(TestStruct), TRUE);
819:                 		CB_PeekMany(&c, (uint8_t*)&peekTest, sizeof(TestStruct));
820:                 		assert(TestStructEqual(&t1, &peekTest));
821:                 	}
822:                         {
823:                             // Test writing and reading from the circular buffer. Showed a failure mode of the CircularBuffer with regards to its read index.
824:                             CircularBuffer circBuf;
825:                             unsigned char data[20];
826:                             unsigned char testIn[20] = "Hey There This Test";
827:                             unsigned char testOut[20];
828:                 
829:                             // Initialize the circular buffer
830:                             assert(CB_Init(&circBuf, data, 20));
831:                             assert(circBuf.readIndex == circBuf.writeIndex);
832:                             assert(circBuf.readIndex == 0);
833:                             assert(circBuf.writeIndex == 0);
834:                 
835:                             // Write and read to the buffer multiple times
836:                             CB_WriteMany(&circBuf, testIn, 20, TRUE);
837:                             assert(circBuf.readIndex == circBuf.writeIndex);
838:                             assert(circBuf.readIndex == 0);
839:                             assert(circBuf.writeIndex == 0);
840:                 
841:                             CB_PeekMany(&circBuf, testOut, 20);
842:                             assert(circBuf.readIndex == circBuf.writeIndex);
843:                             assert(circBuf.readIndex == 0);
844:                             assert(circBuf.writeIndex == 0);
845:                 
846:                             CB_Remove(&circBuf, 20);
847:                             assert(circBuf.readIndex == circBuf.writeIndex);
848:                             assert(circBuf.readIndex == 0);
849:                             assert(circBuf.writeIndex == 0);
850:                 
851:                             assert(!memcmp(testIn, testOut, 20));
852:                 
853:                             
854:                             CB_WriteMany(&circBuf, testIn, 20, TRUE);
855:                             assert(circBuf.readIndex == circBuf.writeIndex);
856:                             assert(circBuf.readIndex == 0);
857:                             assert(circBuf.writeIndex == 0);
858:                 
859:                             CB_PeekMany(&circBuf, testOut, 20);
860:                             assert(circBuf.readIndex == circBuf.writeIndex);
861:                             assert(circBuf.readIndex == 0);
862:                             assert(circBuf.writeIndex == 0);
863:                 
864:                             CB_Remove(&circBuf, 20);
865:                             assert(circBuf.readIndex == circBuf.writeIndex);
866:                             assert(circBuf.readIndex == 0);
867:                             assert(circBuf.writeIndex == 0);
868:                 
869:                             assert(!memcmp(testIn, testOut, 20));
870:                 
871:                             //Test uneven data
872:                             CB_WriteMany(&circBuf, testIn, 7, TRUE);
873:                             assert(circBuf.readIndex == 0);
874:                             assert(circBuf.writeIndex == 7);
875:                 
876:                             CB_PeekMany(&circBuf, testOut, 7);
877:                             assert(circBuf.readIndex == 0);
878:                             assert(circBuf.writeIndex == 7);
879:                 
880:                             CB_Remove(&circBuf, 7);
881:                             assert(circBuf.readIndex == circBuf.writeIndex);
882:                             assert(circBuf.readIndex == 7);
883:                             assert(circBuf.writeIndex == 7);
884:                 
885:                             //Test the full data again
886:                             CB_WriteMany(&circBuf, testIn, 20, TRUE);
887:                             assert(circBuf.readIndex == circBuf.writeIndex);
888:                             assert(circBuf.readIndex == 7);
889:                             assert(circBuf.writeIndex == 7);
890:                 
891:                             CB_PeekMany(&circBuf, testOut, 20);
892:                             assert(circBuf.readIndex == circBuf.writeIndex);
893:                             assert(circBuf.readIndex == 7);
894:                             assert(circBuf.writeIndex == 7);
895:                 
896:                             CB_Remove(&circBuf, 20);
897:                             assert(circBuf.readIndex == circBuf.writeIndex);
898:                             assert(circBuf.readIndex == 7);
899:                             assert(circBuf.writeIndex == 7);
900:                 
901:                             assert(!memcmp(testIn, testOut, 20));
902:                 
903:                 
904:                             CB_WriteMany(&circBuf, testIn, 20, TRUE);
905:                             assert(circBuf.readIndex == circBuf.writeIndex);
906:                             assert(circBuf.readIndex == 7);
907:                             assert(circBuf.writeIndex == 7);
908:                 
909:                             CB_PeekMany(&circBuf, testOut, 20);
910:                             assert(circBuf.readIndex == circBuf.writeIndex);
911:                             assert(circBuf.readIndex == 7);
912:                             assert(circBuf.writeIndex == 7);
913:                 
914:                             CB_Remove(&circBuf, 20);
915:                             assert(circBuf.readIndex == circBuf.writeIndex);
916:                             assert(circBuf.readIndex == 7);
917:                             assert(circBuf.writeIndex == 7);
918:                 
919:                             assert(!memcmp(testIn, testOut, 20));
920:                         }
921:                 
922:                 	printf("All tests passed.\n");
923:                 
924:                 	return 0;
925:                 
926:                 }
927:                 #endif // UNIT_TEST_CIRCULAR_BUFFER
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D002870  27BDFFF0   ADDIU SP, SP, -16
9D002874  AFBE000C   SW FP, 12(SP)
9D002878  03A0F025   OR FP, SP, ZERO
9D00287C  AFC40010   SW A0, 16(FP)
9D002880  AFC50014   SW A1, 20(FP)
9D002884  00C01025   OR V0, A2, ZERO
9D002888  A7C20018   SH V0, 24(FP)
9D00288C  8FC20014   LW V0, 20(FP)
9D002890  10400004   BEQ V0, ZERO, 0x9D0028A4
9D002894  00000000   NOP
9D002898  8FC20010   LW V0, 16(FP)
9D00289C  14400004   BNE V0, ZERO, 0x9D0028B0
9D0028A0  00000000   NOP
9D0028A4  00001025   OR V0, ZERO, ZERO
9D0028A8  10000027   BEQ ZERO, ZERO, 0x9D002948
9D0028AC  00000000   NOP
9D0028B0  97C20018   LHU V0, 24(FP)
9D0028B4  2C420002   SLTIU V0, V0, 2
9D0028B8  10400004   BEQ V0, ZERO, 0x9D0028CC
9D0028BC  00000000   NOP
9D0028C0  00001025   OR V0, ZERO, ZERO
9D0028C4  10000020   BEQ ZERO, ZERO, 0x9D002948
9D0028C8  00000000   NOP
9D0028CC  8FC20010   LW V0, 16(FP)
9D0028D0  8FC30014   LW V1, 20(FP)
9D0028D4  AC43000C   SW V1, 12(V0)
9D0028D8  A7C00000   SH ZERO, 0(FP)
9D0028DC  10000009   BEQ ZERO, ZERO, 0x9D002904
9D0028E0  00000000   NOP
9D0028E4  8FC20010   LW V0, 16(FP)
9D0028E8  8C43000C   LW V1, 12(V0)
9D0028EC  97C20000   LHU V0, 0(FP)
9D0028F0  00621021   ADDU V0, V1, V0
9D0028F4  A0400000   SB ZERO, 0(V0)
9D0028F8  97C20000   LHU V0, 0(FP)
9D0028FC  24420001   ADDIU V0, V0, 1
9D002900  A7C20000   SH V0, 0(FP)
9D002904  97C30000   LHU V1, 0(FP)
9D002908  97C20018   LHU V0, 24(FP)
9D00290C  0062102B   SLTU V0, V1, V0
9D002910  1440FFF4   BNE V0, ZERO, 0x9D0028E4
9D002914  00000000   NOP
9D002918  8FC20010   LW V0, 16(FP)
9D00291C  A4400000   SH ZERO, 0(V0)
9D002920  8FC20010   LW V0, 16(FP)
9D002924  A4400002   SH ZERO, 2(V0)
9D002928  8FC20010   LW V0, 16(FP)
9D00292C  97C30018   LHU V1, 24(FP)
9D002930  A4430004   SH V1, 4(V0)
9D002934  8FC20010   LW V0, 16(FP)
9D002938  A4400006   SH ZERO, 6(V0)
9D00293C  8FC20010   LW V0, 16(FP)
9D002940  A0400008   SB ZERO, 8(V0)
9D002944  24020001   ADDIU V0, ZERO, 1
9D002948  03C0E825   OR SP, FP, ZERO
9D00294C  8FBE000C   LW FP, 12(SP)
9D002950  27BD0010   ADDIU SP, SP, 16
9D002954  03E00008   JR RA
9D002958  00000000   NOP
9D00295C  27BDFFF8   ADDIU SP, SP, -8
9D002960  AFBE0004   SW FP, 4(SP)
9D002964  03A0F025   OR FP, SP, ZERO
9D002968  AFC40008   SW A0, 8(FP)
9D00296C  AFC5000C   SW A1, 12(FP)
9D002970  8FC20008   LW V0, 8(FP)
9D002974  10400041   BEQ V0, ZERO, 0x9D002A7C
9D002978  00000000   NOP
9D00297C  8FC20008   LW V0, 8(FP)
9D002980  94420006   LHU V0, 6(V0)
9D002984  1040003D   BEQ V0, ZERO, 0x9D002A7C
9D002988  00000000   NOP
9D00298C  8FC20008   LW V0, 8(FP)
9D002990  8C42000C   LW V0, 12(V0)
9D002994  8FC30008   LW V1, 8(FP)
9D002998  94630000   LHU V1, 0(V1)
9D00299C  00431021   ADDU V0, V0, V1
9D0029A0  90430000   LBU V1, 0(V0)
9D0029A4  8FC2000C   LW V0, 12(FP)
9D0029A8  A0430000   SB V1, 0(V0)
9D0029AC  8FC20008   LW V0, 8(FP)
9D0029B0  94430006   LHU V1, 6(V0)
9D0029B4  24020001   ADDIU V0, ZERO, 1
9D0029B8  14620015   BNE V1, V0, 0x9D002A10
9D0029BC  00000000   NOP
9D0029C0  8FC20008   LW V0, 8(FP)
9D0029C4  94420000   LHU V0, 0(V0)
9D0029C8  00401825   OR V1, V0, ZERO
9D0029CC  8FC20008   LW V0, 8(FP)
9D0029D0  94420004   LHU V0, 4(V0)
9D0029D4  2442FFFF   ADDIU V0, V0, -1
9D0029D8  0062102A   SLT V0, V1, V0
9D0029DC  10400007   BEQ V0, ZERO, 0x9D0029FC
9D0029E0  00000000   NOP
9D0029E4  8FC20008   LW V0, 8(FP)
9D0029E8  94420000   LHU V0, 0(V0)
9D0029EC  24420001   ADDIU V0, V0, 1
9D0029F0  3042FFFF   ANDI V0, V0, -1
9D0029F4  10000002   BEQ ZERO, ZERO, 0x9D002A00
9D0029F8  00000000   NOP
9D0029FC  00001025   OR V0, ZERO, ZERO
9D002A00  8FC30008   LW V1, 8(FP)
9D002A04  A4620000   SH V0, 0(V1)
9D002A08  10000013   BEQ ZERO, ZERO, 0x9D002A58
9D002A0C  00000000   NOP
9D002A10  8FC20008   LW V0, 8(FP)
9D002A14  94420000   LHU V0, 0(V0)
9D002A18  00401825   OR V1, V0, ZERO
9D002A1C  8FC20008   LW V0, 8(FP)
9D002A20  94420004   LHU V0, 4(V0)
9D002A24  2442FFFF   ADDIU V0, V0, -1
9D002A28  0062102A   SLT V0, V1, V0
9D002A2C  10400007   BEQ V0, ZERO, 0x9D002A4C
9D002A30  00000000   NOP
9D002A34  8FC20008   LW V0, 8(FP)
9D002A38  94420000   LHU V0, 0(V0)
9D002A3C  24420001   ADDIU V0, V0, 1
9D002A40  3042FFFF   ANDI V0, V0, -1
9D002A44  10000002   BEQ ZERO, ZERO, 0x9D002A50
9D002A48  00000000   NOP
9D002A4C  00001025   OR V0, ZERO, ZERO
9D002A50  8FC30008   LW V1, 8(FP)
9D002A54  A4620000   SH V0, 0(V1)
9D002A58  8FC20008   LW V0, 8(FP)
9D002A5C  94420006   LHU V0, 6(V0)
9D002A60  2442FFFF   ADDIU V0, V0, -1
9D002A64  3043FFFF   ANDI V1, V0, -1
9D002A68  8FC20008   LW V0, 8(FP)
9D002A6C  A4430006   SH V1, 6(V0)
9D002A70  24020001   ADDIU V0, ZERO, 1
9D002A74  10000002   BEQ ZERO, ZERO, 0x9D002A80
9D002A78  00000000   NOP
9D002A7C  00001025   OR V0, ZERO, ZERO
9D002A80  03C0E825   OR SP, FP, ZERO
9D002A84  8FBE0004   LW FP, 4(SP)
9D002A88  27BD0008   ADDIU SP, SP, 8
9D002A8C  03E00008   JR RA
9D002A90  00000000   NOP
9D002A94  27BDFFF0   ADDIU SP, SP, -16
9D002A98  AFBE000C   SW FP, 12(SP)
9D002A9C  03A0F025   OR FP, SP, ZERO
9D002AA0  AFC40010   SW A0, 16(FP)
9D002AA4  AFC50014   SW A1, 20(FP)
9D002AA8  00C01025   OR V0, A2, ZERO
9D002AAC  A7C20018   SH V0, 24(FP)
9D002AB0  8FC20010   LW V0, 16(FP)
9D002AB4  1040003F   BEQ V0, ZERO, 0x9D002BB4
9D002AB8  00000000   NOP
9D002ABC  8FC20014   LW V0, 20(FP)
9D002AC0  1040003C   BEQ V0, ZERO, 0x9D002BB4
9D002AC4  00000000   NOP
9D002AC8  8FC20014   LW V0, 20(FP)
9D002ACC  AFC20004   SW V0, 4(FP)
9D002AD0  8FC20010   LW V0, 16(FP)
9D002AD4  94420006   LHU V0, 6(V0)
9D002AD8  97C30018   LHU V1, 24(FP)
9D002ADC  0043102B   SLTU V0, V0, V1
9D002AE0  14400034   BNE V0, ZERO, 0x9D002BB4
9D002AE4  00000000   NOP
9D002AE8  A7C00000   SH ZERO, 0(FP)
9D002AEC  10000022   BEQ ZERO, ZERO, 0x9D002B78
9D002AF0  00000000   NOP
9D002AF4  8FC20010   LW V0, 16(FP)
9D002AF8  8C42000C   LW V0, 12(V0)
9D002AFC  8FC30010   LW V1, 16(FP)
9D002B00  94630000   LHU V1, 0(V1)
9D002B04  00431821   ADDU V1, V0, V1
9D002B08  87C20000   LH V0, 0(FP)
9D002B0C  8FC40004   LW A0, 4(FP)
9D002B10  00821021   ADDU V0, A0, V0
9D002B14  90630000   LBU V1, 0(V1)
9D002B18  A0430000   SB V1, 0(V0)
9D002B1C  8FC20010   LW V0, 16(FP)
9D002B20  94420000   LHU V0, 0(V0)
9D002B24  00401825   OR V1, V0, ZERO
9D002B28  8FC20010   LW V0, 16(FP)
9D002B2C  94420004   LHU V0, 4(V0)
9D002B30  2442FFFF   ADDIU V0, V0, -1
9D002B34  0062102A   SLT V0, V1, V0
9D002B38  10400009   BEQ V0, ZERO, 0x9D002B60
9D002B3C  00000000   NOP
9D002B40  8FC20010   LW V0, 16(FP)
9D002B44  94420000   LHU V0, 0(V0)
9D002B48  24420001   ADDIU V0, V0, 1
9D002B4C  3043FFFF   ANDI V1, V0, -1
9D002B50  8FC20010   LW V0, 16(FP)
9D002B54  A4430000   SH V1, 0(V0)
9D002B58  10000003   BEQ ZERO, ZERO, 0x9D002B68
9D002B5C  00000000   NOP
9D002B60  8FC20010   LW V0, 16(FP)
9D002B64  A4400000   SH ZERO, 0(V0)
9D002B68  97C20000   LHU V0, 0(FP)
9D002B6C  24420001   ADDIU V0, V0, 1
9D002B70  3042FFFF   ANDI V0, V0, -1
9D002B74  A7C20000   SH V0, 0(FP)
9D002B78  87C30000   LH V1, 0(FP)
9D002B7C  97C20018   LHU V0, 24(FP)
9D002B80  0062102A   SLT V0, V1, V0
9D002B84  1440FFDB   BNE V0, ZERO, 0x9D002AF4
9D002B88  00000000   NOP
9D002B8C  8FC20010   LW V0, 16(FP)
9D002B90  94430006   LHU V1, 6(V0)
9D002B94  97C20018   LHU V0, 24(FP)
9D002B98  00621023   SUBU V0, V1, V0
9D002B9C  3043FFFF   ANDI V1, V0, -1
9D002BA0  8FC20010   LW V0, 16(FP)
9D002BA4  A4430006   SH V1, 6(V0)
9D002BA8  24020001   ADDIU V0, ZERO, 1
9D002BAC  10000002   BEQ ZERO, ZERO, 0x9D002BB8
9D002BB0  00000000   NOP
9D002BB4  00001025   OR V0, ZERO, ZERO
9D002BB8  03C0E825   OR SP, FP, ZERO
9D002BBC  8FBE000C   LW FP, 12(SP)
9D002BC0  27BD0010   ADDIU SP, SP, 16
9D002BC4  03E00008   JR RA
9D002BC8  00000000   NOP
9D002BCC  27BDFFF8   ADDIU SP, SP, -8
9D002BD0  AFBE0004   SW FP, 4(SP)
9D002BD4  03A0F025   OR FP, SP, ZERO
9D002BD8  AFC40008   SW A0, 8(FP)
9D002BDC  00A01025   OR V0, A1, ZERO
9D002BE0  A3C2000C   SB V0, 12(FP)
9D002BE4  8FC20008   LW V0, 8(FP)
9D002BE8  10400032   BEQ V0, ZERO, 0x9D002CB4
9D002BEC  00000000   NOP
9D002BF0  8FC20008   LW V0, 8(FP)
9D002BF4  94430006   LHU V1, 6(V0)
9D002BF8  8FC20008   LW V0, 8(FP)
9D002BFC  94420004   LHU V0, 4(V0)
9D002C00  1462000A   BNE V1, V0, 0x9D002C2C
9D002C04  00000000   NOP
9D002C08  8FC20008   LW V0, 8(FP)
9D002C0C  90420008   LBU V0, 8(V0)
9D002C10  24420001   ADDIU V0, V0, 1
9D002C14  304300FF   ANDI V1, V0, 255
9D002C18  8FC20008   LW V0, 8(FP)
9D002C1C  A0430008   SB V1, 8(V0)
9D002C20  00001025   OR V0, ZERO, ZERO
9D002C24  10000024   BEQ ZERO, ZERO, 0x9D002CB8
9D002C28  00000000   NOP
9D002C2C  8FC20008   LW V0, 8(FP)
9D002C30  8C42000C   LW V0, 12(V0)
9D002C34  8FC30008   LW V1, 8(FP)
9D002C38  94630002   LHU V1, 2(V1)
9D002C3C  00431021   ADDU V0, V0, V1
9D002C40  93C3000C   LBU V1, 12(FP)
9D002C44  A0430000   SB V1, 0(V0)
9D002C48  8FC20008   LW V0, 8(FP)
9D002C4C  94420002   LHU V0, 2(V0)
9D002C50  00401825   OR V1, V0, ZERO
9D002C54  8FC20008   LW V0, 8(FP)
9D002C58  94420004   LHU V0, 4(V0)
9D002C5C  2442FFFF   ADDIU V0, V0, -1
9D002C60  0062102A   SLT V0, V1, V0
9D002C64  10400007   BEQ V0, ZERO, 0x9D002C84
9D002C68  00000000   NOP
9D002C6C  8FC20008   LW V0, 8(FP)
9D002C70  94420002   LHU V0, 2(V0)
9D002C74  24420001   ADDIU V0, V0, 1
9D002C78  3042FFFF   ANDI V0, V0, -1
9D002C7C  10000002   BEQ ZERO, ZERO, 0x9D002C88
9D002C80  00000000   NOP
9D002C84  00001025   OR V0, ZERO, ZERO
9D002C88  8FC30008   LW V1, 8(FP)
9D002C8C  A4620002   SH V0, 2(V1)
9D002C90  8FC20008   LW V0, 8(FP)
9D002C94  94420006   LHU V0, 6(V0)
9D002C98  24420001   ADDIU V0, V0, 1
9D002C9C  3043FFFF   ANDI V1, V0, -1
9D002CA0  8FC20008   LW V0, 8(FP)
9D002CA4  A4430006   SH V1, 6(V0)
9D002CA8  24020001   ADDIU V0, ZERO, 1
9D002CAC  10000002   BEQ ZERO, ZERO, 0x9D002CB8
9D002CB0  00000000   NOP
9D002CB4  00001025   OR V0, ZERO, ZERO
9D002CB8  03C0E825   OR SP, FP, ZERO
9D002CBC  8FBE0004   LW FP, 4(SP)
9D002CC0  27BD0008   ADDIU SP, SP, 8
9D002CC4  03E00008   JR RA
9D002CC8  00000000   NOP
9D002CCC  27BDFFE8   ADDIU SP, SP, -24
9D002CD0  AFBE0014   SW FP, 20(SP)
9D002CD4  03A0F025   OR FP, SP, ZERO
9D002CD8  AFC40018   SW A0, 24(FP)
9D002CDC  AFC5001C   SW A1, 28(FP)
9D002CE0  00C01025   OR V0, A2, ZERO
9D002CE4  00E01825   OR V1, A3, ZERO
9D002CE8  A7C20020   SH V0, 32(FP)
9D002CEC  00601025   OR V0, V1, ZERO
9D002CF0  A3C20024   SB V0, 36(FP)
9D002CF4  8FC20018   LW V0, 24(FP)
9D002CF8  1040008D   BEQ V0, ZERO, 0x9D002F30
9D002CFC  00000000   NOP
9D002D00  8FC2001C   LW V0, 28(FP)
9D002D04  1040008A   BEQ V0, ZERO, 0x9D002F30
9D002D08  00000000   NOP
9D002D0C  8FC2001C   LW V0, 28(FP)
9D002D10  AFC20008   SW V0, 8(FP)
9D002D14  93C20024   LBU V0, 36(FP)
9D002D18  10400040   BEQ V0, ZERO, 0x9D002E1C
9D002D1C  00000000   NOP
9D002D20  8FC20018   LW V0, 24(FP)
9D002D24  94420004   LHU V0, 4(V0)
9D002D28  00401825   OR V1, V0, ZERO
9D002D2C  8FC20018   LW V0, 24(FP)
9D002D30  94420006   LHU V0, 6(V0)
9D002D34  00621823   SUBU V1, V1, V0
9D002D38  97C20020   LHU V0, 32(FP)
9D002D3C  0062102A   SLT V0, V1, V0
9D002D40  10400004   BEQ V0, ZERO, 0x9D002D54
9D002D44  00000000   NOP
9D002D48  00001025   OR V0, ZERO, ZERO
9D002D4C  10000079   BEQ ZERO, ZERO, 0x9D002F34
9D002D50  00000000   NOP
9D002D54  AFC00000   SW ZERO, 0(FP)
9D002D58  10000020   BEQ ZERO, ZERO, 0x9D002DDC
9D002D5C  00000000   NOP
9D002D60  8FC20000   LW V0, 0(FP)
9D002D64  8FC30008   LW V1, 8(FP)
9D002D68  00621821   ADDU V1, V1, V0
9D002D6C  8FC20018   LW V0, 24(FP)
9D002D70  8C42000C   LW V0, 12(V0)
9D002D74  8FC40018   LW A0, 24(FP)
9D002D78  94840002   LHU A0, 2(A0)
9D002D7C  00441021   ADDU V0, V0, A0
9D002D80  90630000   LBU V1, 0(V1)
9D002D84  A0430000   SB V1, 0(V0)
9D002D88  8FC20000   LW V0, 0(FP)
9D002D8C  24420001   ADDIU V0, V0, 1
9D002D90  AFC20000   SW V0, 0(FP)
9D002D94  8FC20018   LW V0, 24(FP)
9D002D98  94420002   LHU V0, 2(V0)
9D002D9C  00401825   OR V1, V0, ZERO
9D002DA0  8FC20018   LW V0, 24(FP)
9D002DA4  94420004   LHU V0, 4(V0)
9D002DA8  2442FFFF   ADDIU V0, V0, -1
9D002DAC  0062102A   SLT V0, V1, V0
9D002DB0  10400007   BEQ V0, ZERO, 0x9D002DD0
9D002DB4  00000000   NOP
9D002DB8  8FC20018   LW V0, 24(FP)
9D002DBC  94420002   LHU V0, 2(V0)
9D002DC0  24420001   ADDIU V0, V0, 1
9D002DC4  3042FFFF   ANDI V0, V0, -1
9D002DC8  10000002   BEQ ZERO, ZERO, 0x9D002DD4
9D002DCC  00000000   NOP
9D002DD0  00001025   OR V0, ZERO, ZERO
9D002DD4  8FC30018   LW V1, 24(FP)
9D002DD8  A4620002   SH V0, 2(V1)
9D002DDC  97C20020   LHU V0, 32(FP)
9D002DE0  8FC30000   LW V1, 0(FP)
9D002DE4  0062102A   SLT V0, V1, V0
9D002DE8  1440FFDD   BNE V0, ZERO, 0x9D002D60
9D002DEC  00000000   NOP
9D002DF0  8FC20018   LW V0, 24(FP)
9D002DF4  94430006   LHU V1, 6(V0)
9D002DF8  8FC20000   LW V0, 0(FP)
9D002DFC  3042FFFF   ANDI V0, V0, -1
9D002E00  00621021   ADDU V0, V1, V0
9D002E04  3043FFFF   ANDI V1, V0, -1
9D002E08  8FC20018   LW V0, 24(FP)
9D002E0C  A4430006   SH V1, 6(V0)
9D002E10  24020001   ADDIU V0, ZERO, 1
9D002E14  10000047   BEQ ZERO, ZERO, 0x9D002F34
9D002E18  00000000   NOP
9D002E1C  AFC00004   SW ZERO, 4(FP)
9D002E20  1000003B   BEQ ZERO, ZERO, 0x9D002F10
9D002E24  00000000   NOP
9D002E28  8FC20018   LW V0, 24(FP)
9D002E2C  94430006   LHU V1, 6(V0)
9D002E30  8FC20018   LW V0, 24(FP)
9D002E34  94420004   LHU V0, 4(V0)
9D002E38  14620010   BNE V1, V0, 0x9D002E7C
9D002E3C  00000000   NOP
9D002E40  8FC20018   LW V0, 24(FP)
9D002E44  90430008   LBU V1, 8(V0)
9D002E48  97C20020   LHU V0, 32(FP)
9D002E4C  304400FF   ANDI A0, V0, 255
9D002E50  8FC20004   LW V0, 4(FP)
9D002E54  304200FF   ANDI V0, V0, 255
9D002E58  00821023   SUBU V0, A0, V0
9D002E5C  304200FF   ANDI V0, V0, 255
9D002E60  00621021   ADDU V0, V1, V0
9D002E64  304300FF   ANDI V1, V0, 255
9D002E68  8FC20018   LW V0, 24(FP)
9D002E6C  A0430008   SB V1, 8(V0)
9D002E70  00001025   OR V0, ZERO, ZERO
9D002E74  1000002F   BEQ ZERO, ZERO, 0x9D002F34
9D002E78  00000000   NOP
9D002E7C  8FC20004   LW V0, 4(FP)
9D002E80  8FC30008   LW V1, 8(FP)
9D002E84  00621821   ADDU V1, V1, V0
9D002E88  8FC20018   LW V0, 24(FP)
9D002E8C  8C42000C   LW V0, 12(V0)
9D002E90  8FC40018   LW A0, 24(FP)
9D002E94  94840002   LHU A0, 2(A0)
9D002E98  00441021   ADDU V0, V0, A0
9D002E9C  90630000   LBU V1, 0(V1)
9D002EA0  A0430000   SB V1, 0(V0)
9D002EA4  8FC20004   LW V0, 4(FP)
9D002EA8  24420001   ADDIU V0, V0, 1
9D002EAC  AFC20004   SW V0, 4(FP)
9D002EB0  8FC20018   LW V0, 24(FP)
9D002EB4  94420006   LHU V0, 6(V0)
9D002EB8  24420001   ADDIU V0, V0, 1
9D002EBC  3043FFFF   ANDI V1, V0, -1
9D002EC0  8FC20018   LW V0, 24(FP)
9D002EC4  A4430006   SH V1, 6(V0)
9D002EC8  8FC20018   LW V0, 24(FP)
9D002ECC  94420002   LHU V0, 2(V0)
9D002ED0  00401825   OR V1, V0, ZERO
9D002ED4  8FC20018   LW V0, 24(FP)
9D002ED8  94420004   LHU V0, 4(V0)
9D002EDC  2442FFFF   ADDIU V0, V0, -1
9D002EE0  0062102A   SLT V0, V1, V0
9D002EE4  10400007   BEQ V0, ZERO, 0x9D002F04
9D002EE8  00000000   NOP
9D002EEC  8FC20018   LW V0, 24(FP)
9D002EF0  94420002   LHU V0, 2(V0)
9D002EF4  24420001   ADDIU V0, V0, 1
9D002EF8  3042FFFF   ANDI V0, V0, -1
9D002EFC  10000002   BEQ ZERO, ZERO, 0x9D002F08
9D002F00  00000000   NOP
9D002F04  00001025   OR V0, ZERO, ZERO
9D002F08  8FC30018   LW V1, 24(FP)
9D002F0C  A4620002   SH V0, 2(V1)
9D002F10  97C20020   LHU V0, 32(FP)
9D002F14  8FC30004   LW V1, 4(FP)
9D002F18  0062102A   SLT V0, V1, V0
9D002F1C  1440FFC2   BNE V0, ZERO, 0x9D002E28
9D002F20  00000000   NOP
9D002F24  24020001   ADDIU V0, ZERO, 1
9D002F28  10000002   BEQ ZERO, ZERO, 0x9D002F34
9D002F2C  00000000   NOP
9D002F30  00001025   OR V0, ZERO, ZERO
9D002F34  03C0E825   OR SP, FP, ZERO
9D002F38  8FBE0014   LW FP, 20(SP)
9D002F3C  27BD0018   ADDIU SP, SP, 24
9D002F40  03E00008   JR RA
9D002F44  00000000   NOP
9D002F48  27BDFFF8   ADDIU SP, SP, -8
9D002F4C  AFBE0004   SW FP, 4(SP)
9D002F50  03A0F025   OR FP, SP, ZERO
9D002F54  AFC40008   SW A0, 8(FP)
9D002F58  AFC5000C   SW A1, 12(FP)
9D002F5C  8FC20008   LW V0, 8(FP)
9D002F60  10400010   BEQ V0, ZERO, 0x9D002FA4
9D002F64  00000000   NOP
9D002F68  8FC20008   LW V0, 8(FP)
9D002F6C  94420006   LHU V0, 6(V0)
9D002F70  1040000C   BEQ V0, ZERO, 0x9D002FA4
9D002F74  00000000   NOP
9D002F78  8FC20008   LW V0, 8(FP)
9D002F7C  8C42000C   LW V0, 12(V0)
9D002F80  8FC30008   LW V1, 8(FP)
9D002F84  94630000   LHU V1, 0(V1)
9D002F88  00431021   ADDU V0, V0, V1
9D002F8C  90430000   LBU V1, 0(V0)
9D002F90  8FC2000C   LW V0, 12(FP)
9D002F94  A0430000   SB V1, 0(V0)
9D002F98  24020001   ADDIU V0, ZERO, 1
9D002F9C  10000002   BEQ ZERO, ZERO, 0x9D002FA8
9D002FA0  00000000   NOP
9D002FA4  00001025   OR V0, ZERO, ZERO
9D002FA8  03C0E825   OR SP, FP, ZERO
9D002FAC  8FBE0004   LW FP, 4(SP)
9D002FB0  27BD0008   ADDIU SP, SP, 8
9D002FB4  03E00008   JR RA
9D002FB8  00000000   NOP
9D002FBC  27BDFFE8   ADDIU SP, SP, -24
9D002FC0  AFBE0014   SW FP, 20(SP)
9D002FC4  03A0F025   OR FP, SP, ZERO
9D002FC8  AFC40018   SW A0, 24(FP)
9D002FCC  AFC5001C   SW A1, 28(FP)
9D002FD0  00C01025   OR V0, A2, ZERO
9D002FD4  A7C20020   SH V0, 32(FP)
9D002FD8  8FC20018   LW V0, 24(FP)
9D002FDC  10400030   BEQ V0, ZERO, 0x9D0030A0
9D002FE0  00000000   NOP
9D002FE4  8FC2001C   LW V0, 28(FP)
9D002FE8  AFC20008   SW V0, 8(FP)
9D002FEC  8FC20018   LW V0, 24(FP)
9D002FF0  94420006   LHU V0, 6(V0)
9D002FF4  97C30020   LHU V1, 32(FP)
9D002FF8  0043102B   SLTU V0, V0, V1
9D002FFC  14400028   BNE V0, ZERO, 0x9D0030A0
9D003000  00000000   NOP
9D003004  8FC20018   LW V0, 24(FP)
9D003008  94420000   LHU V0, 0(V0)
9D00300C  AFC20004   SW V0, 4(FP)
9D003010  A7C00000   SH ZERO, 0(FP)
9D003014  1000001A   BEQ ZERO, ZERO, 0x9D003080
9D003018  00000000   NOP
9D00301C  8FC20018   LW V0, 24(FP)
9D003020  8C43000C   LW V1, 12(V0)
9D003024  8FC20004   LW V0, 4(FP)
9D003028  00621821   ADDU V1, V1, V0
9D00302C  97C20000   LHU V0, 0(FP)
9D003030  8FC40008   LW A0, 8(FP)
9D003034  00821021   ADDU V0, A0, V0
9D003038  90630000   LBU V1, 0(V1)
9D00303C  A0430000   SB V1, 0(V0)
9D003040  8FC20018   LW V0, 24(FP)
9D003044  94420004   LHU V0, 4(V0)
9D003048  2442FFFF   ADDIU V0, V0, -1
9D00304C  8FC30004   LW V1, 4(FP)
9D003050  0062102A   SLT V0, V1, V0
9D003054  10400006   BEQ V0, ZERO, 0x9D003070
9D003058  00000000   NOP
9D00305C  8FC20004   LW V0, 4(FP)
9D003060  24420001   ADDIU V0, V0, 1
9D003064  AFC20004   SW V0, 4(FP)
9D003068  10000002   BEQ ZERO, ZERO, 0x9D003074
9D00306C  00000000   NOP
9D003070  AFC00004   SW ZERO, 4(FP)
9D003074  97C20000   LHU V0, 0(FP)
9D003078  24420001   ADDIU V0, V0, 1
9D00307C  A7C20000   SH V0, 0(FP)
9D003080  97C30000   LHU V1, 0(FP)
9D003084  97C20020   LHU V0, 32(FP)
9D003088  0062102B   SLTU V0, V1, V0
9D00308C  1440FFE3   BNE V0, ZERO, 0x9D00301C
9D003090  00000000   NOP
9D003094  24020001   ADDIU V0, ZERO, 1
9D003098  10000002   BEQ ZERO, ZERO, 0x9D0030A4
9D00309C  00000000   NOP
9D0030A0  00001025   OR V0, ZERO, ZERO
9D0030A4  03C0E825   OR SP, FP, ZERO
9D0030A8  8FBE0014   LW FP, 20(SP)
9D0030AC  27BD0018   ADDIU SP, SP, 24
9D0030B0  03E00008   JR RA
9D0030B4  00000000   NOP
9D0030B8  27BDFFF8   ADDIU SP, SP, -8
9D0030BC  AFBE0004   SW FP, 4(SP)
9D0030C0  03A0F025   OR FP, SP, ZERO
9D0030C4  AFC40008   SW A0, 8(FP)
9D0030C8  00A01025   OR V0, A1, ZERO
9D0030CC  A7C2000C   SH V0, 12(FP)
9D0030D0  8FC20008   LW V0, 8(FP)
9D0030D4  94420006   LHU V0, 6(V0)
9D0030D8  97C3000C   LHU V1, 12(FP)
9D0030DC  0062102B   SLTU V0, V1, V0
9D0030E0  10400029   BEQ V0, ZERO, 0x9D003188
9D0030E4  00000000   NOP
9D0030E8  8FC20008   LW V0, 8(FP)
9D0030EC  94420004   LHU V0, 4(V0)
9D0030F0  00401825   OR V1, V0, ZERO
9D0030F4  8FC20008   LW V0, 8(FP)
9D0030F8  94420000   LHU V0, 0(V0)
9D0030FC  00621823   SUBU V1, V1, V0
9D003100  97C2000C   LHU V0, 12(FP)
9D003104  0062102A   SLT V0, V1, V0
9D003108  1040000E   BEQ V0, ZERO, 0x9D003144
9D00310C  00000000   NOP
9D003110  8FC20008   LW V0, 8(FP)
9D003114  94430000   LHU V1, 0(V0)
9D003118  8FC20008   LW V0, 8(FP)
9D00311C  94420004   LHU V0, 4(V0)
9D003120  00621023   SUBU V0, V1, V0
9D003124  3043FFFF   ANDI V1, V0, -1
9D003128  97C2000C   LHU V0, 12(FP)
9D00312C  00621021   ADDU V0, V1, V0
9D003130  3043FFFF   ANDI V1, V0, -1
9D003134  8FC20008   LW V0, 8(FP)
9D003138  A4430000   SH V1, 0(V0)
9D00313C  10000008   BEQ ZERO, ZERO, 0x9D003160
9D003140  00000000   NOP
9D003144  8FC20008   LW V0, 8(FP)
9D003148  94430000   LHU V1, 0(V0)
9D00314C  97C2000C   LHU V0, 12(FP)
9D003150  00621021   ADDU V0, V1, V0
9D003154  3043FFFF   ANDI V1, V0, -1
9D003158  8FC20008   LW V0, 8(FP)
9D00315C  A4430000   SH V1, 0(V0)
9D003160  8FC20008   LW V0, 8(FP)
9D003164  94430006   LHU V1, 6(V0)
9D003168  97C2000C   LHU V0, 12(FP)
9D00316C  00621023   SUBU V0, V1, V0
9D003170  3043FFFF   ANDI V1, V0, -1
9D003174  8FC20008   LW V0, 8(FP)
9D003178  A4430006   SH V1, 6(V0)
9D00317C  24020001   ADDIU V0, ZERO, 1
9D003180  10000008   BEQ ZERO, ZERO, 0x9D0031A4
9D003184  00000000   NOP
9D003188  8FC20008   LW V0, 8(FP)
9D00318C  94430002   LHU V1, 2(V0)
9D003190  8FC20008   LW V0, 8(FP)
9D003194  A4430000   SH V1, 0(V0)
9D003198  8FC20008   LW V0, 8(FP)
9D00319C  A4400006   SH ZERO, 6(V0)
9D0031A0  24020001   ADDIU V0, ZERO, 1
9D0031A4  03C0E825   OR SP, FP, ZERO
9D0031A8  8FBE0004   LW FP, 4(SP)
9D0031AC  27BD0008   ADDIU SP, SP, 8
9D0031B0  03E00008   JR RA
9D0031B4  00000000   NOP
---  c:/users/james/desktop/ece13/jensming/lab09/lab9.x/board.c  ----------------------------------------
1:                   /*
2:                    * File:   BOARD.h
3:                    * Author: Max Dunne
4:                    *
5:                    * Created on December 19, 2012, 2:08 PM
6:                    * 
7:                    * Much of the odder code come directly from the microchip peripheral library as reinventing the wheel seemed
8:                    * not necessary
9:                    */
10:                  
11:                  #include "BOARD.h"
12:                  
13:                  // Microchip Libraries
14:                  #ifdef PIC32
15:                  #include <xc.h>
16:                  #endif
17:                  #include <stdint.h>
18:                  #include <stdio.h>
19:                  #include <stdlib.h>
20:                  
21:                  // no legacy libc
22:                  #ifdef PIC32
23:                  #ifdef __C32_LEGACY_LIBC__
24:                  #error CSE13E Can not be done with legacy libc. Ensure project properties -> XC32 (Global Options) -> Use legacy libc is UN checked. 
25:                  #endif
26:                  #endif
27:                  
28:                  /*******************************************************************************
29:                   * PRAGMAS                                                                     *
30:                   ******************************************************************************/
31:                  // Configuration Bits
32:                  // SYSCLK = 80MHz
33:                  // PBCLK  = 20MHz
34:                  // using POSC w/ PLL, XT mode
35:                  #ifdef PIC32
36:                  #pragma config FPBDIV     = DIV_4
37:                  #pragma config FPLLIDIV   = DIV_2     // Set the PLL input divider to 2, seems to
38:                  #pragma config IESO       = OFF       // Internal/External Switch
39:                  #pragma config POSCMOD    = XT        // Primary Oscillator Configuration for XT osc mode
40:                  #pragma config OSCIOFNC   = OFF       // Disable clock signal output
41:                  #pragma config FCKSM      = CSECMD    // Clock Switching and Monitor Selection
42:                  #pragma config WDTPS      = PS1       // Specify the watchdog timer interval (unused)
43:                  #pragma config FWDTEN     = OFF       // Disable the watchdog timer
44:                  #pragma config ICESEL     = ICS_PGx2  // Allow for debugging with the Uno32
45:                  #pragma config PWP        = OFF       // Keep the program flash writeable
46:                  #pragma config BWP        = OFF       // Keep the boot flash writeable
47:                  #pragma config CP         = OFF       // Disable code protect
48:                  #pragma config FNOSC 		= PRIPLL	//Oscillator Selection Bits
49:                  #pragma config FSOSCEN 		= OFF		//Secondary Oscillator Enable
50:                  #pragma config FPLLMUL 		= MUL_20	//PLL Multiplier
51:                  #pragma config FPLLODIV 	= DIV_1 	//System PLL Output Clock Divid
52:                  #endif
53:                  /*******************************************************************************
54:                   * PRIVATE #DEFINES                                                            *
55:                   ******************************************************************************/
56:                  #define SYSTEM_CLOCK 80000000L
57:                  #define PB_CLOCK (SYSTEM_CLOCK / 4)
58:                  #define QUEUESIZE 512
59:                  //#define TurnOffAndClearInterrupt(Name) INTEnable(Name,INT_DISABLED); INTClearFlag(Name)
60:                  #define TurnPortToInput(Tris) Tris=0xFFFF
61:                  
62:                  
63:                  //#define LAB10_READ_OVERWRITE
64:                  /*******************************************************************************
65:                   * PRIVATE DATATYPES                                                           *
66:                   ******************************************************************************/
67:                  
68:                  
69:                  
70:                  /*******************************************************************************
71:                   * PRIVATE FUNCTION PROTOTYPES                                                 *
72:                   ******************************************************************************/
73:                  void SERIAL_Init(void);
74:                  
75:                  /*******************************************************************************
76:                   * PRIVATE VARIABLES                                                           *
77:                   ******************************************************************************/
78:                  
79:                  
80:                  /*******************************************************************************
81:                   * PUBLIC FUNCTIONS                                                            *
82:                   ******************************************************************************/
83:                  
84:                  /**
85:                   * Function: BOARD_Init(void)
86:                   * @param None
87:                   * @return None
88:                   * @brief Initializes the board for 80MHz SYSCLK and 20MHz PBCLK.
89:                   */
90:                  void BOARD_Init() {
91:                  #ifdef PIC32
92:                      //seeds the random number generator with the time
93:                      char seed1[] = __TIME__;
94:                      unsigned int seed2 = (((unsigned int) (seed1[7] ^ seed1[2])) << 8) | ((unsigned int) (seed1[4] ^ seed1[6]));
95:                      srand(seed2);
96:                  
97:                      //enables the interrupt system in the new style
98:                      
99:                      //INTConfigureSystem(INT_SYSTEM_CONFIG_MULT_VECTOR); 
100:                     unsigned int val;
101:                 
102:                     // set the CP0 cause IV bit high
103:                     asm volatile("mfc0   %0,$13" : "=r"(val));
104:                     val |= 0x00800000;
105:                     asm volatile("mtc0   %0,$13" : "+r"(val));
106:                     INTCONSET = _INTCON_MVEC_MASK;
107:                     
108:                     //INTEnableInterrupts();
109:                     int status;
110:                     asm volatile("ei    %0" : "=r"(status));
111:                     // Initialize for serial
112:                     SERIAL_Init();
113:                 #endif
114:                 }
115:                 
116:                 /**
117:                  * Function: BOARD_End(void)
118:                  * @param None
119:                  * @return None
120:                  * @brief shuts down all peripherals except for serial and A/D. Turns all pins
121:                  * into input
122:                  * @author Max Dunne, 2013.09.20  */
123:                 void BOARD_End() {
124:                 #ifdef PIC32
125:                     // set all interrupt enable flags to zero
126:                     IEC0 = 0;
127:                     IEC1 = 0;
128:                 
129:                     //set all flags to zero
130:                     IFS0 = 0;
131:                     IFS1 = 0;
132:                 
133:                     // disable timer interrupts, clear flags and turn off module
134:                     T1CON = 0;
135:                     T2CON = 0;
136:                     T3CON = 0;
137:                     T4CON = 0;
138:                     T5CON = 0;
139:                 
140:                 
141:                     // disable input capture interrupts, clear flags and turn off module
142:                     IC1CONCLR = _IC1CON_ICM_MASK;
143:                     IC2CONCLR = _IC2CON_ICM_MASK;
144:                     IC3CONCLR = _IC3CON_ICM_MASK;
145:                     IC4CONCLR = _IC4CON_ICM_MASK;
146:                     IC5CONCLR = _IC5CON_ICM_MASK;
147:                 
148:                     // disable output compare interrupts, clear flags and turn off module
149:                     OC1CONCLR = _OC1CON_ON_MASK;
150:                     OC2CONCLR = _OC2CON_ON_MASK;
151:                     OC3CONCLR = _OC3CON_ON_MASK;
152:                     OC4CONCLR = _OC4CON_ON_MASK;
153:                     OC5CONCLR = _OC5CON_ON_MASK;
154:                 
155:                     // disable I2C interrupts, clear flags and turn off module
156:                     I2C1CONCLR = _I2C1CON_ON_MASK;
157:                     I2C2CONCLR = _I2C2CON_ON_MASK;
158:                 
159:                     //disable spi interrupts, clear flags and turn off module
160:                     SPI1CONCLR = _SPI1CON_ON_MASK;
161:                     SPI2CONCLR = _SPI2CON_ON_MASK;
162:                 
163:                     // disable external interrupts, clear flags and turn off module
164:                 
165:                     // set all ports to be digital inputs
166:                     TurnPortToInput(TRISB);
167:                     TurnPortToInput(TRISC);
168:                     TurnPortToInput(TRISD);
169:                     TurnPortToInput(TRISE);
170:                     TurnPortToInput(TRISF);
171:                     TurnPortToInput(TRISG);
172:                 
173:                 #else
174:                     exit(0);
175:                 #endif   
176:                 }
177:                 
178:                 /**
179:                  * Function: BOARD_GetPBClock(void)
180:                  * @param None
181:                  * @return
182:                  */
183:                 unsigned int BOARD_GetPBClock() {
184:                     return PB_CLOCK;
185:                 }
186:                 
187:                 /**
188:                  * Function: BOARD_GetSysClock(void)
189:                  * @param None
190:                  * @return
191:                  */
192:                 unsigned int BOARD_GetSysClock() {
193:                     return SYSTEM_CLOCK;
194:                 }
195:                 
196:                 /*******************************************************************************
197:                  * PRIVATE FUNCTIONS                                                           *
198:                  ******************************************************************************/
199:                 
200:                 /**
201:                  * @Function SERIAL_Init(void)
202:                  * @param none
203:                  * @return none
204:                  * @brief  Initializes the UART subsystem to 115200 and sets up the circular buffer
205:                  * @author Max Dunne, 2011.11.10 */
206:                 
207:                 void SERIAL_Init(void) {
208:                 #ifdef PIC32
209:                     // we first clear the Configs Register to ensure a blank state and peripheral is off.
210:                     U1MODE = 0;
211:                     U1STA = 0;
212:                     //UARTConfigure(UART1, 0x00);
213:                 
214:                     //we then calculate the required frequency, note that this comes from plib source to avoid rounding errors
215:                     int sourceClock = BOARD_GetPBClock() >> 3;
216:                     int brg = sourceClock / 115200;
217:                     brg++;
218:                     brg >>= 1;
219:                     brg--;
220:                     U1BRG = brg;
221:                     //UARTSetDataRate(UART1, PB_CLOCK, 115200);
222:                     //UARTSetFifoMode(UART1, UART_INTERRUPT_ON_RX_NOT_EMPTY | UART_INTERRUPT_ON_RX_NOT_EMPTY);
223:                 
224:                     //we now enable the device
225:                 
226:                     U1STAbits.UTXEN = 1;
227:                     U1STAbits.URXEN = 1;
228:                     U1MODEbits.UARTEN = 1;
229:                 
230:                     //UARTEnable(UART1, UART_ENABLE_FLAGS(UART_PERIPHERAL | UART_TX | UART_RX));
231:                     __XC_UART = 1;
232:                     //printf("\r\n%d\t%d",U1BRG,brg);
233:                 #endif
234:                 }
235:                 
236:                 
237:                 
238:                 /*******************************************************************************
239:                  * OVERRIDE FUNCTIONS                                                          *
240:                  ******************************************************************************/
241:                 
242:                 /**
243:                  * @Function read(int handle, void *buffer, unsigned int len)
244:                  * @param handle
245:                  * @param buffer
246:                  * @param len
247:                  * @return Returns the number of characters read into buffer
248:                  * @brief Overrides the built-in function called for scanf() to ensure proper functionality
249:                  */
250:                 #ifdef PIC32
251:                 #ifndef LAB10_READ_OVERWRITE
252:                 
253:                 int read(int handle, char *buffer, unsigned int len) {
254:                     int i;
255:                     if (handle == 0) {
256:                         while (!U1STAbits.URXDA) {
257:                             if (U1STAbits.OERR) {
258:                                 U1STAbits.OERR = 0;
259:                             }
260:                             continue;
261:                         }
262:                         i = 0;
263:                         while (U1STAbits.URXDA) {
264:                             char tmp = U1RXREG;
265:                             if (tmp == '\r') {
266:                                 tmp = '\n';
267:                             }
268:                             *(char*) buffer++ = tmp;
269:                             //WriteUART1(tmp);
270:                             U1TXREG = tmp;
271:                             i++;
272:                         }
273:                         return i;
274:                     }
275:                     return 0;
276:                 }
277:                 #endif
278:                 #endif
279:                 
280:                 
281:                 #ifdef BOARD_TEST
282:                 
283:                 int main(void) {
284:                     BOARD_Init();
285:                     printf("\r\nThis stub tests SERIAL Functionality with scanf");
286:                     printf("\r\nIt will intake integers and divide by 2");
287:                     printf("\r\n Peripheral Clock: %d", BOARD_GetPBClock());
288:                     printf("\r\n Peripheral Clock: %d\r\n", BOARD_GetSysClock());
289:                     char trash;
290:                     int input;
291:                     while (1) {
292:                         scanf("%d%c", &input, &trash);
293:                         printf("\r\nEntered: %d\t/2: %d\r\n", input, input / 2);
294:                     }
295:                     while (1);
296:                     return 0;
297:                 }
298:                 #endif
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0060E0  27BDFFD0   ADDIU SP, SP, -48
9D0060E4  AFBF002C   SW RA, 44(SP)
9D0060E8  AFBE0028   SW FP, 40(SP)
9D0060EC  03A0F025   OR FP, SP, ZERO
9D0060F0  3C029D01   LUI V0, -25343
9D0060F4  8C4492FC   LW A0, -27908(V0)
9D0060F8  244392FC   ADDIU V1, V0, -27908
9D0060FC  8C630004   LW V1, 4(V1)
9D006100  AFC4001C   SW A0, 28(FP)
9D006104  AFC30020   SW V1, 32(FP)
9D006108  244292FC   ADDIU V0, V0, -27908
9D00610C  90420008   LBU V0, 8(V0)
9D006110  A3C20024   SB V0, 36(FP)
9D006114  83C30023   LB V1, 35(FP)
9D006118  83C2001E   LB V0, 30(FP)
9D00611C  00621026   XOR V0, V1, V0
9D006120  7C021420   SEB V0, V0
9D006124  00021200   SLL V0, V0, 8
9D006128  83C40020   LB A0, 32(FP)
9D00612C  83C30022   LB V1, 34(FP)
9D006130  00831826   XOR V1, A0, V1
9D006134  7C031C20   SEB V1, V1
9D006138  00431025   OR V0, V0, V1
9D00613C  AFC20010   SW V0, 16(FP)
9D006140  0F40245F   JAL srand
9D006144  8FC40010   LW A0, 16(FP)
9D006148  40026800   MFC0 V0, Cause
9D00614C  AFC20014   SW V0, 20(FP)
9D006150  8FC30014   LW V1, 20(FP)
9D006154  3C020080   LUI V0, 128
9D006158  00621025   OR V0, V1, V0
9D00615C  AFC20014   SW V0, 20(FP)
9D006160  8FC20014   LW V0, 20(FP)
9D006164  40826800   MTC0 V0, Cause
9D006168  AFC20014   SW V0, 20(FP)
9D00616C  3C02BF88   LUI V0, -16504
9D006170  24031000   ADDIU V1, ZERO, 4096
9D006174  AC431008   SW V1, 4104(V0)
9D006178  41626020   EI V0
9D00617C  AFC20018   SW V0, 24(FP)
9D006180  0F4018D4   JAL SERIAL_Init
9D006184  00000000   NOP
9D006188  00000000   NOP
9D00618C  03C0E825   OR SP, FP, ZERO
9D006190  8FBF002C   LW RA, 44(SP)
9D006194  8FBE0028   LW FP, 40(SP)
9D006198  27BD0030   ADDIU SP, SP, 48
9D00619C  03E00008   JR RA
9D0061A0  00000000   NOP
9D0061A4  27BDFFF8   ADDIU SP, SP, -8
9D0061A8  AFBE0004   SW FP, 4(SP)
9D0061AC  03A0F025   OR FP, SP, ZERO
9D0061B0  3C02BF88   LUI V0, -16504
9D0061B4  AC401060   SW ZERO, 4192(V0)
9D0061B8  3C02BF88   LUI V0, -16504
9D0061BC  AC401070   SW ZERO, 4208(V0)
9D0061C0  3C02BF88   LUI V0, -16504
9D0061C4  AC401030   SW ZERO, 4144(V0)
9D0061C8  3C02BF88   LUI V0, -16504
9D0061CC  AC401040   SW ZERO, 4160(V0)
9D0061D0  3C02BF80   LUI V0, -16512
9D0061D4  AC400600   SW ZERO, 1536(V0)
9D0061D8  3C02BF80   LUI V0, -16512
9D0061DC  AC400800   SW ZERO, 2048(V0)
9D0061E0  3C02BF80   LUI V0, -16512
9D0061E4  AC400A00   SW ZERO, 2560(V0)
9D0061E8  3C02BF80   LUI V0, -16512
9D0061EC  AC400C00   SW ZERO, 3072(V0)
9D0061F0  3C02BF80   LUI V0, -16512
9D0061F4  AC400E00   SW ZERO, 3584(V0)
9D0061F8  3C02BF80   LUI V0, -16512
9D0061FC  24030007   ADDIU V1, ZERO, 7
9D006200  AC432004   SW V1, 8196(V0)
9D006204  3C02BF80   LUI V0, -16512
9D006208  24030007   ADDIU V1, ZERO, 7
9D00620C  AC432204   SW V1, 8708(V0)
9D006210  3C02BF80   LUI V0, -16512
9D006214  24030007   ADDIU V1, ZERO, 7
9D006218  AC432404   SW V1, 9220(V0)
9D00621C  3C02BF80   LUI V0, -16512
9D006220  24030007   ADDIU V1, ZERO, 7
9D006224  AC432604   SW V1, 9732(V0)
9D006228  3C02BF80   LUI V0, -16512
9D00622C  24030007   ADDIU V1, ZERO, 7
9D006230  AC432804   SW V1, 10244(V0)
9D006234  3C02BF80   LUI V0, -16512
9D006238  34038000   ORI V1, ZERO, -32768
9D00623C  AC433004   SW V1, 12292(V0)
9D006240  3C02BF80   LUI V0, -16512
9D006244  34038000   ORI V1, ZERO, -32768
9D006248  AC433204   SW V1, 12804(V0)
9D00624C  3C02BF80   LUI V0, -16512
9D006250  34038000   ORI V1, ZERO, -32768
9D006254  AC433404   SW V1, 13316(V0)
9D006258  3C02BF80   LUI V0, -16512
9D00625C  34038000   ORI V1, ZERO, -32768
9D006260  AC433604   SW V1, 13828(V0)
9D006264  3C02BF80   LUI V0, -16512
9D006268  34038000   ORI V1, ZERO, -32768
9D00626C  AC433804   SW V1, 14340(V0)
9D006270  3C02BF80   LUI V0, -16512
9D006274  34038000   ORI V1, ZERO, -32768
9D006278  AC435004   SW V1, 20484(V0)
9D00627C  3C02BF80   LUI V0, -16512
9D006280  34038000   ORI V1, ZERO, -32768
9D006284  AC435204   SW V1, 20996(V0)
9D006288  3C02BF80   LUI V0, -16512
9D00628C  34038000   ORI V1, ZERO, -32768
9D006290  AC435804   SW V1, 22532(V0)
9D006294  3C02BF80   LUI V0, -16512
9D006298  34038000   ORI V1, ZERO, -32768
9D00629C  AC435A04   SW V1, 23044(V0)
9D0062A0  3C02BF88   LUI V0, -16504
9D0062A4  3403FFFF   ORI V1, ZERO, -1
9D0062A8  AC436040   SW V1, 24640(V0)
9D0062AC  3C02BF88   LUI V0, -16504
9D0062B0  3403FFFF   ORI V1, ZERO, -1
9D0062B4  AC436080   SW V1, 24704(V0)
9D0062B8  3C02BF88   LUI V0, -16504
9D0062BC  3403FFFF   ORI V1, ZERO, -1
9D0062C0  AC4360C0   SW V1, 24768(V0)
9D0062C4  3C02BF88   LUI V0, -16504
9D0062C8  3403FFFF   ORI V1, ZERO, -1
9D0062CC  AC436100   SW V1, 24832(V0)
9D0062D0  3C02BF88   LUI V0, -16504
9D0062D4  3403FFFF   ORI V1, ZERO, -1
9D0062D8  AC436140   SW V1, 24896(V0)
9D0062DC  3C02BF88   LUI V0, -16504
9D0062E0  3403FFFF   ORI V1, ZERO, -1
9D0062E4  AC436180   SW V1, 24960(V0)
9D0062E8  00000000   NOP
9D0062EC  03C0E825   OR SP, FP, ZERO
9D0062F0  8FBE0004   LW FP, 4(SP)
9D0062F4  27BD0008   ADDIU SP, SP, 8
9D0062F8  03E00008   JR RA
9D0062FC  00000000   NOP
9D006300  27BDFFF8   ADDIU SP, SP, -8
9D006304  AFBE0004   SW FP, 4(SP)
9D006308  03A0F025   OR FP, SP, ZERO
9D00630C  3C020131   LUI V0, 305
9D006310  34422D00   ORI V0, V0, 11520
9D006314  03C0E825   OR SP, FP, ZERO
9D006318  8FBE0004   LW FP, 4(SP)
9D00631C  27BD0008   ADDIU SP, SP, 8
9D006320  03E00008   JR RA
9D006324  00000000   NOP
9D006328  27BDFFF8   ADDIU SP, SP, -8
9D00632C  AFBE0004   SW FP, 4(SP)
9D006330  03A0F025   OR FP, SP, ZERO
9D006334  3C0204C4   LUI V0, 1220
9D006338  3442B400   ORI V0, V0, -19456
9D00633C  03C0E825   OR SP, FP, ZERO
9D006340  8FBE0004   LW FP, 4(SP)
9D006344  27BD0008   ADDIU SP, SP, 8
9D006348  03E00008   JR RA
9D00634C  00000000   NOP
9D006350  27BDFFE0   ADDIU SP, SP, -32
9D006354  AFBF001C   SW RA, 28(SP)
9D006358  AFBE0018   SW FP, 24(SP)
9D00635C  03A0F025   OR FP, SP, ZERO
9D006360  3C02BF80   LUI V0, -16512
9D006364  AC406000   SW ZERO, 24576(V0)
9D006368  3C02BF80   LUI V0, -16512
9D00636C  AC406010   SW ZERO, 24592(V0)
9D006370  0F4018C0   JAL BOARD_GetPBClock
9D006374  00000000   NOP
9D006378  000210C2   SRL V0, V0, 3
9D00637C  AFC20010   SW V0, 16(FP)
9D006380  8FC20010   LW V0, 16(FP)
9D006384  3C0391A2   LUI V1, -28254
9D006388  3463B3C5   ORI V1, V1, -19515
9D00638C  00430018   MULT 0, V0, V1
9D006390  00001810   MFHI V1
9D006394  00621821   ADDU V1, V1, V0
9D006398  00031C03   SRA V1, V1, 16
9D00639C  000217C3   SRA V0, V0, 31
9D0063A0  00621023   SUBU V0, V1, V0
9D0063A4  AFC20014   SW V0, 20(FP)
9D0063A8  8FC20014   LW V0, 20(FP)
9D0063AC  24420001   ADDIU V0, V0, 1
9D0063B0  AFC20014   SW V0, 20(FP)
9D0063B4  8FC20014   LW V0, 20(FP)
9D0063B8  00021043   SRA V0, V0, 1
9D0063BC  AFC20014   SW V0, 20(FP)
9D0063C0  8FC20014   LW V0, 20(FP)
9D0063C4  2442FFFF   ADDIU V0, V0, -1
9D0063C8  AFC20014   SW V0, 20(FP)
9D0063CC  8FC30014   LW V1, 20(FP)
9D0063D0  3C02BF80   LUI V0, -16512
9D0063D4  AC436040   SW V1, 24640(V0)
9D0063D8  3C03BF80   LUI V1, -16512
9D0063DC  8C626010   LW V0, 24592(V1)
9D0063E0  24040001   ADDIU A0, ZERO, 1
9D0063E4  7C825284   INS V0, A0, 10, 1
9D0063E8  AC626010   SW V0, 24592(V1)
9D0063EC  3C03BF80   LUI V1, -16512
9D0063F0  8C626010   LW V0, 24592(V1)
9D0063F4  24040001   ADDIU A0, ZERO, 1
9D0063F8  7C826304   INS V0, A0, 12, 1
9D0063FC  AC626010   SW V0, 24592(V1)
9D006400  3C03BF80   LUI V1, -16512
9D006404  94626000   LHU V0, 24576(V1)
9D006408  24040001   ADDIU A0, ZERO, 1
9D00640C  7C827BC4   INS V0, A0, 15, 1
9D006410  A4626000   SH V0, 24576(V1)
9D006414  24020001   ADDIU V0, ZERO, 1
9D006418  AF828010   SW V0, -32752(GP)
9D00641C  00000000   NOP
9D006420  03C0E825   OR SP, FP, ZERO
9D006424  8FBF001C   LW RA, 28(SP)
9D006428  8FBE0018   LW FP, 24(SP)
9D00642C  27BD0020   ADDIU SP, SP, 32
9D006430  03E00008   JR RA
9D006434  00000000   NOP
9D006438  27BDFFF0   ADDIU SP, SP, -16
9D00643C  AFBE000C   SW FP, 12(SP)
9D006440  03A0F025   OR FP, SP, ZERO
9D006444  AFC40010   SW A0, 16(FP)
9D006448  AFC50014   SW A1, 20(FP)
9D00644C  AFC60018   SW A2, 24(FP)
9D006450  8FC20010   LW V0, 16(FP)
9D006454  14400034   BNE V0, ZERO, 0x9D006528
9D006458  00000000   NOP
9D00645C  1000000C   BEQ ZERO, ZERO, 0x9D006490
9D006460  00000000   NOP
9D006464  3C02BF80   LUI V0, -16512
9D006468  8C426010   LW V0, 24592(V0)
9D00646C  7C420040   EXT V0, V0, 1, 1
9D006470  304200FF   ANDI V0, V0, 255
9D006474  10400005   BEQ V0, ZERO, 0x9D00648C
9D006478  00000000   NOP
9D00647C  3C03BF80   LUI V1, -16512
9D006480  8C626010   LW V0, 24592(V1)
9D006484  7C020844   INS V0, ZERO, 1, 1
9D006488  AC626010   SW V0, 24592(V1)
9D00648C  00000000   NOP
9D006490  3C02BF80   LUI V0, -16512
9D006494  8C426010   LW V0, 24592(V0)
9D006498  7C420000   EXT V0, V0, 0, 1
9D00649C  304200FF   ANDI V0, V0, 255
9D0064A0  1040FFF0   BEQ V0, ZERO, 0x9D006464
9D0064A4  00000000   NOP
9D0064A8  AFC00000   SW ZERO, 0(FP)
9D0064AC  10000015   BEQ ZERO, ZERO, 0x9D006504
9D0064B0  00000000   NOP
9D0064B4  3C02BF80   LUI V0, -16512
9D0064B8  8C426030   LW V0, 24624(V0)
9D0064BC  A3C20004   SB V0, 4(FP)
9D0064C0  83C30004   LB V1, 4(FP)
9D0064C4  2402000D   ADDIU V0, ZERO, 13
9D0064C8  14620003   BNE V1, V0, 0x9D0064D8
9D0064CC  00000000   NOP
9D0064D0  2402000A   ADDIU V0, ZERO, 10
9D0064D4  A3C20004   SB V0, 4(FP)
9D0064D8  8FC20014   LW V0, 20(FP)
9D0064DC  24430001   ADDIU V1, V0, 1
9D0064E0  AFC30014   SW V1, 20(FP)
9D0064E4  93C30004   LBU V1, 4(FP)
9D0064E8  A0430000   SB V1, 0(V0)
9D0064EC  83C30004   LB V1, 4(FP)
9D0064F0  3C02BF80   LUI V0, -16512
9D0064F4  AC436020   SW V1, 24608(V0)
9D0064F8  8FC20000   LW V0, 0(FP)
9D0064FC  24420001   ADDIU V0, V0, 1
9D006500  AFC20000   SW V0, 0(FP)
9D006504  3C02BF80   LUI V0, -16512
9D006508  8C426010   LW V0, 24592(V0)
9D00650C  7C420000   EXT V0, V0, 0, 1
9D006510  304200FF   ANDI V0, V0, 255
9D006514  1440FFE7   BNE V0, ZERO, 0x9D0064B4
9D006518  00000000   NOP
9D00651C  8FC20000   LW V0, 0(FP)
9D006520  10000002   BEQ ZERO, ZERO, 0x9D00652C
9D006524  00000000   NOP
9D006528  00001025   OR V0, ZERO, ZERO
9D00652C  03C0E825   OR SP, FP, ZERO
9D006530  8FBE000C   LW FP, 12(SP)
9D006534  27BD0010   ADDIU SP, SP, 16
9D006538  03E00008   JR RA
9D00653C  00000000   NOP
---  c:/users/james/desktop/ece13/jensming/lab09/lab9.x/agent.c  ----------------------------------------
1:                   /* 
2:                    * File:   Agent.c
3:                    * Author: James Ensminger (jensming@ucsc.edu)
4:                    *
5:                    * Created on March 9, 2022, 11:54 AM
6:                    */
7:                   
8:                   // Standard libraries
9:                   #include <stdio.h>
10:                  #include <stdlib.h>
11:                  #include <time.h>
12:                  
13:                  // User libraries
14:                  #include "Agent.h"
15:                  #include "Field.h"
16:                  #include "Message.h"
17:                  #include "Negotiation.h"
18:                  #include "BOARD.h"
19:                  #include "FieldOled.h"
20:                  
21:                  
22:                  // **** Declare any data types here ****
23:                  struct Agent {
24:                      AgentState state;
25:                      Field own, opp;
26:                      Message message;
27:                      NegotiationData secret, hash;
28:                      GuessData ownGuess, oppGuess;
29:                  };
30:                  
31:                  // **** Define any module-level, global, or external variables here ****
32:                  static struct Agent agent;
33:                  static int turnCount; // tracks number of turns
34:                  static FieldOledTurn turn; // tracks whose turn it is
35:                  static NegotiationOutcome coinFlip; // tracks result of coin flip
36:                  #define ALL_FIELD_BOATS_SUNK 0b00000000 // endgame return value from FieldGetBoatStates()
37:                  
38:                  
39:                  // **** Declared function prototypes ****
40:                  void AgentInit(void);
41:                  Message AgentRun(BB_Event event);
42:                  AgentState AgentGetState(void);
43:                  void AgentSetState(AgentState newState);
44:                  
45:                  /********************************************************************************
46:                   * Defined AgentInit function.
47:                   ********************************************************************************/
48:                  void AgentInit(void)
49:                  {
50:                      // initialize the state of agent along with turn count and whose turn it is
51:                      // to none
52:                      agent.state = AGENT_STATE_START;
53:                      turnCount = 0;
54:                      turn = FIELD_OLED_TURN_NONE;
55:                  }
56:                  
57:                  /********************************************************************************
58:                   * Defined AgentRun function.
59:                   ********************************************************************************/
60:                  Message AgentRun(BB_Event event)
61:                  {
62:                      // set seed for random number generation
63:                  //    srand(time(NULL));
64:                      
65:                      // determine what BB_Event occurred during the game
66:                      switch (event.type)
67:                      {
68:                          case BB_EVENT_NO_EVENT:
69:                              // no message, so return none
70:                              agent.message.type = MESSAGE_NONE;
71:                              break;
72:                              
73:                          case BB_EVENT_START_BUTTON:
74:                              // when in the starting state, generate agent's secret number, hash it, 
75:                              // and set up the fields for the game, then transition into the challenging state
76:                              if (agent.state == AGENT_STATE_START)
77:                              {
78:                                  // hashing secret commitment and set challenge message
79:                                  agent.secret = rand() & 0xF0F0;
80:                                  agent.message.param0 = NegotiationHash(agent.secret);
81:                                  agent.message.type = MESSAGE_CHA;
82:                                  
83:                                  // field setup
84:                                  FieldInit(&agent.own, &agent.opp);
85:                                  FieldAIPlaceAllBoats(&agent.own);
86:                                  
87:                                  // set next state to challenging state
88:                                  agent.state = AGENT_STATE_CHALLENGING;
89:                              }
90:                              else
91:                              {
92:                                  // no message if agent isn't in starting state
93:                                  agent.message.type = MESSAGE_NONE;
94:                              }
95:                              break;
96:                              
97:                          case BB_EVENT_RESET_BUTTON:
98:                              // reset the game screen along with agent
99:                              OledClear(OLED_COLOR_BLACK);
100:                             OledDrawString("Press BTN4 to play or wait for challenge.\n");
101:                             OledUpdate();
102:                             AgentInit();
103:                             
104:                             // set message to none and return it
105:                             agent.message.type = MESSAGE_NONE;
106:                             return agent.message;
107:                             break;
108:                             
109:                         case BB_EVENT_CHA_RECEIVED:
110:                             // when receiving a challenge, generate agent's secret number and 
111:                             // send it to the opponent, then transition to the accepting state
112:                             if (agent.state == AGENT_STATE_START)
113:                             {
114:                                 // generate secret commitment, store opponent's secret number,
115:                                 // and set accept message along with its parameters
116:                                 agent.secret = rand() & 0x0F0F;
117:                                 agent.hash = event.param0;
118:                                 agent.message.param0 = agent.secret;
119:                                 agent.message.type = MESSAGE_ACC;
120:                                 
121:                                 // set up field
122:                                 FieldInit(&agent.own, &agent.opp);
123:                                 FieldAIPlaceAllBoats(&agent.own);
124:                                 
125:                                 // set next state to accepting state
126:                                 agent.state = AGENT_STATE_ACCEPTING;
127:                             }
128:                             else
129:                             {
130:                                 // no message if agent isn't in starting state
131:                                 agent.message.type = MESSAGE_NONE;
132:                             }
133:                             break;
134:                             
135:                         case BB_EVENT_ACC_RECEIVED:
136:                             // when a challenger, do a coin flip with agent and opponent's secret
137:                             // number to determine who's attacking/defending, then go into state 
138:                             // that handles attack/defense mechanism of game
139:                             if (agent.state == AGENT_STATE_CHALLENGING)
140:                             {
141:                                 // prepare reveal message for agent
142:                                 agent.message.type = MESSAGE_REV;
143:                                 agent.message.param0 = agent.secret;
144:                                 
145:                                 // carry out coin flip (HEADS for agent and TAILS for opponent) 
146:                                 // and determine who is attacking/defending
147:                                 coinFlip = NegotiateCoinFlip(agent.secret, event.param0);
148:                                 if (coinFlip == HEADS)
149:                                 {
150:                                     turn = FIELD_OLED_TURN_MINE;
151:                                     agent.state = AGENT_STATE_WAITING_TO_SEND;
152:                                 }
153:                                 else
154:                                 {
155:                                     turn = FIELD_OLED_TURN_THEIRS;
156:                                     agent.state = AGENT_STATE_DEFENDING;
157:                                 }
158:                             }
159:                             else
160:                             {
161:                                 // no message if agent isn't in challenging state
162:                                 agent.message.type = MESSAGE_NONE;
163:                             }
164:                             break;
165:                             
166:                         case BB_EVENT_REV_RECEIVED:
167:                             // when an acceptor, do a coin flip with agent and opponent's secret
168:                             // number to determine who's attacking/defending, then go into state 
169:                             // that handles attack/defense mechanism of game
170:                             if (agent.state == AGENT_STATE_ACCEPTING)
171:                             {
172:                                 // check if the opponent cheated and end the game if detected
173:                                 if (NegotiationVerify(event.param0, agent.hash) == FALSE)
174:                                 {
175:                                     agent.message.type = MESSAGE_NONE;
176:                                     agent.state = AGENT_STATE_END_SCREEN;
177:                                     OledClear(OLED_COLOR_BLACK);
178:                                     OledDrawString("Game ended due to cheating message.\n");
179:                                     OledUpdate();
180:                                     return agent.message;
181:                                 }
182:                                 else
183:                                 {
184:                                     // carry out coin flip (HEADS for agent and TAILS for opponent) 
185:                                     // and determine who is attacking/defending
186:                                     coinFlip = NegotiateCoinFlip(agent.secret, event.param0);
187:                                     if (coinFlip == HEADS)
188:                                     {
189:                                         // generate a shot guess that attempts to target opponent's boats
190:                                         turn = FIELD_OLED_TURN_MINE;
191:                                         agent.ownGuess = FieldAIDecideGuess(&agent.opp);
192:                                         agent.message.type = MESSAGE_SHO;
193:                                         agent.message.param0 = agent.ownGuess.row;
194:                                         agent.message.param1 = agent.ownGuess.col;
195:                                         agent.state = AGENT_STATE_ATTACKING;
196:                                     }
197:                                     else
198:                                     {
199:                                         // opponent's turn now, agent now defends
200:                                         turn = FIELD_OLED_TURN_THEIRS;
201:                                         agent.message.type = MESSAGE_NONE;
202:                                         agent.state = AGENT_STATE_DEFENDING;
203:                                     }
204:                                 }
205:                             }
206:                             else
207:                             {
208:                                 // no message if agent isn't in accepting state
209:                                 agent.message.type = MESSAGE_NONE;
210:                             }
211:                             break;
212:                             
213:                         case BB_EVENT_SHO_RECEIVED:
214:                             // when defending, register the opponent's attack and update the boats
215:                             // in agent's field accordingly, lost the game if all agent's boats sank
216:                             if (agent.state == AGENT_STATE_DEFENDING)
217:                             {
218:                                 // register the opponent's attack by updating agent's field
219:                                 agent.oppGuess.row = event.param0;
220:                                 agent.oppGuess.col = event.param1;
221:                                 FieldRegisterEnemyAttack(&agent.own, &agent.oppGuess);
222:                                 
223:                                 // set result message along with parameters after registering attack
224:                                 agent.message.type = MESSAGE_RES;
225:                                 agent.message.param0 = agent.oppGuess.row;
226:                                 agent.message.param1 = agent.oppGuess.col;
227:                                 agent.message.param2 = agent.oppGuess.result;
228:                                 
229:                                 // end the game in defeat if all boats sunk in agent's field 
230:                                 if (FieldGetBoatStates(&agent.own) == ALL_FIELD_BOATS_SUNK)
231:                                 {
232:                                     agent.message.type = MESSAGE_NONE;
233:                                     agent.state = AGENT_STATE_END_SCREEN;
234:                                     OledClear(OLED_COLOR_BLACK);
235:                                     OledDrawString("Game over, you were defeated. Better luck next time!\n");
236:                                     OledUpdate();
237:                                     return agent.message;
238:                                 }
239:                                 else
240:                                 {
241:                                     // agent's turn now while opponent defends
242:                                     turn = FIELD_OLED_TURN_MINE;
243:                                     agent.state = AGENT_STATE_WAITING_TO_SEND;
244:                                 }
245:                             }
246:                             else
247:                             {
248:                                 // no message if agent isn't in defending state
249:                                 agent.message.type = MESSAGE_NONE;
250:                             }
251:                             break;
252:                             
253:                         case BB_EVENT_RES_RECEIVED:
254:                             // when attacking, generate shot guess to attack opponent and update
255:                             // the boats in their field accordingly, won the game if all their boats sank
256:                             if (agent.state == AGENT_STATE_ATTACKING)
257:                             {
258:                                 // register agent's attack by updating opponent's field
259:                                 agent.ownGuess.row = event.param0;
260:                                 agent.ownGuess.col = event.param1;
261:                                 agent.ownGuess.result = event.param2;
262:                                 FieldUpdateKnowledge(&agent.opp, &agent.ownGuess);
263:                                 
264:                                 // end the game in victory if all boats sunk in opponent's field 
265:                                 if (FieldGetBoatStates(&agent.opp) == ALL_FIELD_BOATS_SUNK)
266:                                 {
267:                                     agent.message.type = MESSAGE_NONE;
268:                                     agent.state = AGENT_STATE_END_SCREEN;
269:                                     OledClear(OLED_COLOR_BLACK);
270:                                     OledDrawString("Game over, you won!\n");
271:                                     OledUpdate();
272:                                     return agent.message;
273:                                 }
274:                                 else
275:                                 {
276:                                     // opponent's turn now, agent now defends
277:                                     turn = FIELD_OLED_TURN_THEIRS;
278:                                     agent.message.type = MESSAGE_NONE;
279:                                     agent.state = AGENT_STATE_DEFENDING;
280:                                 }
281:                             }
282:                             else
283:                             {
284:                                 // no message if agent isn't in defending state
285:                                 agent.message.type = MESSAGE_NONE;
286:                             }
287:                             break;
288:                             
289:                         case BB_EVENT_MESSAGE_SENT:
290:                             // when awaiting to send message and about to attack, generate agent's
291:                             // shot guess for the opponent's field to register
292:                             if (agent.state == AGENT_STATE_WAITING_TO_SEND)
293:                             {
294:                                 // generate a shot guess that attempts to target opponent's boats
295:                                 FieldAIDecideGuess(&agent.opp);
296:                                 agent.message.type = MESSAGE_SHO;
297:                                 agent.message.param0 = agent.ownGuess.row;
298:                                 agent.message.param1 = agent.ownGuess.col;
299:                                 
300:                                 // update number of turns counted and transition to attacking state
301:                                 turnCount++;
302:                                 agent.state = AGENT_STATE_ATTACKING;
303:                             }
304:                             else
305:                             {
306:                                 // no message if agent isn't in waiting state
307:                                 agent.message.type = MESSAGE_NONE;
308:                             }
309:                             break;
310:                             
311:                         case BB_EVENT_ERROR:
312:                             // determine what kind of BB_Error event occurred
313:                             switch (event.type)
314:                             {
315:                                 case BB_ERROR_BAD_CHECKSUM:
316:                                     OledClear(OLED_COLOR_BLACK);
317:                                     OledDrawString("Bad checksum.\n");
318:                                     OledUpdate();
319:                                     break;
320:                                     
321:                                 case BB_ERROR_PAYLOAD_LEN_EXCEEDED:
322:                                     OledClear(OLED_COLOR_BLACK);
323:                                     OledDrawString("Payload length exceeded.\n");
324:                                     OledUpdate();
325:                                     break;
326:                                     
327:                                 case BB_ERROR_CHECKSUM_LEN_EXCEEDED:
328:                                     OledClear(OLED_COLOR_BLACK);
329:                                     OledDrawString("Checksum length exceeded.\n");
330:                                     OledUpdate();
331:                                     break;
332:                                     
333:                                 case BB_ERROR_CHECKSUM_LEN_INSUFFICIENT:
334:                                     OledClear(OLED_COLOR_BLACK);
335:                                     OledDrawString("Insufficient checksum length.\n");
336:                                     OledUpdate();                    
337:                                     break;
338:                                     
339:                                 case BB_ERROR_INVALID_MESSAGE_TYPE:
340:                                     OledClear(OLED_COLOR_BLACK);
341:                                     OledDrawString("Invalid message type.\n");
342:                                     OledUpdate();
343:                                     break;
344:                                     
345:                                 case BB_ERROR_MESSAGE_PARSE_FAILURE:
346:                                     OledClear(OLED_COLOR_BLACK);
347:                                     OledDrawString("Message parse failure.\n");
348:                                     OledUpdate();
349:                                     break;
350:                                     
351:                                 default:
352:                                     OledClear(OLED_COLOR_BLACK);
353:                                     OledDrawString("Default error.\n");
354:                                     OledUpdate();
355:                                     break;
356:                             }
357:                             
358:                             // an error occurred, so end game
359:                             agent.message.type = MESSAGE_ERROR;
360:                             agent.state = AGENT_STATE_END_SCREEN;
361:                             return agent.message;
362:                             break;
363:                             
364:                         case BB_EVENT_SOUTH_BUTTON:
365:                             // no message or event since not considering extra credit
366:                             agent.message.type = MESSAGE_NONE;
367:                             break;
368:                             
369:                         case BB_EVENT_EAST_BUTTON:
370:                             // no message or event since not considering extra credit
371:                             agent.message.type = MESSAGE_NONE;
372:                             break;
373:                     }
374:                     
375:                     // update OLED with agent's field, opponent's field, whose turn it is, and turn count
376:                     OledClear(OLED_COLOR_BLACK);
377:                     FieldOledDrawScreen(&agent.own, &agent.opp, turn, turnCount);
378:                     OledUpdate();
379:                     return agent.message;
380:                 }
381:                 
382:                 /********************************************************************************
383:                  * Defined AgentGetState function.
384:                  ********************************************************************************/
385:                 AgentState AgentGetState(void)
386:                 {
387:                     // send current state of agent
388:                     return agent.state;
389:                 }
390:                 
391:                 /********************************************************************************
392:                  * Defined AgentSetState function.
393:                  ********************************************************************************/
394:                 void AgentSetState(AgentState newState)
395:                 {
396:                     // set the new state as the current state of agent
397:                     agent.state = newState;
398:                 }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D001328  27BDFFF8   ADDIU SP, SP, -8
9D00132C  AFBE0004   SW FP, 4(SP)
9D001330  03A0F025   OR FP, SP, ZERO
9D001334  3C02A000   LUI V0, -24576
9D001338  AC400C80   SW ZERO, 3200(V0)
9D00133C  AF80805C   SW ZERO, -32676(GP)
9D001340  AF808060   SW ZERO, -32672(GP)
9D001344  00000000   NOP
9D001348  03C0E825   OR SP, FP, ZERO
9D00134C  8FBE0004   LW FP, 4(SP)
9D001350  27BD0008   ADDIU SP, SP, 8
9D001354  03E00008   JR RA
9D001358  00000000   NOP
9D00135C  27BDFFD8   ADDIU SP, SP, -40
9D001360  AFBF0024   SW RA, 36(SP)
9D001364  AFBE0020   SW FP, 32(SP)
9D001368  AFB0001C   SW S0, 28(SP)
9D00136C  03A0F025   OR FP, SP, ZERO
9D001370  AFC40028   SW A0, 40(FP)
9D001374  AFC5002C   SW A1, 44(FP)
9D001378  AFC60030   SW A2, 48(FP)
9D00137C  AFC70034   SW A3, 52(FP)
9D001380  8FC2002C   LW V0, 44(FP)
9D001384  2C43000C   SLTIU V1, V0, 12
9D001388  10600277   BEQ V1, ZERO, 0x9D001D68
9D00138C  00000000   NOP
9D001390  00021880   SLL V1, V0, 2
9D001394  3C029D00   LUI V0, -25344
9D001398  244213AC   ADDIU V0, V0, 5036
9D00139C  00621021   ADDU V0, V1, V0
9D0013A0  8C420000   LW V0, 0(V0)
9D0013A4  00400008   JR V0
9D0013A8  00000000   NOP
9D0013DC  3C02A000   LUI V0, -24576
9D0013E8  1000025F   BEQ ZERO, ZERO, 0x9D001D68
9D0013EC  00000000   NOP
9D0013F0  3C02A000   LUI V0, -24576
9D0013F4  8C420C80   LW V0, 3200(V0)
9D0013F8  14400027   BNE V0, ZERO, 0x9D001498
9D0013FC  00000000   NOP
9D001400  0F4022EF   JAL rand
9D001404  00000000   NOP
9D001408  3043FFFF   ANDI V1, V0, -1
9D00140C  2402F0F0   ADDIU V0, ZERO, -3856
9D001410  00621024   AND V0, V1, V0
9D001414  3043FFFF   ANDI V1, V0, -1
9D001418  3C02A000   LUI V0, -24576
9D00141C  24420C80   ADDIU V0, V0, 3200
9D001420  A4430094   SH V1, 148(V0)
9D001424  3C02A000   LUI V0, -24576
9D001428  24420C80   ADDIU V0, V0, 3200
9D00142C  94420094   LHU V0, 148(V0)
9D001430  00402025   OR A0, V0, ZERO
9D001434  0F401F5A   JAL NegotiationHash
9D001438  00000000   NOP
9D00143C  00401825   OR V1, V0, ZERO
9D001440  3C02A000   LUI V0, -24576
9D001444  24420C80   ADDIU V0, V0, 3200
9D001448  AC430088   SW V1, 136(V0)
9D00144C  3C02A000   LUI V0, -24576
9D001450  24420C80   ADDIU V0, V0, 3200
9D001454  24030001   ADDIU V1, ZERO, 1
9D001458  AC430084   SW V1, 132(V0)
9D00145C  3C02A000   LUI V0, -24576
9D001460  24450CC4   ADDIU A1, V0, 3268
9D001464  3C02A000   LUI V0, -24576
9D001468  24440C84   ADDIU A0, V0, 3204
9D00146C  0F400063   JAL FieldInit
9D001470  00000000   NOP
9D001474  3C02A000   LUI V0, -24576
9D001478  24440C84   ADDIU A0, V0, 3204
9D00147C  0F4003DB   JAL FieldAIPlaceAllBoats
9D001480  00000000   NOP
9D001484  3C02A000   LUI V0, -24576
9D001488  24030001   ADDIU V1, ZERO, 1
9D00148C  AC430C80   SW V1, 3200(V0)
9D001490  10000235   BEQ ZERO, ZERO, 0x9D001D68
9D001494  00000000   NOP
9D001498  3C02A000   LUI V0, -24576
9D00149C  24420C80   ADDIU V0, V0, 3200
9D0014A0  AC400084   SW ZERO, 132(V0)
9D0014A4  10000230   BEQ ZERO, ZERO, 0x9D001D68
9D0014A8  00000000   NOP
9D0014AC  00002025   OR A0, ZERO, ZERO
9D0014B0  0F401D74   JAL OledClear
9D0014B4  00000000   NOP
9D0014B8  3C029D00   LUI V0, -25344
9D0014BC  24447EC4   ADDIU A0, V0, 32452
9D0014C0  0F401D63   JAL OledDrawString
9D0014C4  00000000   NOP
9D0014C8  0F401DBD   JAL OledUpdate
9D0014CC  00000000   NOP
9D0014D0  0F4004CA   JAL AgentInit
9D0014D4  00000000   NOP
9D0014D8  3C02A000   LUI V0, -24576
9D0014DC  24420C80   ADDIU V0, V0, 3200
9D0014E0  AC400084   SW ZERO, 132(V0)
9D0014E4  8FC20028   LW V0, 40(FP)
9D0014E8  3C03A000   LUI V1, -24576
9D0014EC  24630C80   ADDIU V1, V1, 3200
9D0014F0  8C660084   LW A2, 132(V1)
9D0014F4  8C650088   LW A1, 136(V1)
9D0014F8  8C64008C   LW A0, 140(V1)
9D0014FC  8C630090   LW V1, 144(V1)
9D001500  AC460000   SW A2, 0(V0)
9D001504  AC450004   SW A1, 4(V0)
9D001508  AC440008   SW A0, 8(V0)
9D00150C  AC43000C   SW V1, 12(V0)
9D001510  10000230   BEQ ZERO, ZERO, 0x9D001DD4
9D001514  00000000   NOP
9D001518  3C02A000   LUI V0, -24576
9D00151C  8C420C80   LW V0, 3200(V0)
9D001520  14400027   BNE V0, ZERO, 0x9D0015C0
9D001524  00000000   NOP
9D001528  0F4022EF   JAL rand
9D00152C  00000000   NOP
9D001530  3042FFFF   ANDI V0, V0, -1
9D001534  30420F0F   ANDI V0, V0, 3855
9D001538  3043FFFF   ANDI V1, V0, -1
9D00153C  3C02A000   LUI V0, -24576
9D001540  24420C80   ADDIU V0, V0, 3200
9D001544  A4430094   SH V1, 148(V0)
9D001548  97C30030   LHU V1, 48(FP)
9D00154C  3C02A000   LUI V0, -24576
9D001550  24420C80   ADDIU V0, V0, 3200
9D001554  A4430096   SH V1, 150(V0)
9D001558  3C02A000   LUI V0, -24576
9D00155C  24420C80   ADDIU V0, V0, 3200
9D001560  94420094   LHU V0, 148(V0)
9D001564  00401825   OR V1, V0, ZERO
9D001568  3C02A000   LUI V0, -24576
9D00156C  24420C80   ADDIU V0, V0, 3200
9D001570  AC430088   SW V1, 136(V0)
9D001574  3C02A000   LUI V0, -24576
9D001578  24420C80   ADDIU V0, V0, 3200
9D00157C  24030002   ADDIU V1, ZERO, 2
9D001580  AC430084   SW V1, 132(V0)
9D001584  3C02A000   LUI V0, -24576
9D001588  24450CC4   ADDIU A1, V0, 3268
9D00158C  3C02A000   LUI V0, -24576
9D001590  24440C84   ADDIU A0, V0, 3204
9D001594  0F400063   JAL FieldInit
9D001598  00000000   NOP
9D00159C  3C02A000   LUI V0, -24576
9D0015A0  24440C84   ADDIU A0, V0, 3204
9D0015A4  0F4003DB   JAL FieldAIPlaceAllBoats
9D0015A8  00000000   NOP
9D0015AC  3C02A000   LUI V0, -24576
9D0015B0  24030002   ADDIU V1, ZERO, 2
9D0015B4  AC430C80   SW V1, 3200(V0)
9D0015B8  100001EB   BEQ ZERO, ZERO, 0x9D001D68
9D0015BC  00000000   NOP
9D0015C0  3C02A000   LUI V0, -24576
9D0015C4  24420C80   ADDIU V0, V0, 3200
9D0015C8  AC400084   SW ZERO, 132(V0)
9D0015CC  100001E6   BEQ ZERO, ZERO, 0x9D001D68
9D0015D0  00000000   NOP
9D0015D4  3C02A000   LUI V0, -24576
9D0015D8  8C430C80   LW V1, 3200(V0)
9D0015DC  24020001   ADDIU V0, ZERO, 1
9D0015E0  14620026   BNE V1, V0, 0x9D00167C
9D0015E4  00000000   NOP
9D0015E8  3C02A000   LUI V0, -24576
9D0015EC  24420C80   ADDIU V0, V0, 3200
9D0015F0  24030003   ADDIU V1, ZERO, 3
9D0015F4  AC430084   SW V1, 132(V0)
9D0015F8  3C02A000   LUI V0, -24576
9D0015FC  24420C80   ADDIU V0, V0, 3200
9D001600  94420094   LHU V0, 148(V0)
9D001604  00401825   OR V1, V0, ZERO
9D001608  3C02A000   LUI V0, -24576
9D00160C  24420C80   ADDIU V0, V0, 3200
9D001610  AC430088   SW V1, 136(V0)
9D001614  3C02A000   LUI V0, -24576
9D001618  24420C80   ADDIU V0, V0, 3200
9D00161C  94420094   LHU V0, 148(V0)
9D001620  97C30030   LHU V1, 48(FP)
9D001624  00602825   OR A1, V1, ZERO
9D001628  00402025   OR A0, V0, ZERO
9D00162C  0F401F96   JAL NegotiateCoinFlip
9D001630  00000000   NOP
9D001634  AF828064   SW V0, -32668(GP)
9D001638  8F828064   LW V0, -32668(GP)
9D00163C  14400008   BNE V0, ZERO, 0x9D001660
9D001640  00000000   NOP
9D001644  24020001   ADDIU V0, ZERO, 1
9D001648  AF828060   SW V0, -32672(GP)
9D00164C  3C02A000   LUI V0, -24576
9D001650  24030005   ADDIU V1, ZERO, 5
9D001654  AC430C80   SW V1, 3200(V0)
9D001658  100001C3   BEQ ZERO, ZERO, 0x9D001D68
9D00165C  00000000   NOP
9D001660  24020002   ADDIU V0, ZERO, 2
9D001664  AF828060   SW V0, -32672(GP)
9D001668  3C02A000   LUI V0, -24576
9D00166C  24030004   ADDIU V1, ZERO, 4
9D001670  AC430C80   SW V1, 3200(V0)
9D001674  100001BC   BEQ ZERO, ZERO, 0x9D001D68
9D001678  00000000   NOP
9D00167C  3C02A000   LUI V0, -24576
9D001680  24420C80   ADDIU V0, V0, 3200
9D001684  AC400084   SW ZERO, 132(V0)
9D001688  100001B7   BEQ ZERO, ZERO, 0x9D001D68
9D00168C  00000000   NOP
9D001690  3C02A000   LUI V0, -24576
9D001694  8C430C80   LW V1, 3200(V0)
9D001698  24020002   ADDIU V0, ZERO, 2
9D00169C  14620062   BNE V1, V0, 0x9D001828
9D0016A0  00000000   NOP
9D0016A4  97C30030   LHU V1, 48(FP)
9D0016A8  3C02A000   LUI V0, -24576
9D0016AC  24420C80   ADDIU V0, V0, 3200
9D0016B0  94420096   LHU V0, 150(V0)
9D0016B4  00402825   OR A1, V0, ZERO
9D0016B8  00602025   OR A0, V1, ZERO
9D0016BC  0F401F7B   JAL NegotiationVerify
9D0016C0  00000000   NOP
9D0016C4  1440001D   BNE V0, ZERO, 0x9D00173C
9D0016C8  00000000   NOP
9D0016CC  3C02A000   LUI V0, -24576
9D0016D0  24420C80   ADDIU V0, V0, 3200
9D0016D4  AC400084   SW ZERO, 132(V0)
9D0016D8  3C02A000   LUI V0, -24576
9D0016DC  24030006   ADDIU V1, ZERO, 6
9D0016E0  AC430C80   SW V1, 3200(V0)
9D0016E4  00002025   OR A0, ZERO, ZERO
9D0016E8  0F401D74   JAL OledClear
9D0016EC  00000000   NOP
9D0016F0  3C029D00   LUI V0, -25344
9D0016F4  24447EF0   ADDIU A0, V0, 32496
9D0016F8  0F401D63   JAL OledDrawString
9D0016FC  00000000   NOP
9D001700  0F401DBD   JAL OledUpdate
9D001704  00000000   NOP
9D001708  8FC20028   LW V0, 40(FP)
9D00170C  3C03A000   LUI V1, -24576
9D001710  24630C80   ADDIU V1, V1, 3200
9D001714  8C660084   LW A2, 132(V1)
9D001718  8C650088   LW A1, 136(V1)
9D00171C  8C64008C   LW A0, 140(V1)
9D001720  8C630090   LW V1, 144(V1)
9D001724  AC460000   SW A2, 0(V0)
9D001728  AC450004   SW A1, 4(V0)
9D00172C  AC440008   SW A0, 8(V0)
9D001730  AC43000C   SW V1, 12(V0)
9D001734  100001A7   BEQ ZERO, ZERO, 0x9D001DD4
9D001738  00000000   NOP
9D00173C  3C02A000   LUI V0, -24576
9D001740  24420C80   ADDIU V0, V0, 3200
9D001744  94420094   LHU V0, 148(V0)
9D001748  97C30030   LHU V1, 48(FP)
9D00174C  00602825   OR A1, V1, ZERO
9D001750  00402025   OR A0, V0, ZERO
9D001754  0F401F96   JAL NegotiateCoinFlip
9D001758  00000000   NOP
9D00175C  AF828064   SW V0, -32668(GP)
9D001760  8F828064   LW V0, -32668(GP)
9D001764  14400026   BNE V0, ZERO, 0x9D001800
9D001768  00000000   NOP
9D00176C  24020001   ADDIU V0, ZERO, 1
9D001770  AF828060   SW V0, -32672(GP)
9D001774  3C02A000   LUI V0, -24576
9D001778  24500C80   ADDIU S0, V0, 3200
9D00177C  3C02A000   LUI V0, -24576
9D001780  24450CC4   ADDIU A1, V0, 3268
9D001784  27C20010   ADDIU V0, FP, 16
9D001788  00402025   OR A0, V0, ZERO
9D00178C  0F400478   JAL FieldAIDecideGuess
9D001790  00000000   NOP
9D001794  8FC30010   LW V1, 16(FP)
9D001798  8FC20014   LW V0, 20(FP)
9D00179C  AE030098   SW V1, 152(S0)
9D0017A0  AE02009C   SW V0, 156(S0)
9D0017A4  3C02A000   LUI V0, -24576
9D0017A8  24420C80   ADDIU V0, V0, 3200
9D0017AC  24030004   ADDIU V1, ZERO, 4
9D0017B0  AC430084   SW V1, 132(V0)
9D0017B4  3C02A000   LUI V0, -24576
9D0017B8  24420C80   ADDIU V0, V0, 3200
9D0017BC  90420098   LBU V0, 152(V0)
9D0017C0  00401825   OR V1, V0, ZERO
9D0017C4  3C02A000   LUI V0, -24576
9D0017C8  24420C80   ADDIU V0, V0, 3200
9D0017CC  AC430088   SW V1, 136(V0)
9D0017D0  3C02A000   LUI V0, -24576
9D0017D4  24420C80   ADDIU V0, V0, 3200
9D0017D8  90420099   LBU V0, 153(V0)
9D0017DC  00401825   OR V1, V0, ZERO
9D0017E0  3C02A000   LUI V0, -24576
9D0017E4  24420C80   ADDIU V0, V0, 3200
9D0017E8  AC43008C   SW V1, 140(V0)
9D0017EC  3C02A000   LUI V0, -24576
9D0017F0  24030003   ADDIU V1, ZERO, 3
9D0017F4  AC430C80   SW V1, 3200(V0)
9D0017F8  1000015B   BEQ ZERO, ZERO, 0x9D001D68
9D0017FC  00000000   NOP
9D001800  24020002   ADDIU V0, ZERO, 2
9D001804  AF828060   SW V0, -32672(GP)
9D001808  3C02A000   LUI V0, -24576
9D00180C  24420C80   ADDIU V0, V0, 3200
9D001810  AC400084   SW ZERO, 132(V0)
9D001814  3C02A000   LUI V0, -24576
9D001818  24030004   ADDIU V1, ZERO, 4
9D00181C  AC430C80   SW V1, 3200(V0)
9D001820  10000151   BEQ ZERO, ZERO, 0x9D001D68
9D001824  00000000   NOP
9D001828  3C02A000   LUI V0, -24576
9D00182C  24420C80   ADDIU V0, V0, 3200
9D001830  AC400084   SW ZERO, 132(V0)
9D001834  1000014C   BEQ ZERO, ZERO, 0x9D001D68
9D001838  00000000   NOP
9D00183C  3C02A000   LUI V0, -24576
9D001840  8C430C80   LW V1, 3200(V0)
9D001844  24020004   ADDIU V0, ZERO, 4
9D001848  14620052   BNE V1, V0, 0x9D001994
9D00184C  00000000   NOP
9D001850  97C20030   LHU V0, 48(FP)
9D001854  304300FF   ANDI V1, V0, 255
9D001858  3C02A000   LUI V0, -24576
9D00185C  24420C80   ADDIU V0, V0, 3200
9D001860  A04300A0   SB V1, 160(V0)
9D001864  97C20032   LHU V0, 50(FP)
9D001868  304300FF   ANDI V1, V0, 255
9D00186C  3C02A000   LUI V0, -24576
9D001870  24420C80   ADDIU V0, V0, 3200
9D001874  A04300A1   SB V1, 161(V0)
9D001878  3C02A000   LUI V0, -24576
9D00187C  24450D20   ADDIU A1, V0, 3360
9D001880  3C02A000   LUI V0, -24576
9D001884  24440C84   ADDIU A0, V0, 3204
9D001888  0F4001D1   JAL FieldRegisterEnemyAttack
9D00188C  00000000   NOP
9D001890  3C02A000   LUI V0, -24576
9D001894  24420C80   ADDIU V0, V0, 3200
9D001898  24030005   ADDIU V1, ZERO, 5
9D00189C  AC430084   SW V1, 132(V0)
9D0018A0  3C02A000   LUI V0, -24576
9D0018A4  24420C80   ADDIU V0, V0, 3200
9D0018A8  904200A0   LBU V0, 160(V0)
9D0018AC  00401825   OR V1, V0, ZERO
9D0018B0  3C02A000   LUI V0, -24576
9D0018B4  24420C80   ADDIU V0, V0, 3200
9D0018B8  AC430088   SW V1, 136(V0)
9D0018BC  3C02A000   LUI V0, -24576
9D0018C0  24420C80   ADDIU V0, V0, 3200
9D0018C4  904200A1   LBU V0, 161(V0)
9D0018C8  00401825   OR V1, V0, ZERO
9D0018CC  3C02A000   LUI V0, -24576
9D0018D0  24420C80   ADDIU V0, V0, 3200
9D0018D4  AC43008C   SW V1, 140(V0)
9D0018D8  3C02A000   LUI V0, -24576
9D0018DC  24420C80   ADDIU V0, V0, 3200
9D0018E0  8C4300A4   LW V1, 164(V0)
9D0018E4  3C02A000   LUI V0, -24576
9D0018E8  24420C80   ADDIU V0, V0, 3200
9D0018EC  AC430090   SW V1, 144(V0)
9D0018F0  3C02A000   LUI V0, -24576
9D0018F4  24440C84   ADDIU A0, V0, 3204
9D0018F8  0F4003B0   JAL FieldGetBoatStates
9D0018FC  00000000   NOP
9D001900  1440001D   BNE V0, ZERO, 0x9D001978
9D001904  00000000   NOP
9D001908  3C02A000   LUI V0, -24576
9D00190C  24420C80   ADDIU V0, V0, 3200
9D001910  AC400084   SW ZERO, 132(V0)
9D001914  3C02A000   LUI V0, -24576
9D001918  24030006   ADDIU V1, ZERO, 6
9D00191C  AC430C80   SW V1, 3200(V0)
9D001920  00002025   OR A0, ZERO, ZERO
9D001924  0F401D74   JAL OledClear
9D001928  00000000   NOP
9D00192C  3C029D00   LUI V0, -25344
9D001930  24447F18   ADDIU A0, V0, 32536
9D001934  0F401D63   JAL OledDrawString
9D001938  00000000   NOP
9D00193C  0F401DBD   JAL OledUpdate
9D001940  00000000   NOP
9D001944  8FC20028   LW V0, 40(FP)
9D001948  3C03A000   LUI V1, -24576
9D00194C  24630C80   ADDIU V1, V1, 3200
9D001950  8C660084   LW A2, 132(V1)
9D001954  8C650088   LW A1, 136(V1)
9D001958  8C64008C   LW A0, 140(V1)
9D00195C  8C630090   LW V1, 144(V1)
9D001960  AC460000   SW A2, 0(V0)
9D001964  AC450004   SW A1, 4(V0)
9D001968  AC440008   SW A0, 8(V0)
9D00196C  AC43000C   SW V1, 12(V0)
9D001970  10000118   BEQ ZERO, ZERO, 0x9D001DD4
9D001974  00000000   NOP
9D001978  24020001   ADDIU V0, ZERO, 1
9D00197C  AF828060   SW V0, -32672(GP)
9D001980  3C02A000   LUI V0, -24576
9D001984  24030005   ADDIU V1, ZERO, 5
9D001988  AC430C80   SW V1, 3200(V0)
9D00198C  100000F6   BEQ ZERO, ZERO, 0x9D001D68
9D001990  00000000   NOP
9D001994  3C02A000   LUI V0, -24576
9D001998  24420C80   ADDIU V0, V0, 3200
9D00199C  AC400084   SW ZERO, 132(V0)
9D0019A0  100000F1   BEQ ZERO, ZERO, 0x9D001D68
9D0019A4  00000000   NOP
9D0019A8  3C02A000   LUI V0, -24576
9D0019AC  8C430C80   LW V1, 3200(V0)
9D0019B0  24020003   ADDIU V0, ZERO, 3
9D0019B4  14620042   BNE V1, V0, 0x9D001AC0
9D0019B8  00000000   NOP
9D0019BC  97C20030   LHU V0, 48(FP)
9D0019C0  304300FF   ANDI V1, V0, 255
9D0019C4  3C02A000   LUI V0, -24576
9D0019C8  24420C80   ADDIU V0, V0, 3200
9D0019CC  A0430098   SB V1, 152(V0)
9D0019D0  97C20032   LHU V0, 50(FP)
9D0019D4  304300FF   ANDI V1, V0, 255
9D0019D8  3C02A000   LUI V0, -24576
9D0019DC  24420C80   ADDIU V0, V0, 3200
9D0019E0  A0430099   SB V1, 153(V0)
9D0019E4  97C20034   LHU V0, 52(FP)
9D0019E8  00401825   OR V1, V0, ZERO
9D0019EC  3C02A000   LUI V0, -24576
9D0019F0  24420C80   ADDIU V0, V0, 3200
9D0019F4  AC43009C   SW V1, 156(V0)
9D0019F8  3C02A000   LUI V0, -24576
9D0019FC  24450D18   ADDIU A1, V0, 3352
9D001A00  3C02A000   LUI V0, -24576
9D001A04  24440CC4   ADDIU A0, V0, 3268
9D001A08  0F4002AA   JAL FieldUpdateKnowledge
9D001A0C  00000000   NOP
9D001A10  3C02A000   LUI V0, -24576
9D001A14  24440CC4   ADDIU A0, V0, 3268
9D001A18  0F4003B0   JAL FieldGetBoatStates
9D001A1C  00000000   NOP
9D001A20  1440001D   BNE V0, ZERO, 0x9D001A98
9D001A24  00000000   NOP
9D001A28  3C02A000   LUI V0, -24576
9D001A2C  24420C80   ADDIU V0, V0, 3200
9D001A30  AC400084   SW ZERO, 132(V0)
9D001A34  3C02A000   LUI V0, -24576
9D001A38  24030006   ADDIU V1, ZERO, 6
9D001A3C  AC430C80   SW V1, 3200(V0)
9D001A40  00002025   OR A0, ZERO, ZERO
9D001A44  0F401D74   JAL OledClear
9D001A48  00000000   NOP
9D001A4C  3C029D00   LUI V0, -25344
9D001A50  24447F50   ADDIU A0, V0, 32592
9D001A54  0F401D63   JAL OledDrawString
9D001A58  00000000   NOP
9D001A5C  0F401DBD   JAL OledUpdate
9D001A60  00000000   NOP
9D001A64  8FC20028   LW V0, 40(FP)
9D001A68  3C03A000   LUI V1, -24576
9D001A6C  24630C80   ADDIU V1, V1, 3200
9D001A70  8C660084   LW A2, 132(V1)
9D001A74  8C650088   LW A1, 136(V1)
9D001A78  8C64008C   LW A0, 140(V1)
9D001A7C  8C630090   LW V1, 144(V1)
9D001A80  AC460000   SW A2, 0(V0)
9D001A84  AC450004   SW A1, 4(V0)
9D001A88  AC440008   SW A0, 8(V0)
9D001A8C  AC43000C   SW V1, 12(V0)
9D001A90  100000D0   BEQ ZERO, ZERO, 0x9D001DD4
9D001A94  00000000   NOP
9D001A98  24020002   ADDIU V0, ZERO, 2
9D001A9C  AF828060   SW V0, -32672(GP)
9D001AA0  3C02A000   LUI V0, -24576
9D001AA4  24420C80   ADDIU V0, V0, 3200
9D001AA8  AC400084   SW ZERO, 132(V0)
9D001AAC  3C02A000   LUI V0, -24576
9D001AB0  24030004   ADDIU V1, ZERO, 4
9D001AB4  AC430C80   SW V1, 3200(V0)
9D001AB8  100000AB   BEQ ZERO, ZERO, 0x9D001D68
9D001ABC  00000000   NOP
9D001AC0  3C02A000   LUI V0, -24576
9D001AC4  24420C80   ADDIU V0, V0, 3200
9D001AC8  AC400084   SW ZERO, 132(V0)
9D001ACC  100000A6   BEQ ZERO, ZERO, 0x9D001D68
9D001AD0  00000000   NOP
9D001AD4  3C02A000   LUI V0, -24576
9D001AD8  8C430C80   LW V1, 3200(V0)
9D001ADC  24020005   ADDIU V0, ZERO, 5
9D001AE0  14620021   BNE V1, V0, 0x9D001B68
9D001AE4  00000000   NOP
9D001AE8  3C02A000   LUI V0, -24576
9D001AEC  24450CC4   ADDIU A1, V0, 3268
9D001AF0  27C20010   ADDIU V0, FP, 16
9D001AF4  00402025   OR A0, V0, ZERO
9D001AF8  0F400478   JAL FieldAIDecideGuess
9D001AFC  00000000   NOP
9D001B00  3C02A000   LUI V0, -24576
9D001B04  24420C80   ADDIU V0, V0, 3200
9D001B08  24030004   ADDIU V1, ZERO, 4
9D001B0C  AC430084   SW V1, 132(V0)
9D001B10  3C02A000   LUI V0, -24576
9D001B14  24420C80   ADDIU V0, V0, 3200
9D001B18  90420098   LBU V0, 152(V0)
9D001B1C  00401825   OR V1, V0, ZERO
9D001B20  3C02A000   LUI V0, -24576
9D001B24  24420C80   ADDIU V0, V0, 3200
9D001B28  AC430088   SW V1, 136(V0)
9D001B2C  3C02A000   LUI V0, -24576
9D001B30  24420C80   ADDIU V0, V0, 3200
9D001B34  90420099   LBU V0, 153(V0)
9D001B38  00401825   OR V1, V0, ZERO
9D001B3C  3C02A000   LUI V0, -24576
9D001B40  24420C80   ADDIU V0, V0, 3200
9D001B44  AC43008C   SW V1, 140(V0)
9D001B48  8F82805C   LW V0, -32676(GP)
9D001B4C  24420001   ADDIU V0, V0, 1
9D001B50  AF82805C   SW V0, -32676(GP)
9D001B54  3C02A000   LUI V0, -24576
9D001B58  24030003   ADDIU V1, ZERO, 3
9D001B5C  AC430C80   SW V1, 3200(V0)
9D001B60  10000081   BEQ ZERO, ZERO, 0x9D001D68
9D001B64  00000000   NOP
9D001B68  3C02A000   LUI V0, -24576
9D001B6C  24420C80   ADDIU V0, V0, 3200
9D001B70  AC400084   SW ZERO, 132(V0)
9D001B74  1000007C   BEQ ZERO, ZERO, 0x9D001D68
9D001B78  00000000   NOP
9D001B7C  8FC2002C   LW V0, 44(FP)
9D001B80  2C430007   SLTIU V1, V0, 7
9D001B84  10600051   BEQ V1, ZERO, 0x9D001CCC
9D001B88  00000000   NOP
9D001B8C  00021880   SLL V1, V0, 2
9D001B90  3C029D00   LUI V0, -25344
9D001B94  24421BA8   ADDIU V0, V0, 7080
9D001B98  00621021   ADDU V0, V1, V0
9D001B9C  8C420000   LW V0, 0(V0)
9D001BA0  00400008   JR V0
9D001BA4  00000000   NOP
9D001BC4  00002025   OR A0, ZERO, ZERO
9D001BC8  0F401D74   JAL OledClear
9D001BCC  00000000   NOP
9D001BD0  3C029D00   LUI V0, -25344
9D001BD4  24447F68   ADDIU A0, V0, 32616
9D001BD8  0F401D63   JAL OledDrawString
9D001BDC  00000000   NOP
9D001BE0  0F401DBD   JAL OledUpdate
9D001BE4  00000000   NOP
9D001BE8  10000042   BEQ ZERO, ZERO, 0x9D001CF4
9D001BEC  00000000   NOP
9D001BF0  00002025   OR A0, ZERO, ZERO
9D001BF4  0F401D74   JAL OledClear
9D001BF8  00000000   NOP
9D001BFC  3C029D00   LUI V0, -25344
9D001C00  24447F78   ADDIU A0, V0, 32632
9D001C04  0F401D63   JAL OledDrawString
9D001C08  00000000   NOP
9D001C0C  0F401DBD   JAL OledUpdate
9D001C10  00000000   NOP
9D001C14  10000037   BEQ ZERO, ZERO, 0x9D001CF4
9D001C18  00000000   NOP
9D001C1C  00002025   OR A0, ZERO, ZERO
9D001C20  0F401D74   JAL OledClear
9D001C24  00000000   NOP
9D001C28  3C029D00   LUI V0, -25344
9D001C2C  24447F94   ADDIU A0, V0, 32660
9D001C30  0F401D63   JAL OledDrawString
9D001C34  00000000   NOP
9D001C38  0F401DBD   JAL OledUpdate
9D001C3C  00000000   NOP
9D001C40  1000002C   BEQ ZERO, ZERO, 0x9D001CF4
9D001C44  00000000   NOP
9D001C48  00002025   OR A0, ZERO, ZERO
9D001C4C  0F401D74   JAL OledClear
9D001C50  00000000   NOP
9D001C54  3C029D00   LUI V0, -25344
9D001C58  24447FB0   ADDIU A0, V0, 32688
9D001C5C  0F401D63   JAL OledDrawString
9D001C60  00000000   NOP
9D001C64  0F401DBD   JAL OledUpdate
9D001C68  00000000   NOP
9D001C6C  10000021   BEQ ZERO, ZERO, 0x9D001CF4
9D001C70  00000000   NOP
9D001C74  00002025   OR A0, ZERO, ZERO
9D001C78  0F401D74   JAL OledClear
9D001C7C  00000000   NOP
9D001C80  3C029D00   LUI V0, -25344
9D001C84  24447FD0   ADDIU A0, V0, 32720
9D001C88  0F401D63   JAL OledDrawString
9D001C8C  00000000   NOP
9D001C90  0F401DBD   JAL OledUpdate
9D001C94  00000000   NOP
9D001C98  10000016   BEQ ZERO, ZERO, 0x9D001CF4
9D001C9C  00000000   NOP
9D001CA0  00002025   OR A0, ZERO, ZERO
9D001CA4  0F401D74   JAL OledClear
9D001CA8  00000000   NOP
9D001CAC  3C029D00   LUI V0, -25344
9D001CB0  24447FE8   ADDIU A0, V0, 32744
9D001CB4  0F401D63   JAL OledDrawString
9D001CB8  00000000   NOP
9D001CBC  0F401DBD   JAL OledUpdate
9D001CC0  00000000   NOP
9D001CC4  1000000B   BEQ ZERO, ZERO, 0x9D001CF4
9D001CC8  00000000   NOP
9D001CCC  00002025   OR A0, ZERO, ZERO
9D001CD0  0F401D74   JAL OledClear
9D001CD4  00000000   NOP
9D001CD8  3C029D01   LUI V0, -25343
9D001CDC  24448000   ADDIU A0, V0, -32768
9D001CE0  0F401D63   JAL OledDrawString
9D001CE4  00000000   NOP
9D001CE8  0F401DBD   JAL OledUpdate
9D001CEC  00000000   NOP
9D001CF0  00000000   NOP
9D001CF4  3C02A000   LUI V0, -24576
9D001CF8  24420C80   ADDIU V0, V0, 3200
9D001CFC  2403FFFF   ADDIU V1, ZERO, -1
9D001D00  AC430084   SW V1, 132(V0)
9D001D04  3C02A000   LUI V0, -24576
9D001D08  24030006   ADDIU V1, ZERO, 6
9D001D0C  AC430C80   SW V1, 3200(V0)
9D001D10  8FC20028   LW V0, 40(FP)
9D001D14  3C03A000   LUI V1, -24576
9D001D18  24630C80   ADDIU V1, V1, 3200
9D001D1C  8C660084   LW A2, 132(V1)
9D001D20  8C650088   LW A1, 136(V1)
9D001D24  8C64008C   LW A0, 140(V1)
9D001D28  8C630090   LW V1, 144(V1)
9D001D2C  AC460000   SW A2, 0(V0)
9D001D30  AC450004   SW A1, 4(V0)
9D001D34  AC440008   SW A0, 8(V0)
9D001D38  AC43000C   SW V1, 12(V0)
9D001D3C  10000025   BEQ ZERO, ZERO, 0x9D001DD4
9D001D40  00000000   NOP
9D001D44  3C02A000   LUI V0, -24576
9D001D48  24420C80   ADDIU V0, V0, 3200
9D001D4C  AC400084   SW ZERO, 132(V0)
9D001D50  10000005   BEQ ZERO, ZERO, 0x9D001D68
9D001D54  00000000   NOP
9D001D58  3C02A000   LUI V0, -24576
9D001D5C  24420C80   ADDIU V0, V0, 3200
9D001D60  AC400084   SW ZERO, 132(V0)
9D001D64  00000000   NOP
9D001D68  00002025   OR A0, ZERO, ZERO
9D001D6C  0F401D74   JAL OledClear
9D001D70  00000000   NOP
9D001D74  8F828060   LW V0, -32672(GP)
9D001D78  8F83805C   LW V1, -32676(GP)
9D001D7C  306300FF   ANDI V1, V1, 255
9D001D80  00603825   OR A3, V1, ZERO
9D001D84  00403025   OR A2, V0, ZERO
9D001D88  3C02A000   LUI V0, -24576
9D001D8C  24450CC4   ADDIU A1, V0, 3268
9D001D90  3C02A000   LUI V0, -24576
9D001D94  24440C84   ADDIU A0, V0, 3204
9D001D98  0F40157E   JAL FieldOledDrawScreen
9D001D9C  00000000   NOP
9D001DA0  0F401DBD   JAL OledUpdate
9D001DA4  00000000   NOP
9D001DA8  8FC20028   LW V0, 40(FP)
9D001DAC  3C03A000   LUI V1, -24576
9D001DB0  24630C80   ADDIU V1, V1, 3200
9D001DB4  8C660084   LW A2, 132(V1)
9D001DB8  8C650088   LW A1, 136(V1)
9D001DBC  8C64008C   LW A0, 140(V1)
9D001DC0  8C630090   LW V1, 144(V1)
9D001DC4  AC460000   SW A2, 0(V0)
9D001DC8  AC450004   SW A1, 4(V0)
9D001DCC  AC440008   SW A0, 8(V0)
9D001DD0  AC43000C   SW V1, 12(V0)
9D001DD4  8FC20028   LW V0, 40(FP)
9D001DD8  03C0E825   OR SP, FP, ZERO
9D001DDC  8FBF0024   LW RA, 36(SP)
9D001DE0  8FBE0020   LW FP, 32(SP)
9D001DE4  8FB0001C   LW S0, 28(SP)
9D001DE8  27BD0028   ADDIU SP, SP, 40
9D001DEC  03E00008   JR RA
9D001DF0  00000000   NOP
9D001DF4  27BDFFF8   ADDIU SP, SP, -8
9D001DF8  AFBE0004   SW FP, 4(SP)
9D001DFC  03A0F025   OR FP, SP, ZERO
9D001E00  3C02A000   LUI V0, -24576
9D001E04  8C420C80   LW V0, 3200(V0)
9D001E08  03C0E825   OR SP, FP, ZERO
9D001E0C  8FBE0004   LW FP, 4(SP)
9D001E10  27BD0008   ADDIU SP, SP, 8
9D001E14  03E00008   JR RA
9D001E18  00000000   NOP
9D001E1C  27BDFFF8   ADDIU SP, SP, -8
9D001E20  AFBE0004   SW FP, 4(SP)
9D001E24  03A0F025   OR FP, SP, ZERO
9D001E28  AFC40008   SW A0, 8(FP)
9D001E2C  3C02A000   LUI V0, -24576
9D001E30  8FC30008   LW V1, 8(FP)
9D001E34  AC430C80   SW V1, 3200(V0)
9D001E38  00000000   NOP
9D001E3C  03C0E825   OR SP, FP, ZERO
9D001E40  8FBE0004   LW FP, 4(SP)
9D001E44  27BD0008   ADDIU SP, SP, 8
9D001E48  03E00008   JR RA
9D001E4C  00000000   NOP
---  C:/Program Files (x86)/Microchip/MPLABX/v5.35/packs/Microchip/PIC32MX_DFP/1.2.228/xc32/startup/crt0.S
                                                  1:     /*********************************************************************
                                                  2:      *
                                                  3:      *                  C Runtime Startup
                                                  4:      *
                                                  5:      *********************************************************************
                                                  6:      * Filename:        crt0.S
                                                  7:      *
                                                  8:      * Processor:       PIC32
                                                  9:      *
                                                  10:     * Compiler:        MPLAB XC32
                                                  11:     *                  MPLAB X IDE
                                                  12:     * Company:         Microchip Technology Inc.
                                                  13:     *
                                                  14:     * Software License Agreement
                                                  15:     *
                                                  16:     * Copyright (c) 2014, Microchip Technology Inc. and its subsidiaries ("Microchip")
                                                  17:     * All rights reserved.
                                                  18:     *
                                                  19:     * This software is developed by Microchip Technology Inc. and its
                                                  20:     * subsidiaries ("Microchip").
                                                  21:     *
                                                  22:     * Redistribution and use in source and binary forms, with or without
                                                  23:     * modification, are permitted provided that the following conditions are met:
                                                  24:     *
                                                  25:     * 1.      Redistributions of source code must retain the above copyright
                                                  26:     * notice, this list of conditions and the following disclaimer.
                                                  27:     *
                                                  28:     * 2.      Redistributions in binary form must reproduce the above copyright
                                                  29:     * notice, this list of conditions and the following disclaimer in the
                                                  30:     * documentation and/or other materials provided with the distribution.
                                                  31:     *
                                                  32:     * 3.      Microchip's name may not be used to endorse or promote products
                                                  33:     * derived from this software without specific prior written permission.
                                                  34:     *
                                                  35:     * THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED
                                                  36:     * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
                                                  37:     * MERCHANTABILITY AND FITNESS FOR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
                                                  38:     * MICROCHIP BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
                                                  39:     * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
                                                  40:     * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS;
                                                  41:     * OR BUSINESS INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                                  42:     * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
                                                  43:     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
                                                  44:     * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                                  45:     *
                                                  46:     ********************************************************************/
                                                  47:    
                                                  48:    #include "xc.h"
                                                  49:    #include <cp0defs.h>
                                                  50:    
                                                  51:    #ifdef __LIBBUILD__
                                                  52:       # Replace the standard debugging information with a simple filename. This
                                                  53:       # prevents the library build directory from showing up in MPLAB IDE. It
                                                  54:       # also effectively disables source-line debugging.
                                                  55:       .file 1 "libpic32/startup/crt0.S"
                                                  56:       .loc 1 0
                                                  57:    #endif
                                                  58:    
                                                  59:    #if (__XC32_VERSION > 1000) && !defined(CPP_INIT)
                                                  60:    #define CPP_INIT
                                                  61:    #endif
                                                  62:    
                                                  63:    #if !defined(PIC32_SRS_SET_COUNT)
                                                  64:    #  if defined(__PIC32_SRS_SET_COUNT)
                                                  65:    #    define PIC32_SRS_SET_COUNT __PIC32_SRS_SET_COUNT
                                                  66:    #  else
                                                  67:    #    warning PIC32_SRS_SET_COUNT not defined on build line
                                                  68:    #    define PIC32_SRS_SET_COUNT 2
                                                  69:    #  endif
                                                  70:    #endif
                                                  71:    
                                                  72:    #if defined(__PIC32MX) || defined(__PIC32MM) || defined(__PIC32MZ)
                                                  73:    #define INIT_DATA 1
                                                  74:    #endif
                                                  75:    
                                                  76:    /* This file contains 32-bit assembly code */
                                                  77:           .set nomips16
                                                  78:    
                                                  79:            ##################################################################
                                                  80:            # Entry point of the entire application
                                                  81:            ##################################################################
                                                  82:            .section .reset,code,keep
                                                  83:            .align 2
                                                  84:            .set noreorder
                                                  85:            .ent _reset
                                                  86:    
                                                  87:    ############################
                                                  88:    # Begin ISA switching code #
                                                  89:    ############################
                                                  90:    
                                                  91:    #if defined (__mips_micromips)
                                                  92:            .set micromips
                                                  93:    #endif
                                                  94:    
                                                  95:    #if (defined(__PIC32_HAS_MICROMIPS)) && (defined(__PIC32_HAS_MIPS32R2))
                                                  96:    _reset:
                                                  97:            .word 0x10000003     /* MIPS32:    branch forward 0x10 bytes from here  */
                                                  98:                                 /* MicroMIPS: ADDI32 $0, $0, 0x0007 (nop)          */
                                                  99:                                 /* DO NOT change the relative branch               */
                                                  100:   
                                                  101:           .word 0x00000000     /* NOP */
                                                  102:   __reset_micromips_isa:
                                                  103:           .set    micromips
                                                  104:           jal     _startup
                                                  105:           nop
                                                  106:   
                                                  107:           .align 2
                                                  108:           /* Device not in proper ISA mode */
                                                  109:           .set nomicromips
                                                  110:   __reset_switch_isa:
                                                  111:           jal _startup
                                                  112:           nop
                                                  113:   
                                                  114:   #else
                                                  115:   
                                                  116:   _reset:
BFC00000  0FF00002   JAL 0xBFC00008               117:           jal _startup
BFC00004  00000000   NOP                          118:           nop
                                                  119:   
                                                  120:   #endif  /* __PIC32_HAS_MICROMIPS */
                                                  121:   
                                                  122:           .align 2
                                                  123:           .end _reset
                                                  124:           .globl _reset
                                                  125:           .size _reset, .-_reset
                                                  126:   
                                                  127:           .section .reset.startup,code,keep
                                                  128:           .align 2
                                                  129:           .set noreorder
                                                  130:   
                                                  131:   #if defined (__mips_micromips)
                                                  132:           .set micromips
                                                  133:   #else
                                                  134:           .set nomicromips
                                                  135:   #endif
                                                  136:   
                                                  137:   ############################
                                                  138:   # End ISA switching code   #
                                                  139:   ############################
                                                  140:   
                                                  141:           ##################################################################
                                                  142:           # Startup code
                                                  143:           ##################################################################
                                                  144:           .align 2
                                                  145:           .globl _startup
                                                  146:           .set noreorder
                                                  147:           .ent _startup
                                                  148:   _startup:
                                                  149:           ##################################################################
                                                  150:           # If entered because of an NMI, jump to the NMI handler.
                                                  151:           ##################################################################
BFC00008  401A6000   MFC0 K0, Status              152:           mfc0    k0,_CP0_STATUS
BFC0000C  7F5A04C0   EXT K0, K0, 19, 1            153:           ext     k0,k0,19,1              # Extract NMI bit
BFC00010  13400005   BEQ K0, ZERO, 0xBFC00028     154:           beqz    k0,_no_nmi
BFC00014  00000000   NOP                          155:           nop
BFC00018  3C1A9D01   LUI K0, -25343               156:           la      k0,_nmi_handler
BFC00020  03400008   JR K0                        157:           jr      k0
BFC00024  00000000   NOP                          158:           nop
                                                  159:   _no_nmi:
                                                  160:   
                                                  161:           ##################################################################
                                                  162:           # Initialize Stack Pointer
                                                  163:           #   _stack is initialized by the linker script to point to the
                                                  164:           #    starting location of the stack in DRM
                                                  165:           ##################################################################
BFC00028  3C1DA000   LUI SP, -24576               166:           la      sp,_stack
                                                  167:   
                                                  168:           ##################################################################
                                                  169:           # Initialize Global Pointer
                                                  170:           #   _gp is initialized by the linker script to point to "middle"
                                                  171:           #   of the small variables region
                                                  172:           ##################################################################
BFC00030  3C1CA001   LUI GP, -24575               173:           la      gp,_gp
                                                  174:   
                                                  175:   #if (PIC32_SRS_SET_COUNT == 2)
                                                  176:           ##################################################################
                                                  177:           # Initialize Global Pointer in Shadow Set
                                                  178:           #   The SRSCtl's PSS field must be set to the shadow set in which
                                                  179:           #   to initialize the global pointer.  Since we have only a
                                                  180:           #   single shadow set (besides the normal), we will initialize
                                                  181:           #   SRSCtl<PSS> to SRSCtl<HSS>.  We then write the global pointer
                                                  182:           #   to the previous shadow set to ensure that on interrupt, the
                                                  183:           #   global pointer has been initialized.
                                                  184:           ##################################################################
BFC00038  40096002   MFC0 T1, SRSCtl              185:           mfc0    t1,_CP0_SRSCTL          # Read SRSCtl register
BFC0003C  01205820   ADD T3, T1, ZERO             186:           add     t3,t1,zero              # Save off current SRSCtl
BFC00040  7D2A1E80   EXT T2, T1, 26, 4            187:           ext     t2,t1,26,4              # to obtain HSS field
BFC00044  7D494984   INS T1, T2, 6, 4             188:           ins     t1,t2,6,4               # Put HSS field
BFC00048  40896002   MTC0 T1, SRSCtl              189:           mtc0    t1,_CP0_SRSCTL          # into SRSCtl<PSS>
BFC0004C  000000C0   EHB                          190:           ehb                             # Clear hazard before using new SRSCTL
BFC00050  41DCE000   WRPGPR GP, GP                191:           wrpgpr  gp,gp                   # Set global pointer in PSS
BFC00054  408B6002   MTC0 T3, SRSCtl              192:           mtc0    t3,_CP0_SRSCTL          # Restore SRSCtl
BFC00058  000000C0   EHB                          193:           ehb
                                                  194:   
                                                  195:   #elif (PIC32_SRS_SET_COUNT > 2)
                                                  196:           ##################################################################
                                                  197:           # Initialize Global Pointer in Shadow Set(s)
                                                  198:           #   The SRSCtl PSS field must be set to the shadow set in which
                                                  199:           #   to initialize the global pointer.  We will initialize
                                                  200:           #   SRSCtl<PSS> to the number of reg sets and work down to set zero.
                                                  201:           #   We write the global pointer to the previous shadow set to
                                                  202:           #   ensure that on interrupt, the global pointer has been
                                                  203:           #   initialized.
                                                  204:           ##################################################################
                                                  205:           mfc0    t1,_CP0_SRSCTL          # Read SRSCtl register
                                                  206:           add     t3,t1,zero              # Save off current SRSCtl
                                                  207:   
                                                  208:           li      t2,(PIC32_SRS_SET_COUNT-1)
                                                  209:   
                                                  210:   1:      ins     t1,t2,6,4               # Put next shadow set field
                                                  211:           mtc0    t1,_CP0_SRSCTL          # into SRSCtl<PSS>
                                                  212:           ehb                             # Clear hazard before using new SRSCTL
                                                  213:           wrpgpr  gp,gp                   # Set global pointer in PSS
                                                  214:   
                                                  215:           addiu   t2,t2,-1                # Next lower shadow set
                                                  216:                                           # Loop for all sets
                                                  217:           bne     t2,$0,1b                # Down to zero (normal GPR set)
                                                  218:           nop
                                                  219:   
                                                  220:           mtc0    t3,_CP0_SRSCTL          # Restore SRSCtl
                                                  221:           ehb
                                                  222:   
                                                  223:   #endif /* (PIC32_SRS_SET_COUNT > 2) */
                                                  224:   
                                                  225:           ##################################################################
                                                  226:           # Call the "on reset" procedure
                                                  227:           ##################################################################
BFC0005C  3C089D01   LUI T0, -25343               228:           la      t0,_on_reset
BFC00064  0100F809   JALR T0                      229:           jalr    t0
BFC00068  00000000   NOP                          230:           nop
                                                  231:   
                                                  232:   #if defined(INIT_MMU_MZ_FIXED) || defined(__PIC32_HAS_MMU_MZ_FIXED)
                                                  233:           ##################################################################
                                                  234:           # Initialize TLB for fixed mapping to EBI and SQI
                                                  235:           ##################################################################
                                                  236:           .extern __pic32_tlb_init_ebi_sqi
                                                  237:           la      t0,__pic32_tlb_init_ebi_sqi
                                                  238:           jalr    t0
                                                  239:           nop
                                                  240:   #endif
                                                  241:   
                                                  242:           ##################################################################
                                                  243:           # Clear uninitialized data sections
                                                  244:           ##################################################################
                                                  245:   _start_bss_init:
BFC0006C  3C08A000   LUI T0, -24576               246:           la      t0,_bss_begin
BFC00074  3C09A000   LUI T1, -24576               247:           la      t1,_bss_end
BFC0007C  10000003   BEQ ZERO, ZERO, 0xBFC0008C   248:           b       _bss_check
BFC00080  00000000   NOP                          249:           nop
                                                  250:   
                                                  251:   _bss_init:
BFC00084  AD000000   SW ZERO, 0(T0)               252:           sw      zero,0x0(t0)
BFC00088  25080004   ADDIU T0, T0, 4              253:           addu    t0,4
                                                  254:   _bss_check:
BFC0008C  0109082B   SLTU AT, T0, T1              255:           bltu    t0,t1,_bss_init
BFC00094  00000000   NOP                          256:           nop
                                                  257:   
                                                  258:   #if defined(INIT_L1_CACHE) || defined(__PIC32_HAS_L1CACHE)
                                                  259:           ##################################################################
                                                  260:           # Initialize L1 cache. This must be done after bss clearing
                                                  261:           # since the _bss_end symbol may not be cache-line aligned.
                                                  262:           ##################################################################
                                                  263:           .extern   __pic32_init_cache
                                                  264:           la      t0,__pic32_init_cache
                                                  265:           jalr    t0
                                                  266:           nop
                                                  267:   #endif
                                                  268:   
                                                  269:   #if defined(INIT_DATA) || defined(__PIC32_HAS_INIT_DATA)
                                                  270:   
                                                  271:   #if defined(__LIBBUILD__) /* Prebuilt crt0.o file */
                                                  272:   
                                                  273:           ##################################################################
                                                  274:           # Initialize data using the linker-generated .dinit table
                                                  275:           # For use with XC32 versions prior to XC32 v2.10 only.
                                                  276:           ##################################################################
                                                  277:           .equiv FMT_CLEAR,0
                                                  278:           .equiv FMT_COPY,1
                                                  279:   _dinit_init:
                                                  280:           la      t0,_dinit_addr
                                                  281:   
                                                  282:   #define SRC t0
                                                  283:   #define DST t1
                                                  284:   #define LEN t2
                                                  285:   #define FMT t3
                                                  286:   
                                                  287:   0:      lw      DST,0(SRC)
                                                  288:           beqz    DST,9f
                                                  289:           addu    SRC,4
                                                  290:           lw      LEN,0(SRC)
                                                  291:           addu    SRC,4
                                                  292:           lw      FMT,0(SRC)
                                                  293:           beq     FMT,$0,_dinit_clear
                                                  294:           addu    SRC,4
                                                  295:   
                                                  296:   _dinit_copy:
                                                  297:           lbu     t4,0(SRC)
                                                  298:           subu    LEN,1
                                                  299:           addu    SRC,1
                                                  300:           sb      t4,0(DST)
                                                  301:           bne     LEN,$0,_dinit_copy
                                                  302:           addu    DST,1
                                                  303:   
                                                  304:           b       _dinit_end
                                                  305:           nop
                                                  306:   
                                                  307:   _dinit_clear:
                                                  308:           sb      $0,(DST)
                                                  309:           subu    LEN,1
                                                  310:           bne     LEN,$0,_dinit_clear
                                                  311:           addu    DST,1
                                                  312:   
                                                  313:   _dinit_end:
                                                  314:           addu    SRC,3
                                                  315:           addiu   LEN,$0,-4
                                                  316:           and     SRC,LEN,SRC
                                                  317:           lw      DST,0(SRC)
                                                  318:           bne     DST,$0,0b
                                                  319:           nop
                                                  320:   9:
                                                  321:   
                                                  322:   #else
                                                  323:           #####################################################################
                                                  324:           # Initialize data using the linker-generated .dinit table
                                                  325:           # XC32 v2.10 and later provide the data-init code in a separate file
                                                  326:           # packaged with the compiler rather than the DFP. Use that init
                                                  327:           # code instead.
                                                  328:           #####################################################################
                                                  329:           .extern   __pic32_data_init
BFC00098  3C089D01   LUI T0, -25343               330:           la      t0, __pic32_data_init
BFC000A0  0100F809   JALR T0                      331:           jalr    t0
BFC000A4  00000000   NOP                          332:           nop
                                                  333:   #endif /* __LIBBUILD__ */
                                                  334:   
                                                  335:   #endif /* INIT_DATA */
                                                  336:   
                                                  337:           ##################################################################
                                                  338:           # If there are no RAM functions, skip the next section --
                                                  339:           # initializing bus matrix registers.
                                                  340:           ##################################################################
BFC000A8  3C090000   LUI T1, 0                    341:           la      t1,_ramfunc_begin
BFC000B0  11200010   BEQ T1, ZERO, 0xBFC000F4     342:           beqz    t1,_ramfunc_done
BFC000B4  00000000   NOP                          343:           nop
                                                  344:   
                                                  345:   #if defined(INIT_SSX) || defined(__PIC32_HAS_SSX)
                                                  346:     /* No initialization required */
                                                  347:   #else /* Use BMX */
                                                  348:           ##################################################################
                                                  349:           # Initialize bus matrix registers if RAM functions exist in the
                                                  350:           # application
                                                  351:           ##################################################################
BFC000B8  3C090001   LUI T1, 1                    352:           la      t1,_bmxdkpba_address
BFC000C0  3C0ABF88   LUI T2, -16504               353:           la      t2,BMXDKPBA
BFC000C8  AD490000   SW T1, 0(T2)                 354:           sw      t1,0(t2)
BFC000CC  3C090001   LUI T1, 1                    355:           la      t1,_bmxdudba_address
BFC000D4  3C0ABF88   LUI T2, -16504               356:           la      t2,BMXDUDBA
BFC000DC  AD490000   SW T1, 0(T2)                 357:           sw      t1,0(t2)
BFC000E0  3C090001   LUI T1, 1                    358:           la      t1,_bmxdupba_address
BFC000E8  3C0ABF88   LUI T2, -16504               359:           la      t2,BMXDUPBA
BFC000F0  AD490000   SW T1, 0(T2)                 360:           sw      t1,0(t2)
                                                  361:   #endif /* INIT_SSX */
                                                  362:   
                                                  363:   _ramfunc_done:
                                                  364:   
                                                  365:           ##################################################################
                                                  366:           # Initialize CP0 registers
                                                  367:           ##################################################################
                                                  368:           # Initialize Count register
                                                  369:           ##################################################################
BFC000F4  40804800   MTC0 ZERO, Count             370:           mtc0    zero,_CP0_COUNT
                                                  371:   
                                                  372:           ##################################################################
                                                  373:           # Initialize Compare register
                                                  374:           ##################################################################
BFC000F8  240AFFFF   ADDIU T2, ZERO, -1           375:           li      t2,-1
BFC000FC  408A5800   MTC0 T2, Compare             376:           mtc0    t2,_CP0_COMPARE
                                                  377:   
                                                  378:           ##################################################################
                                                  379:           # Ensure BEV set and Initialize EBase register
                                                  380:           ##################################################################
BFC00100  3C080040   LUI T0, 64                   381:           li      t0, (1<<22)
BFC00104  400A6000   MFC0 T2, Status              382:           mfc0    t2,_CP0_STATUS
BFC00108  010A5025   OR T2, T0, T2                383:           or      t2,t0,t2               # Set BEV bit 22
BFC0010C  408A6000   MTC0 T2, Status              384:           mtc0    t2,_CP0_STATUS
                                                  385:   
BFC00110  3C099FC0   LUI T1, -24640               386:           la      t1,_ebase_address
BFC00118  000000C0   EHB                          387:           ehb
BFC0011C  40897801   MTC0 T1, EBase               388:           mtc0    t1,_CP0_EBASE
                                                  389:           
                                                  390:           ##################################################################
                                                  391:           # Initialize PRISS register to a safer default for devices that 
                                                  392:           # have it. The application should re-initialize it to an
                                                  393:           # application-specific value.
                                                  394:           #
                                                  395:           # We do NOT do this by default.
                                                  396:           ##################################################################
                                                  397:   #if defined(USE_DEFAULT_PRISS_VALUE) 
                                                  398:   #if defined(_PRISS_PRI7SS_POSITION)
                                                  399:   #if (PIC32_SRS_SET_COUNT >= 7)
                                                  400:           li	    t2, 0x76540000
                                                  401:           addiu	t2, t2, 0x3210
                                                  402:           lui	    t1, %hi(PRISS)
                                                  403:           sw	    t2, %lo(PRISS)(t1)
                                                  404:   #elif (PIC32_SRS_SET_COUNT <= 2)
                                                  405:           li	    t2, 0x10000000
                                                  406:           lui	    t1, %hi(PRISS)
                                                  407:           sw	    t2, %lo(PRISS)(t1)
                                                  408:   #endif /* PIC32_SRS_SET_COUNT */
                                                  409:   #endif /* _PRISS_PRI7SS_POSITION */
                                                  410:   #endif /* USE_DEFAULT_PRISS_VALUE */
                                                  411:           
                                                  412:           ##################################################################
                                                  413:           # Initialize IntCtl/INTCON.VS register with _vector_spacing
                                                  414:           ##################################################################
BFC00120  3C090000   LUI T1, 0                    415:           la      t1,_vector_spacing
                                                  416:   #if defined(INIT_INTCONVS) || defined(__PIC32_HAS_INTCONVS)
                                                  417:           la      t0, INTCON
                                                  418:           lw      t2, 0(t0)
                                                  419:           li      t2, 0
                                                  420:           ins     t2, t1, 16, 7
                                                  421:   #if defined(__PIC32MM) && defined(_INTCON_MVEC_MASK)
                                                  422:           ori     t2, t2, _INTCON_MVEC_MASK
                                                  423:   #endif
                                                  424:           sw      t2, 0(t0)
                                                  425:   #endif
BFC00128  240A0000   ADDIU T2, ZERO, 0            426:           li      t2,0                    # Clear t2 and
BFC0012C  7D2A4944   INS T2, T1, 5, 5             427:           ins     t2,t1,5,5               # shift value to VS field
BFC00130  408A6001   MTC0 T2, IntCtl              428:           mtc0    t2,_CP0_INTCTL
                                                  429:   
                                                  430:           ##################################################################
                                                  431:           # Initialize CAUSE registers
                                                  432:           # - Enable counting of Count register <DC = 0>
                                                  433:           # - Use special exception vector <IV = 1>
                                                  434:           # - Clear pending software interrupts <IP1:IP0 = 0>
                                                  435:           ##################################################################
BFC00134  3C090080   LUI T1, 128                  436:           li      t1,0x00800000
BFC00138  40896800   MTC0 T1, Cause               437:           mtc0    t1,_CP0_CAUSE
                                                  438:   
                                                  439:           ##################################################################
                                                  440:           # Initialize STATUS register
                                                  441:           # - Access to Coprocessor 0 not allowed in user mode <CU0 = 0>
                                                  442:           # - User mode uses configured endianness <RE = 0>
                                                  443:           # - Preserve Bootstrap Exception vectors <BEV>
                                                  444:           # - Preserve soft reset <SR> and non-maskable interrupt <NMI>
                                                  445:           # - CorExtend enabled based on whether CorExtend User Defined
                                                  446:           #   Instructions have been implemented <CEE = Config<UDI>>
                                                  447:           # - Disable any pending interrupts <IM7..IM2 = 0, IM1..IM0 = 0>
                                                  448:           # - Disable hardware interrupts <IPL7:IPL2 = 0>
                                                  449:           # - Base mode is Kernel mode <UM = 0>
                                                  450:           # - Error level is normal <ERL = 0>
                                                  451:           # - Exception level is normal <EXL = 0>
                                                  452:           # - Interrupts are disabled <IE = 0>
                                                  453:           # - DSPr2 ASE is enabled for devices that support it <MX = 1>
                                                  454:           # - FPU64 is enabled for devices that support it <CU1=1> & <FR=1>
                                                  455:           ##################################################################
BFC0013C  40088000   MFC0 T0, Config              456:           mfc0    t0,_CP0_CONFIG
BFC00140  7D090580   EXT T1, T0, 22, 1            457:           ext     t1,t0,22,1              # Extract UDI from Config register
BFC00144  00094C40   SLL T1, T1, 17               458:           sll     t1,t1,17                # Move UDI to Status.CEE location
BFC00148  40086000   MFC0 T0, Status              459:           mfc0    t0,_CP0_STATUS
BFC0014C  3C010058   LUI AT, 88                   460:           and     t0,t0,0x00580000        # Preserve SR, NMI, and BEV
                                                  461:   #if defined(INIT_DSPR2) || defined(__PIC32_HAS_DSPR2)
                                                  462:           li      t2, 0x01000000          # Set the Status.MX bit to enable DSP
                                                  463:           or      t0,t2,t0
                                                  464:   #endif
                                                  465:   #if defined(INIT_FPU64) || defined(__PIC32_HAS_FPU64)
                                                  466:           li      t2, 0x24000000          # Set the Status.CU1 and Status.FR bits to
                                                  467:           or      t0,t2,t0                # enable the FPU in FR64 mode
                                                  468:   #endif
                                                  469:   
BFC00154  01284025   OR T0, T1, T0                470:           or      t0,t1,t0                # Include Status.CEE (from UDI)
BFC00158  40886000   MTC0 T0, Status              471:           mtc0    t0,_CP0_STATUS
                                                  472:           
                                                  473:   #if defined(PIC32WK) && defined(_CP0_CONFIG3) && defined (__mips_micromips)
                                                  474:           # Ensure that the ISAONEXEC bit is set for the microMIPS ISA for the PIC32WK family
                                                  475:           # _bsc0 (_CP0_CONFIG3, _CP0_CONFIG3_SELECT, ISAONEXEC_MASK)
                                                  476:           li      t1,0x10000              # ISAONEXEC bit
                                                  477:           mfc0    t0,_CP0_CONFIG3
                                                  478:           or      t1,t0,t1
                                                  479:           mtc0    t1,_CP0_CONFIG3
                                                  480:   
                                                  481:   #endif /* PIC32WK && __mips_micromips */
                                                  482:   
                                                  483:   #if defined(INIT_FPU64) || defined(__PIC32_HAS_FPU64)
                                                  484:                                           # FPU Control and Status
                                                  485:           li      t2,0x1000000            # FCSR: RM=0, FS=1, FO=0, FN=0
                                                  486:                                           # Enables: 0b00000 E=1, V=0, Z=0, O=0, U=0, I=0
                                                  487:           ctc1    t2, $31                 # High perf on denormal operands & tiny results
                                                  488:   #endif
BFC0015C  000000C0   EHB                          489:           ehb
                                                  490:   
                                                  491:           ##################################################################
                                                  492:           # Call the "on bootstrap" procedure
                                                  493:           ##################################################################
BFC00160  3C089D01   LUI T0, -25343               494:           la      t0,_on_bootstrap
BFC00168  0100F809   JALR T0                      495:           jalr    t0
BFC0016C  00000000   NOP                          496:           nop
                                                  497:   
                                                  498:           ##################################################################
                                                  499:           # Initialize Status<BEV> for normal exception vectors
                                                  500:           ##################################################################
BFC00170  40086000   MFC0 T0, Status              501:           mfc0    t0,_CP0_STATUS
BFC00174  3C01FFBF   LUI AT, -65                  502:           and     t0,t0,0xffbfffff        # Clear BEV
BFC00180  40886000   MTC0 T0, Status              503:           mtc0    t0,_CP0_STATUS
                                                  504:   
                                                  505:           ##################################################################
                                                  506:           # Call main. We do this via a thunk in the text section so that
                                                  507:           # a normal jump and link can be used, enabling the startup code
                                                  508:           # to work properly whether main is written in MIPS16 or MIPS32
                                                  509:           # code. I.e., the linker will correctly adjust the JAL to JALX if
                                                  510:           # necessary
                                                  511:           ##################################################################
BFC00184  30840000   ANDI A0, A0, 0               512:           and     a0,a0,0
BFC00188  30A50000   ANDI A1, A1, 0               513:           and     a1,a1,0
BFC0018C  3C089D01   LUI T0, -25343               514:           la      t0,_main_entry
BFC00194  01000008   JR T0                        515:           jr      t0
BFC00198  00000000   NOP                          516:           nop
                                                  517:   
                                                  518:           .end _startup
                                                  519:   
                                                  520:           ##################################################################
                                                  521:           # Boot Exception Vector Handler
                                                  522:           # Jumps to _bootstrap_exception_handler
                                                  523:           ##################################################################
                                                  524:           .section .bev_handler,code,keep
                                                  525:           .align 2
                                                  526:           .set noreorder
                                                  527:           .ent _bev_exception
                                                  528:   _bev_exception:
BFC00380  3C1A9D01   LUI K0, -25343               529:           la        k0,_bootstrap_exception_handler
BFC00388  03400008   JR K0                        530:           jr        k0
BFC0038C  00000000   NOP                          531:           nop
                                                  532:   
                                                  533:           .end _bev_exception
                                                  534:   
                                                  535:           ##################################################################
                                                  536:           # General Exception Vector Handler
                                                  537:           # Jumps to _general_exception_context
                                                  538:           ##################################################################
                                                  539:           .section .gen_handler,code
                                                  540:           .align 2
                                                  541:           .set noreorder
                                                  542:           .ent _gen_exception
                                                  543:   _gen_exception:
9FC01180  3C1A9D01   LUI K0, -25343               544:   0:      la      k0,_general_exception_context
9FC01188  03400008   JR K0                        545:           jr      k0
9FC0118C  00000000   NOP                          546:           nop
                                                  547:   
                                                  548:           .end _gen_exception
                                                  549:   
                                                  550:   #if defined(INIT_MMU_MZ_FIXED) || defined(__PIC32_HAS_MMU_MZ_FIXED)
                                                  551:           ##################################################################
                                                  552:           # Simple TLB-Refill Exception Vector
                                                  553:           # Jumps to _simple_tlb_refill_exception_context
                                                  554:           ##################################################################
                                                  555:           .section .simple_tlb_refill_vector,code,keep
                                                  556:           .align 2
                                                  557:           .set noreorder
                                                  558:           .ent simple_tlb_refill_vector
                                                  559:   simple_tlb_refill_vector:
                                                  560:           la      k0,_simple_tlb_refill_exception_context
                                                  561:           jr      k0
                                                  562:           nop
                                                  563:   
                                                  564:           .end simple_tlb_refill_vector
                                                  565:   #endif
                                                  566:   
                                                  567:   #if defined(INIT_L1_CACHE) || defined(__PIC32_HAS_L1CACHE)
                                                  568:           ##################################################################
                                                  569:           # Cache-Error Exception Vector Handler
                                                  570:           # Jumps to _cache_err_exception_context
                                                  571:           ##################################################################
                                                  572:           .section .cache_err_vector,code,keep
                                                  573:           .align 2
                                                  574:           .set noreorder
                                                  575:           .ent _cache_err_vector
                                                  576:   _cache_err_vector:
                                                  577:           la      k0,_cache_err_exception_context
                                                  578:           jr      k0
                                                  579:           nop
                                                  580:   
                                                  581:           .end _cache_err_vector
                                                  582:   #endif
                                                  583:   
                                                  584:           .section .text.main_entry,code,keep
                                                  585:           .align 2
                                                  586:           .ent _main_entry
                                                  587:   _main_entry:
                                                  588:   
                                                  589:   #if defined(CPP_INIT)
                                                  590:           .weak _init
                                                  591:           # call .init section to run constructors etc
9D008E04  3C040000   LUI A0, 0                    592:           lui	a0,%hi(_init)
9D008E08  27BDFFE8   ADDIU SP, SP, -24            593:           addiu	sp,sp,-24
9D008E0C  24840000   ADDIU A0, A0, 0              594:           addiu	a0,a0,%lo(_init)
9D008E10  10800003   BEQ A0, ZERO, 0x9D008E20     595:           beq	a0,$0,2f
9D008E14  AFBF0014   SW RA, 20(SP)                596:           sw	$31,20(sp)	 #,
9D008E18  0080F809   JALR A0                      597:           jalr	a0
9D008E1C  00000000   NOP                          598:           nop
                                                  599:   2:
                                                  600:   #endif
9D008E20  30840000   ANDI A0, A0, 0               601:           and     a0,a0,0
9D008E24  30A50000   ANDI A1, A1, 0               602:           and     a1,a1,0
                                                  603:   
                                                  604:           ##################################################################
                                                  605:   
                                                  606:           # Call main
                                                  607:           ##################################################################
9D008E28  3C089D00   LUI T0, -25344               608:           la    	t0,main
9D008E30  0100F809   JALR T0                      609:           jalr 	t0
9D008E34  00000000   NOP                          610:           nop
                                                  611:   
                                                  612:   #if defined(CALL_EXIT)
                                                  613:           ##################################################################
                                                  614:           # Call exit()
                                                  615:           ##################################################################
                                                  616:           jal exit
                                                  617:           nop
                                                  618:   #endif
                                                  619:   
                                                  620:           ##################################################################
                                                  621:           # Just in case, go into infinite loop
                                                  622:           # Call a software breakpoint only with -mdebugger compiler option
                                                  623:           ##################################################################
                                                  624:           .weak __exception_handler_break
                                                  625:   __crt0_exit:
                                                  626:   1:
9D008E38  3C029D01   LUI V0, -25343               627:           la      v0,__exception_handler_break
9D008E40  10400003   BEQ V0, ZERO, 0x9D008E50     628:           beq     v0,0,0f
9D008E44  00000000   NOP                          629:           nop
9D008E48  0040F809   JALR V0                      630:           jalr    v0
9D008E4C  00000000   NOP                          631:           nop
                                                  632:   
9D008E50  1000FFF9   BEQ ZERO, ZERO, 0x9D008E38   633:   0:      b       1b
9D008E54  00000000   NOP                          634:           nop
                                                  635:   
                                                  636:           .globl __crt0_exit
                                                  637:           .end _main_entry
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/src/gcc-8-merge/gcc/libgcc/libgcc2.c  ----
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00698C  00C04825   OR T1, A2, ZERO
9D006990  00801025   OR V0, A0, ZERO
9D006994  14E00099   BNE A3, ZERO, 0x9D006BFC
9D006998  00A01825   OR V1, A1, ZERO
9D00699C  00A6302B   SLTU A2, A1, A2
9D0069A0  10C00034   BEQ A2, ZERO, 0x9D006A74
9D0069A4  712A5020   CLZ T2, T1
9D0069A8  51400008   BEQL T2, ZERO, 0x9D0069CC
9D0069AC  00092402   SRL A0, T1, 16
9D0069B0  01451804   SLLV V1, A1, T2
9D0069B4  000A2823   SUBU A1, ZERO, T2
9D0069B8  00A42806   SRLV A1, A0, A1
9D0069BC  01494804   SLLV T1, T1, T2
9D0069C0  00A31825   OR V1, A1, V1
9D0069C4  01441004   SLLV V0, A0, T2
9D0069C8  00092402   SRL A0, T1, 16
9D0069CC  0064001B   DIVU V1, A0
9D0069D0  008001F4   TEQ A0, ZERO
9D0069D4  3127FFFF   ANDI A3, T1, -1
9D0069D8  00001812   MFLO V1
9D0069DC  00002810   MFHI A1
9D0069E0  70673002   MUL A2, V1, A3
9D0069E4  00051C00   SLL V1, A1, 16
9D0069E8  00022C02   SRL A1, V0, 16
9D0069EC  00651825   OR V1, V1, A1
9D0069F0  0066282B   SLTU A1, V1, A2
9D0069F4  50A00009   BEQL A1, ZERO, 0x9D006A1C
9D0069F8  00661823   SUBU V1, V1, A2
9D0069FC  00691821   ADDU V1, V1, T1
9D006A00  0069282B   SLTU A1, V1, T1
9D006A04  54A00005   BNEL A1, ZERO, 0x9D006A1C
9D006A08  00661823   SUBU V1, V1, A2
9D006A0C  0066282B   SLTU A1, V1, A2
9D006A10  54A00001   BNEL A1, ZERO, 0x9D006A18
9D006A14  00691821   ADDU V1, V1, T1
9D006A18  00661823   SUBU V1, V1, A2
9D006A1C  0064001B   DIVU V1, A0
9D006A20  008001F4   TEQ A0, ZERO
9D006A24  3042FFFF   ANDI V0, V0, -1
9D006A28  00001812   MFLO V1
9D006A2C  00003010   MFHI A2
9D006A30  70672002   MUL A0, V1, A3
9D006A34  00061C00   SLL V1, A2, 16
9D006A38  00621025   OR V0, V1, V0
9D006A3C  0044182B   SLTU V1, V0, A0
9D006A40  50600009   BEQL V1, ZERO, 0x9D006A68
9D006A44  00441023   SUBU V0, V0, A0
9D006A48  00491021   ADDU V0, V0, T1
9D006A4C  0049182B   SLTU V1, V0, T1
9D006A50  54600005   BNEL V1, ZERO, 0x9D006A68
9D006A54  00441023   SUBU V0, V0, A0
9D006A58  0044182B   SLTU V1, V0, A0
9D006A5C  54600001   BNEL V1, ZERO, 0x9D006A64
9D006A60  00491021   ADDU V0, V0, T1
9D006A64  00441023   SUBU V0, V0, A0
9D006A68  01421006   SRLV V0, V0, T2
9D006A6C  03E00008   JR RA
9D006A70  00001825   OR V1, ZERO, ZERO
9D006A74  15200005   BNE T1, ZERO, 0x9D006A8C
9D006A78  24030001   ADDIU V1, ZERO, 1
9D006A7C  0069001B   DIVU V1, T1
9D006A80  012001F4   TEQ T1, ZERO
9D006A84  00004812   MFLO T1
9D006A88  712A5020   CLZ T2, T1
9D006A8C  1540002B   BNE T2, ZERO, 0x9D006B3C
9D006A90  24070020   ADDIU A3, ZERO, 32
9D006A94  00A92823   SUBU A1, A1, T1
9D006A98  00092402   SRL A0, T1, 16
9D006A9C  00A4001B   DIVU A1, A0
9D006AA0  008001F4   TEQ A0, ZERO
9D006AA4  3127FFFF   ANDI A3, T1, -1
9D006AA8  00002812   MFLO A1
9D006AAC  00001810   MFHI V1
9D006AB0  70A73002   MUL A2, A1, A3
9D006AB4  00032C00   SLL A1, V1, 16
9D006AB8  00021C02   SRL V1, V0, 16
9D006ABC  00A32825   OR A1, A1, V1
9D006AC0  00A6182B   SLTU V1, A1, A2
9D006AC4  50600009   BEQL V1, ZERO, 0x9D006AEC
9D006AC8  00A63023   SUBU A2, A1, A2
9D006ACC  00A92821   ADDU A1, A1, T1
9D006AD0  00A9182B   SLTU V1, A1, T1
9D006AD4  54600005   BNEL V1, ZERO, 0x9D006AEC
9D006AD8  00A63023   SUBU A2, A1, A2
9D006ADC  00A6182B   SLTU V1, A1, A2
9D006AE0  54600001   BNEL V1, ZERO, 0x9D006AE8
9D006AE4  00A92821   ADDU A1, A1, T1
9D006AE8  00A63023   SUBU A2, A1, A2
9D006AEC  00C4001B   DIVU A2, A0
9D006AF0  008001F4   TEQ A0, ZERO
9D006AF4  3042FFFF   ANDI V0, V0, -1
9D006AF8  00003012   MFLO A2
9D006AFC  00002810   MFHI A1
9D006B00  70C71802   MUL V1, A2, A3
9D006B04  00053400   SLL A2, A1, 16
9D006B08  00C21025   OR V0, A2, V0
9D006B0C  0043202B   SLTU A0, V0, V1
9D006B10  5080FFD5   BEQL A0, ZERO, 0x9D006A68
9D006B14  00431023   SUBU V0, V0, V1
9D006B18  00491021   ADDU V0, V0, T1
9D006B1C  0049202B   SLTU A0, V0, T1
9D006B20  5480FFD1   BNEL A0, ZERO, 0x9D006A68
9D006B24  00431023   SUBU V0, V0, V1
9D006B28  0043202B   SLTU A0, V0, V1
9D006B2C  54800001   BNEL A0, ZERO, 0x9D006B34
9D006B30  00491021   ADDU V0, V0, T1
9D006B34  1000FFCC   BEQ ZERO, ZERO, 0x9D006A68
9D006B38  00431023   SUBU V0, V0, V1
9D006B3C  00EA3823   SUBU A3, A3, T2
9D006B40  01494804   SLLV T1, T1, T2
9D006B44  00E41806   SRLV V1, A0, A3
9D006B48  00093402   SRL A2, T1, 16
9D006B4C  00E53806   SRLV A3, A1, A3
9D006B50  00E6001B   DIVU A3, A2
9D006B54  00C001F4   TEQ A2, ZERO
9D006B58  01451004   SLLV V0, A1, T2
9D006B5C  312BFFFF   ANDI T3, T1, -1
9D006B60  00621825   OR V1, V1, V0
9D006B64  01441004   SLLV V0, A0, T2
9D006B68  00032C02   SRL A1, V1, 16
9D006B6C  00003812   MFLO A3
9D006B70  00002010   MFHI A0
9D006B74  70EB4002   MUL T0, A3, T3
9D006B78  00043C00   SLL A3, A0, 16
9D006B7C  00E53825   OR A3, A3, A1
9D006B80  00E8202B   SLTU A0, A3, T0
9D006B84  50800009   BEQL A0, ZERO, 0x9D006BAC
9D006B88  00E83823   SUBU A3, A3, T0
9D006B8C  00E93821   ADDU A3, A3, T1
9D006B90  00E9202B   SLTU A0, A3, T1
9D006B94  54800005   BNEL A0, ZERO, 0x9D006BAC
9D006B98  00E83823   SUBU A3, A3, T0
9D006B9C  00E8202B   SLTU A0, A3, T0
9D006BA0  54800001   BNEL A0, ZERO, 0x9D006BA8
9D006BA4  00E93821   ADDU A3, A3, T1
9D006BA8  00E83823   SUBU A3, A3, T0
9D006BAC  00E6001B   DIVU A3, A2
9D006BB0  00C001F4   TEQ A2, ZERO
9D006BB4  3065FFFF   ANDI A1, V1, -1
9D006BB8  00003012   MFLO A2
9D006BBC  00003810   MFHI A3
9D006BC0  00073C00   SLL A3, A3, 16
9D006BC4  00E52825   OR A1, A3, A1
9D006BC8  70CB3002   MUL A2, A2, T3
9D006BCC  00A6182B   SLTU V1, A1, A2
9D006BD0  5060FFB1   BEQL V1, ZERO, 0x9D006A98
9D006BD4  00A62823   SUBU A1, A1, A2
9D006BD8  00A92821   ADDU A1, A1, T1
9D006BDC  00A9182B   SLTU V1, A1, T1
9D006BE0  5460FFAD   BNEL V1, ZERO, 0x9D006A98
9D006BE4  00A62823   SUBU A1, A1, A2
9D006BE8  00A6182B   SLTU V1, A1, A2
9D006BEC  54600001   BNEL V1, ZERO, 0x9D006BF4
9D006BF0  00A92821   ADDU A1, A1, T1
9D006BF4  1000FFA8   BEQ ZERO, ZERO, 0x9D006A98
9D006BF8  00A62823   SUBU A1, A1, A2
9D006BFC  00A7402B   SLTU T0, A1, A3
9D006C00  1500005E   BNE T0, ZERO, 0x9D006D7C
9D006C04  70EE7020   CLZ T6, A3
9D006C08  15C0000C   BNE T6, ZERO, 0x9D006C3C
9D006C0C  240B0020   ADDIU T3, ZERO, 32
9D006C10  00E5402B   SLTU T0, A3, A1
9D006C14  55000005   BNEL T0, ZERO, 0x9D006C2C
9D006C18  00861023   SUBU V0, A0, A2
9D006C1C  0086402B   SLTU T0, A0, A2
9D006C20  15000056   BNE T0, ZERO, 0x9D006D7C
9D006C24  00000000   NOP
9D006C28  00861023   SUBU V0, A0, A2
9D006C2C  00A72823   SUBU A1, A1, A3
9D006C30  0082182B   SLTU V1, A0, V0
9D006C34  03E00008   JR RA
9D006C38  00A31823   SUBU V1, A1, V1
9D006C3C  016E5823   SUBU T3, T3, T6
9D006C40  01666006   SRLV T4, A2, T3
9D006C44  01C73804   SLLV A3, A3, T6
9D006C48  01873825   OR A3, T4, A3
9D006C4C  01C51804   SLLV V1, A1, T6
9D006C50  00074C02   SRL T1, A3, 16
9D006C54  01652806   SRLV A1, A1, T3
9D006C58  00A9001B   DIVU A1, T1
9D006C5C  012001F4   TEQ T1, ZERO
9D006C60  01C61004   SLLV V0, A2, T6
9D006C64  30E8FFFF   ANDI T0, A3, -1
9D006C68  01643006   SRLV A2, A0, T3
9D006C6C  00C33025   OR A2, A2, V1
9D006C70  00066402   SRL T4, A2, 16
9D006C74  01C42004   SLLV A0, A0, T6
9D006C78  00002812   MFLO A1
9D006C7C  00005010   MFHI T2
9D006C80  000A5400   SLL T2, T2, 16
9D006C84  014C5025   OR T2, T2, T4
9D006C88  71051802   MUL V1, T0, A1
9D006C8C  0143602B   SLTU T4, T2, V1
9D006C90  1180000A   BEQ T4, ZERO, 0x9D006CBC
9D006C94  00A06825   OR T5, A1, ZERO
9D006C98  01475021   ADDU T2, T2, A3
9D006C9C  0147602B   SLTU T4, T2, A3
9D006CA0  15800006   BNE T4, ZERO, 0x9D006CBC
9D006CA4  24ADFFFF   ADDIU T5, A1, -1
9D006CA8  0143602B   SLTU T4, T2, V1
9D006CAC  51800004   BEQL T4, ZERO, 0x9D006CC0
9D006CB0  01435023   SUBU T2, T2, V1
9D006CB4  24ADFFFE   ADDIU T5, A1, -2
9D006CB8  01475021   ADDU T2, T2, A3
9D006CBC  01435023   SUBU T2, T2, V1
9D006CC0  0149001B   DIVU T2, T1
9D006CC4  012001F4   TEQ T1, ZERO
9D006CC8  00004812   MFLO T1
9D006CCC  00005010   MFHI T2
9D006CD0  000A5400   SLL T2, T2, 16
9D006CD4  71091802   MUL V1, T0, T1
9D006CD8  30C8FFFF   ANDI T0, A2, -1
9D006CDC  01484025   OR T0, T2, T0
9D006CE0  0103302B   SLTU A2, T0, V1
9D006CE4  10C0000A   BEQ A2, ZERO, 0x9D006D10
9D006CE8  01202825   OR A1, T1, ZERO
9D006CEC  01074021   ADDU T0, T0, A3
9D006CF0  0107302B   SLTU A2, T0, A3
9D006CF4  14C00006   BNE A2, ZERO, 0x9D006D10
9D006CF8  2525FFFF   ADDIU A1, T1, -1
9D006CFC  0103302B   SLTU A2, T0, V1
9D006D00  10C00004   BEQ A2, ZERO, 0x9D006D14
9D006D04  000D6400   SLL T4, T5, 16
9D006D08  2525FFFE   ADDIU A1, T1, -2
9D006D0C  01074021   ADDU T0, T0, A3
9D006D10  000D6400   SLL T4, T5, 16
9D006D14  01856025   OR T4, T4, A1
9D006D18  01820019   MULTU 0, T4, V0
9D006D1C  01034023   SUBU T0, T0, V1
9D006D20  00006810   MFHI T5
9D006D24  010D282B   SLTU A1, T0, T5
9D006D28  01A01825   OR V1, T5, ZERO
9D006D2C  00006012   MFLO T4
9D006D30  14A00006   BNE A1, ZERO, 0x9D006D4C
9D006D34  00003012   MFLO A2
9D006D38  150D0009   BNE T0, T5, 0x9D006D60
9D006D3C  00863023   SUBU A2, A0, A2
9D006D40  008C282B   SLTU A1, A0, T4
9D006D44  50A00007   BEQL A1, ZERO, 0x9D006D64
9D006D48  01034023   SUBU T0, T0, V1
9D006D4C  01823023   SUBU A2, T4, V0
9D006D50  01A73823   SUBU A3, T5, A3
9D006D54  0186602B   SLTU T4, T4, A2
9D006D58  00EC1823   SUBU V1, A3, T4
9D006D5C  00863023   SUBU A2, A0, A2
9D006D60  01034023   SUBU T0, T0, V1
9D006D64  0086182B   SLTU V1, A0, A2
9D006D68  01031823   SUBU V1, T0, V1
9D006D6C  01631004   SLLV V0, V1, T3
9D006D70  01C63006   SRLV A2, A2, T6
9D006D74  00461025   OR V0, V0, A2
9D006D78  01C31806   SRLV V1, V1, T6
9D006D7C  03E00008   JR RA
9D006D80  00000000   NOP
9D006D84  00C04025   OR T0, A2, ZERO
9D006D88  00E01825   OR V1, A3, ZERO
9D006D8C  00805025   OR T2, A0, ZERO
9D006D90  14E000A3   BNE A3, ZERO, 0x9D007020
9D006D94  00A01025   OR V0, A1, ZERO
9D006D98  00A6302B   SLTU A2, A1, A2
9D006D9C  10C00034   BEQ A2, ZERO, 0x9D006E70
9D006DA0  00000000   NOP
9D006DA4  71052820   CLZ A1, T0
9D006DA8  50A00008   BEQL A1, ZERO, 0x9D006DCC
9D006DAC  00082C02   SRL A1, T0, 16
9D006DB0  00052023   SUBU A0, ZERO, A1
9D006DB4  008A2006   SRLV A0, T2, A0
9D006DB8  00A21004   SLLV V0, V0, A1
9D006DBC  00A84004   SLLV T0, T0, A1
9D006DC0  00821025   OR V0, A0, V0
9D006DC4  00AA5004   SLLV T2, T2, A1
9D006DC8  00082C02   SRL A1, T0, 16
9D006DCC  0045001B   DIVU V0, A1
9D006DD0  00A001F4   TEQ A1, ZERO
9D006DD4  3107FFFF   ANDI A3, T0, -1
9D006DD8  000A2402   SRL A0, T2, 16
9D006DDC  00003012   MFLO A2
9D006DE0  00001010   MFHI V0
9D006DE4  00021400   SLL V0, V0, 16
9D006DE8  00442025   OR A0, V0, A0
9D006DEC  70E64802   MUL T1, A3, A2
9D006DF0  0089582B   SLTU T3, A0, T1
9D006DF4  1160000A   BEQ T3, ZERO, 0x9D006E20
9D006DF8  00C01025   OR V0, A2, ZERO
9D006DFC  00882021   ADDU A0, A0, T0
9D006E00  0088582B   SLTU T3, A0, T0
9D006E04  15600006   BNE T3, ZERO, 0x9D006E20
9D006E08  24C2FFFF   ADDIU V0, A2, -1
9D006E0C  0089582B   SLTU T3, A0, T1
9D006E10  51600004   BEQL T3, ZERO, 0x9D006E24
9D006E14  00892023   SUBU A0, A0, T1
9D006E18  24C2FFFE   ADDIU V0, A2, -2
9D006E1C  00882021   ADDU A0, A0, T0
9D006E20  00892023   SUBU A0, A0, T1
9D006E24  0085001B   DIVU A0, A1
9D006E28  00A001F4   TEQ A1, ZERO
9D006E2C  314AFFFF   ANDI T2, T2, -1
9D006E30  00002012   MFLO A0
9D006E34  00002810   MFHI A1
9D006E38  00052C00   SLL A1, A1, 16
9D006E3C  00AA5025   OR T2, A1, T2
9D006E40  70E43802   MUL A3, A3, A0
9D006E44  0147282B   SLTU A1, T2, A3
9D006E48  10A00006   BEQ A1, ZERO, 0x9D006E64
9D006E4C  00803025   OR A2, A0, ZERO
9D006E50  010A5021   ADDU T2, T0, T2
9D006E54  0148402B   SLTU T0, T2, T0
9D006E58  2486FFFF   ADDIU A2, A0, -1
9D006E5C  11000036   BEQ T0, ZERO, 0x9D006F38
9D006E60  0147502B   SLTU T2, T2, A3
9D006E64  00021400   SLL V0, V0, 16
9D006E68  03E00008   JR RA
9D006E6C  00461025   OR V0, V0, A2
9D006E70  15000006   BNE T0, ZERO, 0x9D006E8C
9D006E74  71021020   CLZ V0, T0
9D006E78  24020001   ADDIU V0, ZERO, 1
9D006E7C  0048001B   DIVU V0, T0
9D006E80  010001F4   TEQ T0, ZERO
9D006E84  00004012   MFLO T0
9D006E88  71021020   CLZ V0, T0
9D006E8C  1440002E   BNE V0, ZERO, 0x9D006F48
9D006E90  24090020   ADDIU T1, ZERO, 32
9D006E94  00A82823   SUBU A1, A1, T0
9D006E98  24030001   ADDIU V1, ZERO, 1
9D006E9C  00083402   SRL A2, T0, 16
9D006EA0  00A6001B   DIVU A1, A2
9D006EA4  00C001F4   TEQ A2, ZERO
9D006EA8  3107FFFF   ANDI A3, T0, -1
9D006EAC  000A2402   SRL A0, T2, 16
9D006EB0  00002812   MFLO A1
9D006EB4  00001010   MFHI V0
9D006EB8  00021400   SLL V0, V0, 16
9D006EBC  00442025   OR A0, V0, A0
9D006EC0  70E54802   MUL T1, A3, A1
9D006EC4  0089582B   SLTU T3, A0, T1
9D006EC8  1160000A   BEQ T3, ZERO, 0x9D006EF4
9D006ECC  00A01025   OR V0, A1, ZERO
9D006ED0  00882021   ADDU A0, A0, T0
9D006ED4  0088582B   SLTU T3, A0, T0
9D006ED8  15600006   BNE T3, ZERO, 0x9D006EF4
9D006EDC  24A2FFFF   ADDIU V0, A1, -1
9D006EE0  0089582B   SLTU T3, A0, T1
9D006EE4  51600004   BEQL T3, ZERO, 0x9D006EF8
9D006EE8  00892023   SUBU A0, A0, T1
9D006EEC  24A2FFFE   ADDIU V0, A1, -2
9D006EF0  00882021   ADDU A0, A0, T0
9D006EF4  00892023   SUBU A0, A0, T1
9D006EF8  0086001B   DIVU A0, A2
9D006EFC  00C001F4   TEQ A2, ZERO
9D006F00  314AFFFF   ANDI T2, T2, -1
9D006F04  00002012   MFLO A0
9D006F08  00003010   MFHI A2
9D006F0C  00063400   SLL A2, A2, 16
9D006F10  00CA5025   OR T2, A2, T2
9D006F14  70E42802   MUL A1, A3, A0
9D006F18  0145382B   SLTU A3, T2, A1
9D006F1C  10E0FFD1   BEQ A3, ZERO, 0x9D006E64
9D006F20  00803025   OR A2, A0, ZERO
9D006F24  010A5021   ADDU T2, T0, T2
9D006F28  0148402B   SLTU T0, T2, T0
9D006F2C  1500FFCD   BNE T0, ZERO, 0x9D006E64
9D006F30  2486FFFF   ADDIU A2, A0, -1
9D006F34  0145502B   SLTU T2, T2, A1
9D006F38  5540FFCA   BNEL T2, ZERO, 0x9D006E64
9D006F3C  2486FFFE   ADDIU A2, A0, -2
9D006F40  1000FFC9   BEQ ZERO, ZERO, 0x9D006E68
9D006F44  00021400   SLL V0, V0, 16
9D006F48  01224823   SUBU T1, T1, V0
9D006F4C  00484004   SLLV T0, T0, V0
9D006F50  00451804   SLLV V1, A1, V0
9D006F54  00445004   SLLV T2, A0, V0
9D006F58  01252806   SRLV A1, A1, T1
9D006F5C  00081402   SRL V0, T0, 16
9D006F60  00A2001B   DIVU A1, V0
9D006F64  004001F4   TEQ V0, ZERO
9D006F68  3106FFFF   ANDI A2, T0, -1
9D006F6C  01243806   SRLV A3, A0, T1
9D006F70  00E33825   OR A3, A3, V1
9D006F74  00071C02   SRL V1, A3, 16
9D006F78  00002812   MFLO A1
9D006F7C  00002010   MFHI A0
9D006F80  00042400   SLL A0, A0, 16
9D006F84  00832025   OR A0, A0, V1
9D006F88  70C54802   MUL T1, A2, A1
9D006F8C  0089582B   SLTU T3, A0, T1
9D006F90  1160000A   BEQ T3, ZERO, 0x9D006FBC
9D006F94  00A01825   OR V1, A1, ZERO
9D006F98  00882021   ADDU A0, A0, T0
9D006F9C  0088582B   SLTU T3, A0, T0
9D006FA0  15600006   BNE T3, ZERO, 0x9D006FBC
9D006FA4  24A3FFFF   ADDIU V1, A1, -1
9D006FA8  0089582B   SLTU T3, A0, T1
9D006FAC  51600004   BEQL T3, ZERO, 0x9D006FC0
9D006FB0  00892023   SUBU A0, A0, T1
9D006FB4  24A3FFFE   ADDIU V1, A1, -2
9D006FB8  00882021   ADDU A0, A0, T0
9D006FBC  00892023   SUBU A0, A0, T1
9D006FC0  0082001B   DIVU A0, V0
9D006FC4  004001F4   TEQ V0, ZERO
9D006FC8  30E5FFFF   ANDI A1, A3, -1
9D006FCC  00001012   MFLO V0
9D006FD0  00002010   MFHI A0
9D006FD4  00042400   SLL A0, A0, 16
9D006FD8  00852825   OR A1, A0, A1
9D006FDC  70C23002   MUL A2, A2, V0
9D006FE0  00A6382B   SLTU A3, A1, A2
9D006FE4  10E0000A   BEQ A3, ZERO, 0x9D007010
9D006FE8  00402025   OR A0, V0, ZERO
9D006FEC  00A82821   ADDU A1, A1, T0
9D006FF0  00A8382B   SLTU A3, A1, T0
9D006FF4  14E00006   BNE A3, ZERO, 0x9D007010
9D006FF8  2444FFFF   ADDIU A0, V0, -1
9D006FFC  00A6382B   SLTU A3, A1, A2
9D007000  50E00004   BEQL A3, ZERO, 0x9D007014
9D007004  00031C00   SLL V1, V1, 16
9D007008  2444FFFE   ADDIU A0, V0, -2
9D00700C  00A82821   ADDU A1, A1, T0
9D007010  00031C00   SLL V1, V1, 16
9D007014  00A62823   SUBU A1, A1, A2
9D007018  1000FFA0   BEQ ZERO, ZERO, 0x9D006E9C
9D00701C  00641825   OR V1, V1, A0
9D007020  00A7102B   SLTU V0, A1, A3
9D007024  1440004F   BNE V0, ZERO, 0x9D007164
9D007028  00001825   OR V1, ZERO, ZERO
9D00702C  70EA5020   CLZ T2, A3
9D007030  15400008   BNE T2, ZERO, 0x9D007054
9D007034  24090020   ADDIU T1, ZERO, 32
9D007038  00E5282B   SLTU A1, A3, A1
9D00703C  54A0004A   BNEL A1, ZERO, 0x9D007168
9D007040  24020001   ADDIU V0, ZERO, 1
9D007044  0086102B   SLTU V0, A0, A2
9D007048  38420001   XORI V0, V0, 1
9D00704C  03E00008   JR RA
9D007050  00001825   OR V1, ZERO, ZERO
9D007054  012A4823   SUBU T1, T1, T2
9D007058  01261006   SRLV V0, A2, T1
9D00705C  01473804   SLLV A3, A3, T2
9D007060  00473825   OR A3, V0, A3
9D007064  00074402   SRL T0, A3, 16
9D007068  01451004   SLLV V0, A1, T2
9D00706C  01252806   SRLV A1, A1, T1
9D007070  00A8001B   DIVU A1, T0
9D007074  010001F4   TEQ T0, ZERO
9D007078  01246006   SRLV T4, A0, T1
9D00707C  30EBFFFF   ANDI T3, A3, -1
9D007080  01826025   OR T4, T4, V0
9D007084  000C1C02   SRL V1, T4, 16
9D007088  01463004   SLLV A2, A2, T2
9D00708C  00002812   MFLO A1
9D007090  00004810   MFHI T1
9D007094  00094C00   SLL T1, T1, 16
9D007098  01234825   OR T1, T1, V1
9D00709C  71651002   MUL V0, T3, A1
9D0070A0  0122682B   SLTU T5, T1, V0
9D0070A4  11A0000A   BEQ T5, ZERO, 0x9D0070D0
9D0070A8  00A01825   OR V1, A1, ZERO
9D0070AC  01274821   ADDU T1, T1, A3
9D0070B0  0127682B   SLTU T5, T1, A3
9D0070B4  15A00006   BNE T5, ZERO, 0x9D0070D0
9D0070B8  24A3FFFF   ADDIU V1, A1, -1
9D0070BC  0122682B   SLTU T5, T1, V0
9D0070C0  51A00004   BEQL T5, ZERO, 0x9D0070D4
9D0070C4  01224823   SUBU T1, T1, V0
9D0070C8  24A3FFFE   ADDIU V1, A1, -2
9D0070CC  01274821   ADDU T1, T1, A3
9D0070D0  01224823   SUBU T1, T1, V0
9D0070D4  0128001B   DIVU T1, T0
9D0070D8  010001F4   TEQ T0, ZERO
9D0070DC  3185FFFF   ANDI A1, T4, -1
9D0070E0  00004012   MFLO T0
9D0070E4  00004810   MFHI T1
9D0070E8  00094C00   SLL T1, T1, 16
9D0070EC  01252825   OR A1, T1, A1
9D0070F0  71685802   MUL T3, T3, T0
9D0070F4  00AB102B   SLTU V0, A1, T3
9D0070F8  1040000A   BEQ V0, ZERO, 0x9D007124
9D0070FC  01004825   OR T1, T0, ZERO
9D007100  00A72821   ADDU A1, A1, A3
9D007104  00A7102B   SLTU V0, A1, A3
9D007108  14400006   BNE V0, ZERO, 0x9D007124
9D00710C  2509FFFF   ADDIU T1, T0, -1
9D007110  00AB102B   SLTU V0, A1, T3
9D007114  10400004   BEQ V0, ZERO, 0x9D007128
9D007118  00031400   SLL V0, V1, 16
9D00711C  2509FFFE   ADDIU T1, T0, -2
9D007120  00A72821   ADDU A1, A1, A3
9D007124  00031400   SLL V0, V1, 16
9D007128  00491025   OR V0, V0, T1
9D00712C  00460019   MULTU 0, V0, A2
9D007130  00AB2823   SUBU A1, A1, T3
9D007134  00003810   MFHI A3
9D007138  00A7182B   SLTU V1, A1, A3
9D00713C  14600007   BNE V1, ZERO, 0x9D00715C
9D007140  00003012   MFLO A2
9D007144  14A70008   BNE A1, A3, 0x9D007168
9D007148  00001825   OR V1, ZERO, ZERO
9D00714C  01442004   SLLV A0, A0, T2
9D007150  0086202B   SLTU A0, A0, A2
9D007154  10800004   BEQ A0, ZERO, 0x9D007168
9D007158  00000000   NOP
9D00715C  1000FFBB   BEQ ZERO, ZERO, 0x9D00704C
9D007160  2442FFFF   ADDIU V0, V0, -1
9D007164  00001025   OR V0, ZERO, ZERO
9D007168  03E00008   JR RA
9D00716C  00000000   NOP
9D008FB8  10C00008   BEQ A2, ZERO, 0x9D008FDC
9D008FBC  00801025   OR V0, A0, ZERO
9D008FC0  24030020   ADDIU V1, ZERO, 32
9D008FC4  00661823   SUBU V1, V1, A2
9D008FC8  1C600006   BGTZ V1, 0x9D008FE4
9D008FCC  00C52006   SRLV A0, A1, A2
9D008FD0  00002025   OR A0, ZERO, ZERO
9D008FD4  00C51006   SRLV V0, A1, A2
9D008FD8  00802825   OR A1, A0, ZERO
9D008FDC  03E00008   JR RA
9D008FE0  00A01825   OR V1, A1, ZERO
9D008FE4  00C21006   SRLV V0, V0, A2
9D008FE8  00652804   SLLV A1, A1, V1
9D008FEC  1000FFFA   BEQ ZERO, ZERO, 0x9D008FD8
9D008FF0  00451025   OR V0, V0, A1
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/pic32m-libs/libpic32/stubs/write.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D008AB0  27BDFFE0   ADDIU SP, SP, -32
9D008AB4  AFB10014   SW S1, 20(SP)
9D008AB8  AFBF001C   SW RA, 28(SP)
9D008ABC  AFB20018   SW S2, 24(SP)
9D008AC0  AFB00010   SW S0, 16(SP)
9D008AC4  10A0000D   BEQ A1, ZERO, 0x9D008AFC
9D008AC8  00008825   OR S1, ZERO, ZERO
9D008ACC  50C0000C   BEQL A2, ZERO, 0x9D008B00
9D008AD0  8FBF001C   LW RA, 28(SP)
9D008AD4  2C840003   SLTIU A0, A0, 3
9D008AD8  10800008   BEQ A0, ZERO, 0x9D008AFC
9D008ADC  00C08825   OR S1, A2, ZERO
9D008AE0  3C020000   LUI V0, 0
9D008AE4  24420000   ADDIU V0, V0, 0
9D008AE8  1040000B   BEQ V0, ZERO, 0x9D008B18
9D008AEC  00A08025   OR S0, A1, ZERO
9D008AF0  00C02825   OR A1, A2, ZERO
9D008AF4  0C000000   JAL 0x90000000
9D008AF8  02002025   OR A0, S0, ZERO
9D008AFC  8FBF001C   LW RA, 28(SP)
9D008B00  02201025   OR V0, S1, ZERO
9D008B04  8FB20018   LW S2, 24(SP)
9D008B08  8FB10014   LW S1, 20(SP)
9D008B0C  8FB00010   LW S0, 16(SP)
9D008B10  03E00008   JR RA
9D008B14  27BD0020   ADDIU SP, SP, 32
9D008B18  00A69021   ADDU S2, A1, A2
9D008B1C  82040000   LB A0, 0(S0)
9D008B20  0F40209C   JAL _mon_putc
9D008B24  26100001   ADDIU S0, S0, 1
9D008B28  5650FFFD   BNEL S2, S0, 0x9D008B20
9D008B2C  82040000   LB A0, 0(S0)
9D008B30  1000FFF3   BEQ ZERO, ZERO, 0x9D008B00
9D008B34  8FBF001C   LW RA, 28(SP)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/pic32m-libs/libpic32/stubs/default-on-reset.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D009310  03E00008   JR RA
9D009314  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/pic32m-libs/libpic32/stubs/default-on-bootstrap.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D009318  03E00008   JR RA
9D00931C  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/pic32m-libs/libpic32/stubs/default-general-exception-handler.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D008EA0  3C020000   LUI V0, 0
9D008EA4  24420001   ADDIU V0, V0, 1
9D008EA8  10400005   BEQ V0, ZERO, 0x9D008EC0
9D008EAC  3C029D01   LUI V0, -25343
9D008EB0  244292F0   ADDIU V0, V0, -27920
9D008EB4  10400003   BEQ V0, ZERO, 0x9D008EC4
9D008EB8  3C029D01   LUI V0, -25343
9D008EBC  7000003F   SDBBP 0
9D008EC0  3C029D01   LUI V0, -25343
9D008EC4  24428F30   ADDIU V0, V0, -28880
9D008EC8  10400005   BEQ V0, ZERO, 0x9D008EE0
9D008ECC  00000000   NOP
9D008ED0  27BDFFE8   ADDIU SP, SP, -24
9D008ED4  AFBF0014   SW RA, 20(SP)
9D008ED8  0040F809   JALR V0
9D008EDC  00000000   NOP
9D008EE0  1000FFFF   BEQ ZERO, ZERO, 0x9D008EE0
9D008EE4  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/pic32m-libs/libpic32/stubs/default-bootstrap-exception-handler.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D008E58  3C020000   LUI V0, 0
9D008E5C  24420001   ADDIU V0, V0, 1
9D008E60  10400005   BEQ V0, ZERO, 0x9D008E78
9D008E64  3C029D01   LUI V0, -25343
9D008E68  244292F0   ADDIU V0, V0, -27920
9D008E6C  10400003   BEQ V0, ZERO, 0x9D008E7C
9D008E70  3C029D01   LUI V0, -25343
9D008E74  7000003F   SDBBP 0
9D008E78  3C029D01   LUI V0, -25343
9D008E7C  24428F30   ADDIU V0, V0, -28880
9D008E80  10400005   BEQ V0, ZERO, 0x9D008E98
9D008E84  00000000   NOP
9D008E88  27BDFFE8   ADDIU SP, SP, -24
9D008E8C  AFBF0014   SW RA, 20(SP)
9D008E90  0040F809   JALR V0
9D008E94  00000000   NOP
9D008E98  1000FFFF   BEQ ZERO, ZERO, 0x9D008E98
9D008E9C  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/pic32m-libs/libpic32/stubs/_mon_putc.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D008270  3C02A000   LUI V0, -24576
9D008274  8C430200   LW V1, 512(V0)
9D008278  14600013   BNE V1, ZERO, 0x9D0082C8
9D00827C  00803025   OR A2, A0, ZERO
9D008280  3C020000   LUI V0, 0
9D008284  27BDFFE8   ADDIU SP, SP, -24
9D008288  24420000   ADDIU V0, V0, 0
9D00828C  10400006   BEQ V0, ZERO, 0x9D0082A8
9D008290  AFBF0014   SW RA, 20(SP)
9D008294  0C000000   JAL 0x90000000
9D008298  00000000   NOP
9D00829C  8FBF0014   LW RA, 20(SP)
9D0082A0  03E00008   JR RA
9D0082A4  27BD0018   ADDIU SP, SP, 24
9D0082A8  3C020000   LUI V0, 0
9D0082AC  24420000   ADDIU V0, V0, 0
9D0082B0  10400025   BEQ V0, ZERO, 0x9D008348
9D0082B4  3C05BF80   LUI A1, -16512
9D0082B8  0C000000   JAL 0x90000000
9D0082BC  00000000   NOP
9D0082C0  1000FFF7   BEQ ZERO, ZERO, 0x9D0082A0
9D0082C4  8FBF0014   LW RA, 20(SP)
9D0082C8  3C02BF80   LUI V0, -16512
9D0082CC  24426010   ADDIU V0, V0, 24592
9D0082D0  1040002F   BEQ V0, ZERO, 0x9D008390
9D0082D4  00000000   NOP
9D0082D8  24040001   ADDIU A0, ZERO, 1
9D0082DC  14640012   BNE V1, A0, 0x9D008328
9D0082E0  3C03BF80   LUI V1, -16512
9D0082E4  3C03BF80   LUI V1, -16512
9D0082E8  3C04BF80   LUI A0, -16512
9D0082EC  3C05BF80   LUI A1, -16512
9D0082F0  24636020   ADDIU V1, V1, 24608
9D0082F4  24846018   ADDIU A0, A0, 24600
9D0082F8  24A56008   ADDIU A1, A1, 24584
9D0082FC  34078000   ORI A3, ZERO, -32768
9D008300  ACA70000   SW A3, 0(A1)
9D008304  24050400   ADDIU A1, ZERO, 1024
9D008308  AC850000   SW A1, 0(A0)
9D00830C  8C440000   LW A0, 0(V0)
9D008310  30840100   ANDI A0, A0, 256
9D008314  1080FFFD   BEQ A0, ZERO, 0x9D00830C
9D008318  00000000   NOP
9D00831C  AC660000   SW A2, 0(V1)
9D008320  03E00008   JR RA
9D008324  00000000   NOP
9D008328  3C04BF80   LUI A0, -16512
9D00832C  3C05BF80   LUI A1, -16512
9D008330  3C02BF80   LUI V0, -16512
9D008334  24636220   ADDIU V1, V1, 25120
9D008338  24846218   ADDIU A0, A0, 25112
9D00833C  24A56208   ADDIU A1, A1, 25096
9D008340  1000FFEE   BEQ ZERO, ZERO, 0x9D0082FC
9D008344  24426210   ADDIU V0, V0, 25104
9D008348  24A56208   ADDIU A1, A1, 25096
9D00834C  3C04BF80   LUI A0, -16512
9D008350  34078000   ORI A3, ZERO, -32768
9D008354  ACA70000   SW A3, 0(A1)
9D008358  3C03BF80   LUI V1, -16512
9D00835C  24846218   ADDIU A0, A0, 25112
9D008360  3C02BF80   LUI V0, -16512
9D008364  24050400   ADDIU A1, ZERO, 1024
9D008368  24636220   ADDIU V1, V1, 25120
9D00836C  24426210   ADDIU V0, V0, 25104
9D008370  AC850000   SW A1, 0(A0)
9D008374  8C440000   LW A0, 0(V0)
9D008378  30840100   ANDI A0, A0, 256
9D00837C  1080FFFD   BEQ A0, ZERO, 0x9D008374
9D008380  00000000   NOP
9D008384  AC660000   SW A2, 0(V1)
9D008388  1000FFC5   BEQ ZERO, ZERO, 0x9D0082A0
9D00838C  8FBF0014   LW RA, 20(SP)
9D008390  03E00008   JR RA
9D008394  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/pic32m-libs/libpic32/startup/software-debug-break.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0092F0  7000003F   SDBBP 0
9D0092F4  03E00008   JR RA
9D0092F8  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/pic32m-libs/libpic32/default_vector_dispatch/defaultinterrupt.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D008EE8  3C020000   LUI V0, 0
9D008EEC  24420001   ADDIU V0, V0, 1
9D008EF0  10400007   BEQ V0, ZERO, 0x9D008F10
9D008EF4  3C029D01   LUI V0, -25343
9D008EF8  244292F0   ADDIU V0, V0, -27920
9D008EFC  50400005   BEQL V0, ZERO, 0x9D008F14
9D008F00  3C029D01   LUI V0, -25343
9D008F04  7000003F   SDBBP 0
9D008F08  03E00008   JR RA
9D008F0C  00000000   NOP
9D008F10  3C029D01   LUI V0, -25343
9D008F14  24428F30   ADDIU V0, V0, -28880
9D008F18  10400003   BEQ V0, ZERO, 0x9D008F28
9D008F1C  00000000   NOP
9D008F20  0040F809   JALR V0
9D008F24  00000000   NOP
9D008F28  03E00008   JR RA
9D008F2C  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/XC-libs/htc/src/strtol.c  ----
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D007718  27BDFFC8   ADDIU SP, SP, -56
9D00771C  3C02A000   LUI V0, -24576
9D007720  AFB6002C   SW S6, 44(SP)
9D007724  AFB40024   SW S4, 36(SP)
9D007728  AFB2001C   SW S2, 28(SP)
9D00772C  AFBF0034   SW RA, 52(SP)
9D007730  AFB70030   SW S7, 48(SP)
9D007734  AFB50028   SW S5, 40(SP)
9D007738  AFB30020   SW S3, 32(SP)
9D00773C  AFB10018   SW S1, 24(SP)
9D007740  AFB00014   SW S0, 20(SP)
9D007744  00A0A025   OR S4, A1, ZERO
9D007748  00C09025   OR S2, A2, ZERO
9D00774C  AC400F48   SW ZERO, 3912(V0)
9D007750  10A00002   BEQ A1, ZERO, 0x9D00775C
9D007754  0040B025   OR S6, V0, ZERO
9D007758  ACA40000   SW A0, 0(A1)
9D00775C  3C159D01   LUI S5, -25343
9D007760  26B585C5   ADDIU S5, S5, -31291
9D007764  24830001   ADDIU V1, A0, 1
9D007768  8062FFFF   LB V0, -1(V1)
9D00776C  00552821   ADDU A1, V0, S5
9D007770  80A70000   LB A3, 0(A1)
9D007774  30E70088   ANDI A3, A3, 136
9D007778  54E0FFFA   BNEL A3, ZERO, 0x9D007764
9D00777C  00602025   OR A0, V1, ZERO
9D007780  2405002D   ADDIU A1, ZERO, 45
9D007784  14450036   BNE V0, A1, 0x9D007860
9D007788  2405002B   ADDIU A1, ZERO, 43
9D00778C  80620000   LB V0, 0(V1)
9D007790  24170001   ADDIU S7, ZERO, 1
9D007794  24830002   ADDIU V1, A0, 2
9D007798  24040030   ADDIU A0, ZERO, 48
9D00779C  14440039   BNE V0, A0, 0x9D007884
9D0077A0  00608025   OR S0, V1, ZERO
9D0077A4  02402025   OR A0, S2, ZERO
9D0077A8  7C042104   INS A0, ZERO, 4, 1
9D0077AC  24700001   ADDIU S0, V1, 1
9D0077B0  80620000   LB V0, 0(V1)
9D0077B4  14800009   BNE A0, ZERO, 0x9D0077DC
9D0077B8  24130001   ADDIU S3, ZERO, 1
9D0077BC  00402025   OR A0, V0, ZERO
9D0077C0  24050058   ADDIU A1, ZERO, 88
9D0077C4  7C042944   INS A0, ZERO, 5, 1
9D0077C8  1485002A   BNE A0, A1, 0x9D007874
9D0077CC  00000000   NOP
9D0077D0  80620001   LB V0, 1(V1)
9D0077D4  24700002   ADDIU S0, V1, 2
9D0077D8  24120010   ADDIU S2, ZERO, 16
9D0077DC  00008825   OR S1, ZERO, ZERO
9D0077E0  02A21821   ADDU V1, S5, V0
9D0077E4  90630000   LBU V1, 0(V1)
9D0077E8  30640003   ANDI A0, V1, 3
9D0077EC  10800029   BEQ A0, ZERO, 0x9D007894
9D0077F0  30630004   ANDI V1, V1, 4
9D0077F4  0F40243B   JAL toupper
9D0077F8  00402025   OR A0, V0, ZERO
9D0077FC  2442FFC9   ADDIU V0, V0, -55
9D007800  7C021420   SEB V0, V0
9D007804  0052182A   SLT V1, V0, S2
9D007808  1060002A   BEQ V1, ZERO, 0x9D0078B4
9D00780C  72511802   MUL V1, S2, S1
9D007810  00622021   ADDU A0, V1, V0
9D007814  0091102B   SLTU V0, A0, S1
9D007818  10400022   BEQ V0, ZERO, 0x9D0078A4
9D00781C  26100001   ADDIU S0, S0, 1
9D007820  24020022   ADDIU V0, ZERO, 34
9D007824  1660002E   BNE S3, ZERO, 0x9D0078E0
9D007828  AEC20F48   SW V0, 3912(S6)
9D00782C  2411FFFF   ADDIU S1, ZERO, -1
9D007830  8FBF0034   LW RA, 52(SP)
9D007834  02201025   OR V0, S1, ZERO
9D007838  8FB70030   LW S7, 48(SP)
9D00783C  8FB6002C   LW S6, 44(SP)
9D007840  8FB50028   LW S5, 40(SP)
9D007844  8FB40024   LW S4, 36(SP)
9D007848  8FB30020   LW S3, 32(SP)
9D00784C  8FB2001C   LW S2, 28(SP)
9D007850  8FB10018   LW S1, 24(SP)
9D007854  8FB00014   LW S0, 20(SP)
9D007858  03E00008   JR RA
9D00785C  27BD0038   ADDIU SP, SP, 56
9D007860  1445FFCD   BNE V0, A1, 0x9D007798
9D007864  0000B825   OR S7, ZERO, ZERO
9D007868  80620000   LB V0, 0(V1)
9D00786C  1000FFCA   BEQ ZERO, ZERO, 0x9D007798
9D007870  24830002   ADDIU V1, A0, 2
9D007874  5240FFD9   BEQL S2, ZERO, 0x9D0077DC
9D007878  24120008   ADDIU S2, ZERO, 8
9D00787C  1000FFD8   BEQ ZERO, ZERO, 0x9D0077E0
9D007880  00008825   OR S1, ZERO, ZERO
9D007884  1640FFD5   BNE S2, ZERO, 0x9D0077DC
9D007888  00009825   OR S3, ZERO, ZERO
9D00788C  1000FFD3   BEQ ZERO, ZERO, 0x9D0077DC
9D007890  2412000A   ADDIU S2, ZERO, 10
9D007894  10600007   BEQ V1, ZERO, 0x9D0078B4
9D007898  2442FFD0   ADDIU V0, V0, -48
9D00789C  1000FFD9   BEQ ZERO, ZERO, 0x9D007804
9D0078A0  7C021420   SEB V0, V0
9D0078A4  8202FFFF   LB V0, -1(S0)
9D0078A8  24130001   ADDIU S3, ZERO, 1
9D0078AC  1000FFCC   BEQ ZERO, ZERO, 0x9D0077E0
9D0078B0  00808825   OR S1, A0, ZERO
9D0078B4  12600006   BEQ S3, ZERO, 0x9D0078D0
9D0078B8  00000000   NOP
9D0078BC  12800004   BEQ S4, ZERO, 0x9D0078D0
9D0078C0  00009825   OR S3, ZERO, ZERO
9D0078C4  2610FFFF   ADDIU S0, S0, -1
9D0078C8  1660FFD8   BNE S3, ZERO, 0x9D00782C
9D0078CC  AE900000   SW S0, 0(S4)
9D0078D0  56E0FFD7   BNEL S7, ZERO, 0x9D007830
9D0078D4  00118823   SUBU S1, ZERO, S1
9D0078D8  1000FFD6   BEQ ZERO, ZERO, 0x9D007834
9D0078DC  8FBF0034   LW RA, 52(SP)
9D0078E0  1680FFF9   BNE S4, ZERO, 0x9D0078C8
9D0078E4  2610FFFF   ADDIU S0, S0, -1
9D0078E8  1000FFD1   BEQ ZERO, ZERO, 0x9D007830
9D0078EC  2411FFFF   ADDIU S1, ZERO, -1
9D008010  27BDFFD8   ADDIU SP, SP, -40
9D008014  3C02A000   LUI V0, -24576
9D008018  3C039D01   LUI V1, -25343
9D00801C  AFB40020   SW S4, 32(SP)
9D008020  AFB3001C   SW S3, 28(SP)
9D008024  AFB20018   SW S2, 24(SP)
9D008028  AFB10014   SW S1, 20(SP)
9D00802C  AFBF0024   SW RA, 36(SP)
9D008030  AFB00010   SW S0, 16(SP)
9D008034  0080A025   OR S4, A0, ZERO
9D008038  00A09825   OR S3, A1, ZERO
9D00803C  AC400F48   SW ZERO, 3912(V0)
9D008040  00808825   OR S1, A0, ZERO
9D008044  00409025   OR S2, V0, ZERO
9D008048  246385C5   ADDIU V1, V1, -31291
9D00804C  82300000   LB S0, 0(S1)
9D008050  02031021   ADDU V0, S0, V1
9D008054  80420000   LB V0, 0(V0)
9D008058  30420088   ANDI V0, V0, 136
9D00805C  5440FFFB   BNEL V0, ZERO, 0x9D00804C
9D008060  26310001   ADDIU S1, S1, 1
9D008064  2602FFD5   ADDIU V0, S0, -43
9D008068  304200FD   ANDI V0, V0, 253
9D00806C  54400002   BNEL V0, ZERO, 0x9D008078
9D008070  2410002B   ADDIU S0, ZERO, 43
9D008074  26310001   ADDIU S1, S1, 1
9D008078  02602825   OR A1, S3, ZERO
9D00807C  0F401DC6   JAL strtoul
9D008080  02202025   OR A0, S1, ZERO
9D008084  12600024   BEQ S3, ZERO, 0x9D008118
9D008088  2403002B   ADDIU V1, ZERO, 43
9D00808C  8E630000   LW V1, 0(S3)
9D008090  1471001E   BNE V1, S1, 0x9D00810C
9D008094  00000000   NOP
9D008098  AE740000   SW S4, 0(S3)
9D00809C  10400024   BEQ V0, ZERO, 0x9D008130
9D0080A0  2403002B   ADDIU V1, ZERO, 43
9D0080A4  24020022   ADDIU V0, ZERO, 34
9D0080A8  2403002D   ADDIU V1, ZERO, 45
9D0080AC  AE420F48   SW V0, 3912(S2)
9D0080B0  12030003   BEQ S0, V1, 0x9D0080C0
9D0080B4  3C028000   LUI V0, -32768
9D0080B8  3C027FFF   LUI V0, 32767
9D0080BC  3442FFFF   ORI V0, V0, -1
9D0080C0  8FBF0024   LW RA, 36(SP)
9D0080C4  8FB40020   LW S4, 32(SP)
9D0080C8  8FB3001C   LW S3, 28(SP)
9D0080CC  8FB20018   LW S2, 24(SP)
9D0080D0  8FB10014   LW S1, 20(SP)
9D0080D4  8FB00010   LW S0, 16(SP)
9D0080D8  03E00008   JR RA
9D0080DC  27BD0028   ADDIU SP, SP, 40
9D0080E0  1000FFE5   BEQ ZERO, ZERO, 0x9D008078
9D0080E4  2410002B   ADDIU S0, ZERO, 43
9D0080E8  1603FFF6   BNE S0, V1, 0x9D0080C4
9D0080EC  8FBF0024   LW RA, 36(SP)
9D0080F0  3C038000   LUI V1, -32768
9D0080F4  24630001   ADDIU V1, V1, 1
9D0080F8  0043182B   SLTU V1, V0, V1
9D0080FC  5060FFEA   BEQL V1, ZERO, 0x9D0080A8
9D008100  24020022   ADDIU V0, ZERO, 34
9D008104  1000FFEF   BEQ ZERO, ZERO, 0x9D0080C4
9D008108  00021023   SUBU V0, ZERO, V0
9D00810C  1074FFE3   BEQ V1, S4, 0x9D00809C
9D008110  00000000   NOP
9D008114  2403002B   ADDIU V1, ZERO, 43
9D008118  1603FFF3   BNE S0, V1, 0x9D0080E8
9D00811C  2403002D   ADDIU V1, ZERO, 45
9D008120  0441FFE8   BGEZ V0, 0x9D0080C4
9D008124  8FBF0024   LW RA, 36(SP)
9D008128  1000FFE0   BEQ ZERO, ZERO, 0x9D0080AC
9D00812C  24020022   ADDIU V0, ZERO, 34
9D008130  1203FFE3   BEQ S0, V1, 0x9D0080C0
9D008134  2403002D   ADDIU V1, ZERO, 45
9D008138  1603FFE2   BNE S0, V1, 0x9D0080C4
9D00813C  8FBF0024   LW RA, 36(SP)
9D008140  1000FFE0   BEQ ZERO, ZERO, 0x9D0080C4
9D008144  00021023   SUBU V0, ZERO, V0
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/XC-libs/htc/src/strtok.c  ----
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0087A4  27BDFFE0   ADDIU SP, SP, -32
9D0087A8  AFB20018   SW S2, 24(SP)
9D0087AC  AFB10014   SW S1, 20(SP)
9D0087B0  AFB00010   SW S0, 16(SP)
9D0087B4  AFBF001C   SW RA, 28(SP)
9D0087B8  00A09025   OR S2, A1, ZERO
9D0087BC  3C11A000   LUI S1, -24576
9D0087C0  14800004   BNE A0, ZERO, 0x9D0087D4
9D0087C4  00808025   OR S0, A0, ZERO
9D0087C8  8E300F34   LW S0, 3892(S1)
9D0087CC  1200000B   BEQ S0, ZERO, 0x9D0087FC
9D0087D0  8FBF001C   LW RA, 28(SP)
9D0087D4  02002025   OR A0, S0, ZERO
9D0087D8  0F402354   JAL strspn
9D0087DC  02402825   OR A1, S2, ZERO
9D0087E0  02028021   ADDU S0, S0, V0
9D0087E4  82020000   LB V0, 0(S0)
9D0087E8  5440000A   BNEL V0, ZERO, 0x9D008814
9D0087EC  02402825   OR A1, S2, ZERO
9D0087F0  AE200F34   SW ZERO, 3892(S1)
9D0087F4  00008025   OR S0, ZERO, ZERO
9D0087F8  8FBF001C   LW RA, 28(SP)
9D0087FC  02001025   OR V0, S0, ZERO
9D008800  8FB20018   LW S2, 24(SP)
9D008804  8FB10014   LW S1, 20(SP)
9D008808  8FB00010   LW S0, 16(SP)
9D00880C  03E00008   JR RA
9D008810  27BD0020   ADDIU SP, SP, 32
9D008814  0F40233D   JAL strcspn
9D008818  02002025   OR A0, S0, ZERO
9D00881C  02021021   ADDU V0, S0, V0
9D008820  80430000   LB V1, 0(V0)
9D008824  10600005   BEQ V1, ZERO, 0x9D00883C
9D008828  AE220F34   SW V0, 3892(S1)
9D00882C  24430001   ADDIU V1, V0, 1
9D008830  AE230F34   SW V1, 3892(S1)
9D008834  1000FFF0   BEQ ZERO, ZERO, 0x9D0087F8
9D008838  A0400000   SB ZERO, 0(V0)
9D00883C  1000FFEE   BEQ ZERO, ZERO, 0x9D0087F8
9D008840  AE200F34   SW ZERO, 3892(S1)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/XC-libs/htc/src/strspn.c  ----
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D008D50  27BDFFE0   ADDIU SP, SP, -32
9D008D54  AFB20018   SW S2, 24(SP)
9D008D58  AFB10014   SW S1, 20(SP)
9D008D5C  AFB00010   SW S0, 16(SP)
9D008D60  AFBF001C   SW RA, 28(SP)
9D008D64  00809025   OR S2, A0, ZERO
9D008D68  00A08825   OR S1, A1, ZERO
9D008D6C  00008025   OR S0, ZERO, ZERO
9D008D70  02501021   ADDU V0, S2, S0
9D008D74  80450000   LB A1, 0(V0)
9D008D78  10A00006   BEQ A1, ZERO, 0x9D008D94
9D008D7C  8FBF001C   LW RA, 28(SP)
9D008D80  0F402445   JAL strchr
9D008D84  02202025   OR A0, S1, ZERO
9D008D88  5440FFF9   BNEL V0, ZERO, 0x9D008D70
9D008D8C  26100001   ADDIU S0, S0, 1
9D008D90  8FBF001C   LW RA, 28(SP)
9D008D94  02001025   OR V0, S0, ZERO
9D008D98  8FB20018   LW S2, 24(SP)
9D008D9C  8FB10014   LW S1, 20(SP)
9D008DA0  8FB00010   LW S0, 16(SP)
9D008DA4  03E00008   JR RA
9D008DA8  27BD0020   ADDIU SP, SP, 32
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/XC-libs/htc/src/strcspn.c  ---
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D008CF4  27BDFFE0   ADDIU SP, SP, -32
9D008CF8  AFB20018   SW S2, 24(SP)
9D008CFC  AFB10014   SW S1, 20(SP)
9D008D00  AFB00010   SW S0, 16(SP)
9D008D04  AFBF001C   SW RA, 28(SP)
9D008D08  00809025   OR S2, A0, ZERO
9D008D0C  00A08825   OR S1, A1, ZERO
9D008D10  00008025   OR S0, ZERO, ZERO
9D008D14  02501021   ADDU V0, S2, S0
9D008D18  80450000   LB A1, 0(V0)
9D008D1C  10A00006   BEQ A1, ZERO, 0x9D008D38
9D008D20  8FBF001C   LW RA, 28(SP)
9D008D24  0F402445   JAL strchr
9D008D28  02202025   OR A0, S1, ZERO
9D008D2C  5040FFF9   BEQL V0, ZERO, 0x9D008D14
9D008D30  26100001   ADDIU S0, S0, 1
9D008D34  8FBF001C   LW RA, 28(SP)
9D008D38  02001025   OR V0, S0, ZERO
9D008D3C  8FB20018   LW S2, 24(SP)
9D008D40  8FB10014   LW S1, 20(SP)
9D008D44  8FB00010   LW S0, 16(SP)
9D008D48  03E00008   JR RA
9D008D4C  27BD0020   ADDIU SP, SP, 32
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/XC-libs/htc/src/strchr.c  ----
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D009114  00801025   OR V0, A0, ZERO
9D009118  7C052C20   SEB A1, A1
9D00911C  80430000   LB V1, 0(V0)
9D009120  10650004   BEQ V1, A1, 0x9D009134
9D009124  00000000   NOP
9D009128  1460FFFC   BNE V1, ZERO, 0x9D00911C
9D00912C  24420001   ADDIU V0, V0, 1
9D009130  00001025   OR V0, ZERO, ZERO
9D009134  03E00008   JR RA
9D009138  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/XC-libs/htc/src/sprintf.c  ---
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D008C34  27BDFFD0   ADDIU SP, SP, -48
9D008C38  24027FFF   ADDIU V0, ZERO, 32767
9D008C3C  AFB00028   SW S0, 40(SP)
9D008C40  AFA60038   SW A2, 56(SP)
9D008C44  00808025   OR S0, A0, ZERO
9D008C48  27A60038   ADDIU A2, SP, 56
9D008C4C  AFA20020   SW V0, 32(SP)
9D008C50  AFA40010   SW A0, 16(SP)
9D008C54  AFA40018   SW A0, 24(SP)
9D008C58  240200C2   ADDIU V0, ZERO, 194
9D008C5C  27A40010   ADDIU A0, SP, 16
9D008C60  AFBF002C   SW RA, 44(SP)
9D008C64  AFA7003C   SW A3, 60(SP)
9D008C68  AFA60024   SW A2, 36(SP)
9D008C6C  AFA00014   SW ZERO, 20(SP)
9D008C70  0F400C6E   JAL _vfprintf_cdnopsuxX
9D008C74  A7A2001C   SH V0, 28(SP)
9D008C78  8FA20010   LW V0, 16(SP)
9D008C7C  A0400000   SB ZERO, 0(V0)
9D008C80  8FA20010   LW V0, 16(SP)
9D008C84  8FBF002C   LW RA, 44(SP)
9D008C88  00501023   SUBU V0, V0, S0
9D008C8C  8FB00028   LW S0, 40(SP)
9D008C90  03E00008   JR RA
9D008C94  27BD0030   ADDIU SP, SP, 48
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/XC-libs/htc/src/rand.c  ------
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D008BBC  3C02A000   LUI V0, -24576
9D008BC0  80420F38   LB V0, 3896(V0)
9D008BC4  27BDFFE8   ADDIU SP, SP, -24
9D008BC8  14400003   BNE V0, ZERO, 0x9D008BD8
9D008BCC  AFBF0014   SW RA, 20(SP)
9D008BD0  0F40245F   JAL srand
9D008BD4  24040001   ADDIU A0, ZERO, 1
9D008BD8  3C06A000   LUI A2, -24576
9D008BDC  3C044C95   LUI A0, 19605
9D008BE0  24857F2D   ADDIU A1, A0, 32557
9D008BE4  8CC40F40   LW A0, 3904(A2)
9D008BE8  3C025851   LUI V0, 22609
9D008BEC  3442F42D   ORI V0, V0, -3027
9D008BF0  00820018   MULT 0, A0, V0
9D008BF4  8CC30F44   LW V1, 3908(A2)
9D008BF8  8FBF0014   LW RA, 20(SP)
9D008BFC  27BD0018   ADDIU SP, SP, 24
9D008C00  70650000   MADD 0, V1, A1
9D008C04  00001012   MFLO V0
9D008C08  00850019   MULTU 0, A0, A1
9D008C0C  00002012   MFLO A0
9D008C10  24830001   ADDIU V1, A0, 1
9D008C14  0064202B   SLTU A0, V1, A0
9D008C18  00002810   MFHI A1
9D008C1C  00451021   ADDU V0, V0, A1
9D008C20  00821021   ADDU V0, A0, V0
9D008C24  ACC20F44   SW V0, 3908(A2)
9D008C28  ACC30F40   SW V1, 3904(A2)
9D008C2C  03E00008   JR RA
9D008C30  7C42F000   EXT V0, V0, 0, 31
9D00917C  3C02A000   LUI V0, -24576
9D009180  AC440F40   SW A0, 3904(V0)
9D009184  AC400F44   SW ZERO, 3908(V0)
9D009188  24030001   ADDIU V1, ZERO, 1
9D00918C  3C02A000   LUI V0, -24576
9D009190  03E00008   JR RA
9D009194  A0430F38   SB V1, 3896(V0)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/XC-libs/htc/src/puts.c  ------
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D008C98  27BDFFE0   ADDIU SP, SP, -32
9D008C9C  AFB20018   SW S2, 24(SP)
9D008CA0  AFB10014   SW S1, 20(SP)
9D008CA4  AFB00010   SW S0, 16(SP)
9D008CA8  AFBF001C   SW RA, 28(SP)
9D008CAC  00808025   OR S0, A0, ZERO
9D008CB0  00A08825   OR S1, A1, ZERO
9D008CB4  2412FFFF   ADDIU S2, ZERO, -1
9D008CB8  82040000   LB A0, 0(S0)
9D008CBC  14800003   BNE A0, ZERO, 0x9D008CCC
9D008CC0  02202825   OR A1, S1, ZERO
9D008CC4  10000005   BEQ ZERO, ZERO, 0x9D008CDC
9D008CC8  00001025   OR V0, ZERO, ZERO
9D008CCC  0F402052   JAL fputc
9D008CD0  26100001   ADDIU S0, S0, 1
9D008CD4  5452FFF9   BNEL V0, S2, 0x9D008CBC
9D008CD8  82040000   LB A0, 0(S0)
9D008CDC  8FBF001C   LW RA, 28(SP)
9D008CE0  8FB20018   LW S2, 24(SP)
9D008CE4  8FB10014   LW S1, 20(SP)
9D008CE8  8FB00010   LW S0, 16(SP)
9D008CEC  03E00008   JR RA
9D008CF0  27BD0020   ADDIU SP, SP, 32
9D008F74  27BDFFE0   ADDIU SP, SP, -32
9D008F78  AFB00014   SW S0, 20(SP)
9D008F7C  3C10A000   LUI S0, -24576
9D008F80  26050D40   ADDIU A1, S0, 3392
9D008F84  AFBF001C   SW RA, 28(SP)
9D008F88  0F402326   JAL fputs
9D008F8C  AFB10018   SW S1, 24(SP)
9D008F90  26050D40   ADDIU A1, S0, 3392
9D008F94  2404000A   ADDIU A0, ZERO, 10
9D008F98  0F402052   JAL fputc
9D008F9C  00408825   OR S1, V0, ZERO
9D008FA0  8FBF001C   LW RA, 28(SP)
9D008FA4  02201025   OR V0, S1, ZERO
9D008FA8  8FB00014   LW S0, 20(SP)
9D008FAC  8FB10018   LW S1, 24(SP)
9D008FB0  03E00008   JR RA
9D008FB4  27BD0020   ADDIU SP, SP, 32
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/XC-libs/htc/src/putchar.c  ---
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00915C  3C05A000   LUI A1, -24576
9D009160  27BDFFE8   ADDIU SP, SP, -24
9D009164  AFBF0014   SW RA, 20(SP)
9D009168  0F402052   JAL fputc
9D00916C  24A50D40   ADDIU A1, A1, 3392
9D009170  8FBF0014   LW RA, 20(SP)
9D009174  03E00008   JR RA
9D009178  27BD0018   ADDIU SP, SP, 24
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/XC-libs/htc/src/printf.c  ----
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D008FF4  27BDFFE0   ADDIU SP, SP, -32
9D008FF8  AFA50024   SW A1, 36(SP)
9D008FFC  00802825   OR A1, A0, ZERO
9D009000  3C04A000   LUI A0, -24576
9D009004  AFA60028   SW A2, 40(SP)
9D009008  24840D40   ADDIU A0, A0, 3392
9D00900C  27A60024   ADDIU A2, SP, 36
9D009010  AFBF001C   SW RA, 28(SP)
9D009014  AFA7002C   SW A3, 44(SP)
9D009018  0F400C6E   JAL _vfprintf_cdnopsuxX
9D00901C  AFA60010   SW A2, 16(SP)
9D009020  8FBF001C   LW RA, 28(SP)
9D009024  03E00008   JR RA
9D009028  27BD0020   ADDIU SP, SP, 32
9D00902C  27BDFFE0   ADDIU SP, SP, -32
9D009034  00802825   OR A1, A0, ZERO
9D009038  3C04A000   LUI A0, -24576
9D00903C  AFA60028   SW A2, 40(SP)
9D009040  24840D40   ADDIU A0, A0, 3392
9D009044  27A60024   ADDIU A2, SP, 36
9D009048  AFBF001C   SW RA, 28(SP)
9D00904C  AFA7002C   SW A3, 44(SP)
9D009050  0F400C6E   JAL _vfprintf_cdnopsuxX
9D009054  AFA60010   SW A2, 16(SP)
9D009058  8FBF001C   LW RA, 28(SP)
9D00905C  03E00008   JR RA
9D009060  27BD0020   ADDIU SP, SP, 32
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/XC-libs/htc/src/fputc.c  -----
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D008148  94A2000C   LHU V0, 12(A1)
9D00814C  27BDFFE0   ADDIU SP, SP, -32
9D008150  AFB20018   SW S2, 24(SP)
9D008154  30430002   ANDI V1, V0, 2
9D008158  AFBF001C   SW RA, 28(SP)
9D00815C  AFB10014   SW S1, 20(SP)
9D008160  AFB00010   SW S0, 16(SP)
9D008164  1060003B   BEQ V1, ZERO, 0x9D008254
9D008168  2412FFFF   ADDIU S2, ZERO, -1
9D00816C  30460200   ANDI A2, V0, 512
9D008170  14C00003   BNE A2, ZERO, 0x9D008180
9D008174  8CA30004   LW V1, 4(A1)
9D008178  14600037   BNE V1, ZERO, 0x9D008258
9D00817C  8FBF001C   LW RA, 28(SP)
9D008180  34460200   ORI A2, V0, 512
9D008184  A4A6000C   SH A2, 12(A1)
9D008188  14600003   BNE V1, ZERO, 0x9D008198
9D00818C  309200FF   ANDI S2, A0, 255
9D008190  8CA30008   LW V1, 8(A1)
9D008194  ACA30000   SW V1, 0(A1)
9D008198  2403000A   ADDIU V1, ZERO, 10
9D00819C  00A08025   OR S0, A1, ZERO
9D0081A0  16430006   BNE S2, V1, 0x9D0081BC
9D0081A4  00808825   OR S1, A0, ZERO
9D0081A8  30420080   ANDI V0, V0, 128
9D0081AC  54400004   BNEL V0, ZERO, 0x9D0081C0
9D0081B0  8E020004   LW V0, 4(S0)
9D0081B4  0F402052   JAL fputc
9D0081B8  2404000D   ADDIU A0, ZERO, 13
9D0081BC  8E020004   LW V0, 4(S0)
9D0081C0  8E030010   LW V1, 16(S0)
9D0081C4  10430020   BEQ V0, V1, 0x9D008248
9D0081C8  7C112420   SEB A0, S1
9D0081CC  24420001   ADDIU V0, V0, 1
9D0081D0  AE020004   SW V0, 4(S0)
9D0081D4  8E020000   LW V0, 0(S0)
9D0081D8  24430001   ADDIU V1, V0, 1
9D0081DC  AE030000   SW V1, 0(S0)
9D0081E0  A0440000   SB A0, 0(V0)
9D0081E4  24030001   ADDIU V1, ZERO, 1
9D0081E8  3C02A000   LUI V0, -24576
9D0081EC  A0430F30   SB V1, 3888(V0)
9D0081F0  2402000A   ADDIU V0, ZERO, 10
9D0081F4  16420018   BNE S2, V0, 0x9D008258
9D0081F8  8FBF001C   LW RA, 28(SP)
9D0081FC  9602000C   LHU V0, 12(S0)
9D008200  30420100   ANDI V0, V0, 256
9D008204  10400015   BEQ V0, ZERO, 0x9D00825C
9D008208  02401025   OR V0, S2, ZERO
9D00820C  8E060004   LW A2, 4(S0)
9D008210  8E050008   LW A1, 8(S0)
9D008214  0F4022AC   JAL write
9D008218  9604000E   LHU A0, 14(S0)
9D00821C  8E030004   LW V1, 4(S0)
9D008220  50430006   BEQL V0, V1, 0x9D00823C
9D008224  8E020008   LW V0, 8(S0)
9D008228  9602000C   LHU V0, 12(S0)
9D00822C  2412FFFF   ADDIU S2, ZERO, -1
9D008230  34420030   ORI V0, V0, 48
9D008234  A602000C   SH V0, 12(S0)
9D008238  8E020008   LW V0, 8(S0)
9D00823C  AE000004   SW ZERO, 4(S0)
9D008240  10000004   BEQ ZERO, ZERO, 0x9D008254
9D008244  AE020000   SW V0, 0(S0)
9D008248  0F40212E   JAL _flsbuf
9D00824C  02002825   OR A1, S0, ZERO
9D008250  00409025   OR S2, V0, ZERO
9D008254  8FBF001C   LW RA, 28(SP)
9D008258  02401025   OR V0, S2, ZERO
9D00825C  8FB10014   LW S1, 20(SP)
9D008260  8FB20018   LW S2, 24(SP)
9D008264  8FB00010   LW S0, 16(SP)
9D008268  03E00008   JR RA
9D00826C  27BD0020   ADDIU SP, SP, 32
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/XC-libs/htc/src/flsbuf.c  ----
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0084B8  94A2000C   LHU V0, 12(A1)
9D0084BC  27BDFFE8   ADDIU SP, SP, -24
9D0084C0  AFBF0014   SW RA, 20(SP)
9D0084C4  30430040   ANDI V1, V0, 64
9D0084C8  AFB00010   SW S0, 16(SP)
9D0084CC  10600006   BEQ V1, ZERO, 0x9D0084E8
9D0084D0  A3A40018   SB A0, 24(SP)
9D0084D4  7C041420   SEB V0, A0
9D0084D8  8FBF0014   LW RA, 20(SP)
9D0084DC  8FB00010   LW S0, 16(SP)
9D0084E0  03E00008   JR RA
9D0084E4  27BD0018   ADDIU SP, SP, 24
9D0084E8  30430002   ANDI V1, V0, 2
9D0084EC  54600006   BNEL V1, ZERO, 0x9D008508
9D0084F0  8CA30010   LW V1, 16(A1)
9D0084F4  34420030   ORI V0, V0, 48
9D0084F8  A4A2000C   SH V0, 12(A1)
9D0084FC  ACA00004   SW ZERO, 4(A1)
9D008500  1000FFF5   BEQ ZERO, ZERO, 0x9D0084D8
9D008504  2402FFFF   ADDIU V0, ZERO, -1
9D008508  00A08025   OR S0, A1, ZERO
9D00850C  14600007   BNE V1, ZERO, 0x9D00852C
9D008510  94A4000E   LHU A0, 14(A1)
9D008514  24060001   ADDIU A2, ZERO, 1
9D008518  0F4022AC   JAL write
9D00851C  27A50018   ADDIU A1, SP, 24
9D008520  AE000004   SW ZERO, 4(S0)
9D008524  1000FFEC   BEQ ZERO, ZERO, 0x9D0084D8
9D008528  83A20018   LB V0, 24(SP)
9D00852C  8CA30008   LW V1, 8(A1)
9D008530  5460000B   BNEL V1, ZERO, 0x9D008560
9D008534  8E060004   LW A2, 4(S0)
9D008538  3C03A000   LUI V1, -24576
9D00853C  24630EF0   ADDIU V1, V1, 3824
9D008540  ACA30008   SW V1, 8(A1)
9D008544  ACA30000   SW V1, 0(A1)
9D008548  34420008   ORI V0, V0, 8
9D00854C  24030020   ADDIU V1, ZERO, 32
9D008550  ACA30010   SW V1, 16(A1)
9D008554  ACA30004   SW V1, 4(A1)
9D008558  A4A2000C   SH V0, 12(A1)
9D00855C  8E060004   LW A2, 4(S0)
9D008560  0F4022AC   JAL write
9D008564  8E050008   LW A1, 8(S0)
9D008568  8E020008   LW V0, 8(S0)
9D00856C  2403FFFF   ADDIU V1, ZERO, -1
9D008570  AE030004   SW V1, 4(S0)
9D008574  24430001   ADDIU V1, V0, 1
9D008578  AE030000   SW V1, 0(S0)
9D00857C  83A30018   LB V1, 24(SP)
9D008580  A0430000   SB V1, 0(V0)
9D008584  83A30018   LB V1, 24(SP)
9D008588  2402000A   ADDIU V0, ZERO, 10
9D00858C  1462FFD2   BNE V1, V0, 0x9D0084D8
9D008590  83A20018   LB V0, 24(SP)
9D008594  9602000C   LHU V0, 12(S0)
9D008598  30420100   ANDI V0, V0, 256
9D00859C  5040FFCE   BEQL V0, ZERO, 0x9D0084D8
9D0085A0  83A20018   LB V0, 24(SP)
9D0085A4  8E060004   LW A2, 4(S0)
9D0085A8  8E050008   LW A1, 8(S0)
9D0085AC  0F4022AC   JAL write
9D0085B0  9604000E   LHU A0, 14(S0)
9D0085B4  8E020008   LW V0, 8(S0)
9D0085B8  AE000004   SW ZERO, 4(S0)
9D0085BC  1000FFD9   BEQ ZERO, ZERO, 0x9D008524
9D0085C0  AE020000   SW V0, 0(S0)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/XC-libs/htc/src/doprnt.c  ----
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0031B8  27BDFFA8   ADDIU SP, SP, -88
9D0031BC  AFBE0050   SW FP, 80(SP)
9D0031C0  3C1E9D01   LUI FP, -25343
9D0031C4  27C285C5   ADDIU V0, FP, -31291
9D0031C8  AFA2001C   SW V0, 28(SP)
9D0031CC  3C029D01   LUI V0, -25343
9D0031D0  2442906C   ADDIU V0, V0, -28564
9D0031D4  AFB50044   SW S5, 68(SP)
9D0031D8  AFB20038   SW S2, 56(SP)
9D0031DC  AFB10034   SW S1, 52(SP)
9D0031E0  AFBF0054   SW RA, 84(SP)
9D0031E4  AFB7004C   SW S7, 76(SP)
9D0031E8  AFB60048   SW S6, 72(SP)
9D0031EC  AFB40040   SW S4, 64(SP)
9D0031F0  AFB3003C   SW S3, 60(SP)
9D0031F4  AFB00030   SW S0, 48(SP)
9D0031F8  0080A825   OR S5, A0, ZERO
9D0031FC  00C09025   OR S2, A2, ZERO
9D003200  00008825   OR S1, ZERO, ZERO
9D003204  AFA2002C   SW V0, 44(SP)
9D003208  80A40000   LB A0, 0(A1)
9D00320C  24B30001   ADDIU S3, A1, 1
9D003210  1480000E   BNE A0, ZERO, 0x9D00324C
9D003214  A3A40012   SB A0, 18(SP)
9D003218  8FBF0054   LW RA, 84(SP)
9D00321C  02201025   OR V0, S1, ZERO
9D003220  8FBE0050   LW FP, 80(SP)
9D003224  8FB7004C   LW S7, 76(SP)
9D003228  8FB60048   LW S6, 72(SP)
9D00322C  8FB50044   LW S5, 68(SP)
9D003230  8FB40040   LW S4, 64(SP)
9D003234  8FB3003C   LW S3, 60(SP)
9D003238  8FB20038   LW S2, 56(SP)
9D00323C  8FB10034   LW S1, 52(SP)
9D003240  8FB00030   LW S0, 48(SP)
9D003244  03E00008   JR RA
9D003248  27BD0058   ADDIU SP, SP, 88
9D00324C  24020025   ADDIU V0, ZERO, 37
9D003250  10820008   BEQ A0, V0, 0x9D003274
9D003254  0000B825   OR S7, ZERO, ZERO
9D003258  0F402052   JAL fputc
9D00325C  02A02825   OR A1, S5, ZERO
9D003260  2403FFFF   ADDIU V1, ZERO, -1
9D003264  54430001   BNEL V0, V1, 0x9D00326C
9D003268  26310001   ADDIU S1, S1, 1
9D00326C  1000FFE6   BEQ ZERO, ZERO, 0x9D003208
9D003270  02602825   OR A1, S3, ZERO
9D003274  2404002B   ADDIU A0, ZERO, 43
9D003278  2406002D   ADDIU A2, ZERO, 45
9D00327C  24070030   ADDIU A3, ZERO, 48
9D003280  10000007   BEQ ZERO, ZERO, 0x9D0032A0
9D003284  24080020   ADDIU T0, ZERO, 32
9D003288  50460004   BEQL V0, A2, 0x9D00329C
9D00328C  36F70008   ORI S7, S7, 8
9D003290  5447000C   BNEL V0, A3, 0x9D0032C4
9D003294  32E40002   ANDI A0, S7, 2
9D003298  36F70004   ORI S7, S7, 4
9D00329C  00A09825   OR S3, A1, ZERO
9D0032A0  82620000   LB V0, 0(S3)
9D0032A4  10440035   BEQ V0, A0, 0x9D00337C
9D0032A8  26650001   ADDIU A1, S3, 1
9D0032AC  2849002C   SLTI T1, V0, 44
9D0032B0  1120FFF5   BEQ T1, ZERO, 0x9D003288
9D0032B4  00000000   NOP
9D0032B8  5048FFF8   BEQL V0, T0, 0x9D00329C
9D0032BC  36F70001   ORI S7, S7, 1
9D0032C0  32E40002   ANDI A0, S7, 2
9D0032C4  54800001   BNEL A0, ZERO, 0x9D0032CC
9D0032C8  32F7FFFE   ANDI S7, S7, -2
9D0032CC  32E40008   ANDI A0, S7, 8
9D0032D0  54800001   BNEL A0, ZERO, 0x9D0032D8
9D0032D4  32F7FFFB   ANDI S7, S7, -5
9D0032D8  8FA3001C   LW V1, 28(SP)
9D0032DC  00432021   ADDU A0, V0, V1
9D0032E0  90840000   LBU A0, 0(A0)
9D0032E4  30840004   ANDI A0, A0, 4
9D0032E8  50800026   BEQL A0, ZERO, 0x9D003384
9D0032EC  2406002A   ADDIU A2, ZERO, 42
9D0032F0  00002025   OR A0, ZERO, ZERO
9D0032F4  2405000A   ADDIU A1, ZERO, 10
9D0032F8  70851802   MUL V1, A0, A1
9D0032FC  26730001   ADDIU S3, S3, 1
9D003300  8262FFFF   LB V0, -1(S3)
9D003304  00622021   ADDU A0, V1, V0
9D003308  82620000   LB V0, 0(S3)
9D00330C  8FA3001C   LW V1, 28(SP)
9D003310  00621021   ADDU V0, V1, V0
9D003314  90420000   LBU V0, 0(V0)
9D003318  30420004   ANDI V0, V0, 4
9D00331C  1440FFF6   BNE V0, ZERO, 0x9D0032F8
9D003320  2484FFD0   ADDIU A0, A0, -48
9D003324  82660000   LB A2, 0(S3)
9D003328  2402002E   ADDIU V0, ZERO, 46
9D00332C  14C2001E   BNE A2, V0, 0x9D0033A8
9D003330  00002825   OR A1, ZERO, ZERO
9D003334  82660001   LB A2, 1(S3)
9D003338  2402002A   ADDIU V0, ZERO, 42
9D00333C  10C20017   BEQ A2, V0, 0x9D00339C
9D003340  36F74000   ORI S7, S7, 16384
9D003344  26730001   ADDIU S3, S3, 1
9D003348  2408000A   ADDIU T0, ZERO, 10
9D00334C  82620000   LB V0, 0(S3)
9D003350  8FA3001C   LW V1, 28(SP)
9D003354  00623021   ADDU A2, V1, V0
9D003358  90C60000   LBU A2, 0(A2)
9D00335C  30C60004   ANDI A2, A2, 4
9D003360  10C00011   BEQ A2, ZERO, 0x9D0033A8
9D003364  26670001   ADDIU A3, S3, 1
9D003368  70A81802   MUL V1, A1, T0
9D00336C  00E09825   OR S3, A3, ZERO
9D003370  00622821   ADDU A1, V1, V0
9D003374  1000FFF5   BEQ ZERO, ZERO, 0x9D00334C
9D003378  24A5FFD0   ADDIU A1, A1, -48
9D00337C  1000FFC7   BEQ ZERO, ZERO, 0x9D00329C
9D003380  36F70002   ORI S7, S7, 2
9D003384  1446FFE7   BNE V0, A2, 0x9D003324
9D003388  00002025   OR A0, ZERO, ZERO
9D00338C  8E440000   LW A0, 0(S2)
9D003390  00A09825   OR S3, A1, ZERO
9D003394  1000FFE3   BEQ ZERO, ZERO, 0x9D003324
9D003398  26520004   ADDIU S2, S2, 4
9D00339C  8E450000   LW A1, 0(S2)
9D0033A0  26730002   ADDIU S3, S3, 2
9D0033A4  26520004   ADDIU S2, S2, 4
9D0033A8  24080069   ADDIU T0, ZERO, 105
9D0033AC  24090070   ADDIU T1, ZERO, 112
9D0033B0  240A006C   ADDIU T2, ZERO, 108
9D0033B4  240B0058   ADDIU T3, ZERO, 88
9D0033B8  240C004C   ADDIU T4, ZERO, 76
9D0033BC  24078000   ADDIU A3, ZERO, -32768
9D0033C0  24060010   ADDIU A2, ZERO, 16
9D0033C4  26730001   ADDIU S3, S3, 1
9D0033C8  8262FFFF   LB V0, -1(S3)
9D0033CC  10480014   BEQ V0, T0, 0x9D003420
9D0033D0  284D006A   SLTI T5, V0, 106
9D0033D4  11A00062   BEQ T5, ZERO, 0x9D003560
9D0033D8  00000000   NOP
9D0033DC  104B0096   BEQ V0, T3, 0x9D003638
9D0033E0  284D0059   SLTI T5, V0, 89
9D0033E4  51A00009   BEQL T5, ZERO, 0x9D00340C
9D0033E8  24060063   ADDIU A2, ZERO, 99
9D0033EC  1040FF8B   BEQ V0, ZERO, 0x9D00321C
9D0033F0  8FBF0054   LW RA, 84(SP)
9D0033F4  504C008B   BEQL V0, T4, 0x9D003624
9D0033F8  32E20010   ANDI V0, S7, 16
9D0033FC  A3A20012   SB V0, 18(SP)
9D003400  27B00012   ADDIU S0, SP, 18
9D003404  10000077   BEQ ZERO, ZERO, 0x9D0035E4
9D003408  241E0001   ADDIU FP, ZERO, 1
9D00340C  504600AD   BEQL V0, A2, 0x9D0036C4
9D003410  8E460000   LW A2, 0(S2)
9D003414  24060064   ADDIU A2, ZERO, 100
9D003418  5446FFF9   BNEL V0, A2, 0x9D003400
9D00341C  A3A20012   SB V0, 18(SP)
9D003420  A3A20012   SB V0, 18(SP)
9D003424  32E600C0   ANDI A2, S7, 192
9D003428  14C000C3   BNE A2, ZERO, 0x9D003738
9D00342C  7C171620   SEH V0, S7
9D003430  044300BE   BGEZL V0, 0x9D00372C
9D003434  8E500000   LW S0, 0(S2)
9D003438  26520007   ADDIU S2, S2, 7
9D00343C  02401025   OR V0, S2, ZERO
9D003440  7C021004   INS V0, ZERO, 0, 3
9D003444  8C500000   LW S0, 0(V0)
9D003448  8C5E0004   LW FP, 4(V0)
9D00344C  24520008   ADDIU S2, V0, 8
9D003450  07C10005   BGEZ FP, 0x9D003468
9D003454  001E4023   SUBU T0, ZERO, FP
9D003458  00108023   SUBU S0, ZERO, S0
9D00345C  0010102B   SLTU V0, ZERO, S0
9D003460  36F70003   ORI S7, S7, 3
9D003464  0102F023   SUBU FP, T0, V0
9D003468  14A00003   BNE A1, ZERO, 0x9D003478
9D00346C  32E200C0   ANDI V0, S7, 192
9D003470  021E2825   OR A1, S0, FP
9D003474  2CA50001   SLTIU A1, A1, 1
9D003478  AFA20018   SW V0, 24(SP)
9D00347C  32E300C0   ANDI V1, S7, 192
9D003480  24020040   ADDIU V0, ZERO, 64
9D003484  106200F1   BEQ V1, V0, 0x9D00384C
9D003488  2C620041   SLTIU V0, V1, 65
9D00348C  104000B6   BEQ V0, ZERO, 0x9D003768
9D003490  24020080   ADDIU V0, ZERO, 128
9D003494  106000BB   BEQ V1, ZERO, 0x9D003784
9D003498  24020001   ADDIU V0, ZERO, 1
9D00349C  83B60012   LB S6, 18(SP)
9D0034A0  02C5102A   SLT V0, S6, A1
9D0034A4  10400003   BEQ V0, ZERO, 0x9D0034B4
9D0034A8  00000000   NOP
9D0034AC  A3A50012   SB A1, 18(SP)
9D0034B0  00A0B025   OR S6, A1, ZERO
9D0034B4  10800005   BEQ A0, ZERO, 0x9D0034CC
9D0034B8  32E24000   ANDI V0, S7, 16384
9D0034BC  32E20003   ANDI V0, S7, 3
9D0034C0  54400001   BNEL V0, ZERO, 0x9D0034C8
9D0034C4  2484FFFF   ADDIU A0, A0, -1
9D0034C8  32E24000   ANDI V0, S7, 16384
9D0034CC  10400006   BEQ V0, ZERO, 0x9D0034E8
9D0034D0  83A20012   LB V0, 18(SP)
9D0034D4  02C4102A   SLT V0, S6, A0
9D0034D8  14400002   BNE V0, ZERO, 0x9D0034E4
9D0034DC  00962023   SUBU A0, A0, S6
9D0034E0  00002025   OR A0, ZERO, ZERO
9D0034E4  83A20012   LB V0, 18(SP)
9D0034E8  0044282A   SLT A1, V0, A0
9D0034EC  10A00002   BEQ A1, ZERO, 0x9D0034F8
9D0034F0  0000A025   OR S4, ZERO, ZERO
9D0034F4  0082A023   SUBU S4, A0, V0
9D0034F8  32E20008   ANDI V0, S7, 8
9D0034FC  AFA20020   SW V0, 32(SP)
9D003500  32E20004   ANDI V0, S7, 4
9D003504  32E70002   ANDI A3, S7, 2
9D003508  104000EC   BEQ V0, ZERO, 0x9D0038BC
9D00350C  32E60001   ANDI A2, S7, 1
9D003510  10E000E6   BEQ A3, ZERO, 0x9D0038AC
9D003514  2404002D   ADDIU A0, ZERO, 45
9D003518  2402002B   ADDIU V0, ZERO, 43
9D00351C  02A02825   OR A1, S5, ZERO
9D003520  0046200A   MOVZ A0, V0, A2
9D003524  0F402052   JAL fputc
9D003528  00000000   NOP
9D00352C  2404FFFF   ADDIU A0, ZERO, -1
9D003530  54440001   BNEL V0, A0, 0x9D003538
9D003534  26310001   ADDIU S1, S1, 1
9D003538  128000FB   BEQ S4, ZERO, 0x9D003928
9D00353C  8FA4002C   LW A0, 44(SP)
9D003540  02A02825   OR A1, S5, ZERO
9D003544  0F402052   JAL fputc
9D003548  24040030   ADDIU A0, ZERO, 48
9D00354C  2406FFFF   ADDIU A2, ZERO, -1
9D003550  54460001   BNEL V0, A2, 0x9D003558
9D003554  26310001   ADDIU S1, S1, 1
9D003558  1000FFF7   BEQ ZERO, ZERO, 0x9D003538
9D00355C  2694FFFF   ADDIU S4, S4, -1
9D003560  10490035   BEQ V0, T1, 0x9D003638
9D003564  284D0071   SLTI T5, V0, 113
9D003568  51A00008   BEQL T5, ZERO, 0x9D00358C
9D00356C  24060075   ADDIU A2, ZERO, 117
9D003570  504A002C   BEQL V0, T2, 0x9D003624
9D003574  32E20010   ANDI V0, S7, 16
9D003578  2406006F   ADDIU A2, ZERO, 111
9D00357C  1446FFA0   BNE V0, A2, 0x9D003400
9D003580  A3A20012   SB V0, 18(SP)
9D003584  1000FFA7   BEQ ZERO, ZERO, 0x9D003424
9D003588  36F70040   ORI S7, S7, 64
9D00358C  10460064   BEQ V0, A2, 0x9D003720
9D003590  24060078   ADDIU A2, ZERO, 120
9D003594  10460020   BEQ V0, A2, 0x9D003618
9D003598  24060073   ADDIU A2, ZERO, 115
9D00359C  5446FF98   BNEL V0, A2, 0x9D003400
9D0035A0  A3A20012   SB V0, 18(SP)
9D0035A4  8E500000   LW S0, 0(S2)
9D0035A8  A3A20012   SB V0, 18(SP)
9D0035AC  16000003   BNE S0, ZERO, 0x9D0035BC
9D0035B0  26470004   ADDIU A3, S2, 4
9D0035B4  3C109D01   LUI S0, -25343
9D0035B8  26109064   ADDIU S0, S0, -28572
9D0035BC  00001025   OR V0, ZERO, ZERO
9D0035C0  00004025   OR T0, ZERO, ZERO
9D0035C4  24460001   ADDIU A2, V0, 1
9D0035C8  02064821   ADDU T1, S0, A2
9D0035CC  8129FFFF   LB T1, -1(T1)
9D0035D0  5520001C   BNEL T1, ZERO, 0x9D003644
9D0035D4  00C01025   OR V0, A2, ZERO
9D0035D8  0008100A   MOVZ V0, ZERO, T0
9D0035DC  0040F025   OR FP, V0, ZERO
9D0035E0  00E09025   OR S2, A3, ZERO
9D0035E4  10A00004   BEQ A1, ZERO, 0x9D0035F8
9D0035E8  03C4102B   SLTU V0, FP, A0
9D0035EC  00BE102B   SLTU V0, A1, FP
9D0035F0  00A2F00B   MOVN FP, A1, V0
9D0035F4  03C4102B   SLTU V0, FP, A0
9D0035F8  10400002   BEQ V0, ZERO, 0x9D003604
9D0035FC  0000B025   OR S6, ZERO, ZERO
9D003600  009EB023   SUBU S6, A0, FP
9D003604  32F40008   ANDI S4, S7, 8
9D003608  12800014   BEQ S4, ZERO, 0x9D00365C
9D00360C  2417FFFF   ADDIU S7, ZERO, -1
9D003610  1000001E   BEQ ZERO, ZERO, 0x9D00368C
9D003614  03C01025   OR V0, FP, ZERO
9D003618  A3A20012   SB V0, 18(SP)
9D00361C  1000FF81   BEQ ZERO, ZERO, 0x9D003424
9D003620  36F70080   ORI S7, S7, 128
9D003624  00C01825   OR V1, A2, ZERO
9D003628  00E2180B   MOVN V1, A3, V0
9D00362C  00771825   OR V1, V1, S7
9D003630  1000FF64   BEQ ZERO, ZERO, 0x9D0033C4
9D003634  3077FFFF   ANDI S7, V1, -1
9D003638  A3A20012   SB V0, 18(SP)
9D00363C  1000FFF7   BEQ ZERO, ZERO, 0x9D00361C
9D003640  36F70020   ORI S7, S7, 32
9D003644  1000FFDF   BEQ ZERO, ZERO, 0x9D0035C4
9D003648  24080001   ADDIU T0, ZERO, 1
9D00364C  0F402052   JAL fputc
9D003650  24040020   ADDIU A0, ZERO, 32
9D003654  54570001   BNEL V0, S7, 0x9D00365C
9D003658  26310001   ADDIU S1, S1, 1
9D00365C  26D6FFFF   ADDIU S6, S6, -1
9D003660  16D7FFFA   BNE S6, S7, 0x9D00364C
9D003664  02A02825   OR A1, S5, ZERO
9D003668  10000007   BEQ ZERO, ZERO, 0x9D003688
9D00366C  2417FFFF   ADDIU S7, ZERO, -1
9D003670  82040000   LB A0, 0(S0)
9D003674  02A02825   OR A1, S5, ZERO
9D003678  0F402052   JAL fputc
9D00367C  26100001   ADDIU S0, S0, 1
9D003680  54570001   BNEL V0, S7, 0x9D003688
9D003684  26310001   ADDIU S1, S1, 1
9D003688  03C01025   OR V0, FP, ZERO
9D00368C  1440FFF8   BNE V0, ZERO, 0x9D003670
9D003690  27DEFFFF   ADDIU FP, FP, -1
9D003694  1280FEF5   BEQ S4, ZERO, 0x9D00326C
9D003698  2410FFFF   ADDIU S0, ZERO, -1
9D00369C  26D6FFFF   ADDIU S6, S6, -1
9D0036A0  12D0FED9   BEQ S6, S0, 0x9D003208
9D0036A4  02602825   OR A1, S3, ZERO
9D0036A8  02A02825   OR A1, S5, ZERO
9D0036AC  0F402052   JAL fputc
9D0036B0  24040020   ADDIU A0, ZERO, 32
9D0036B4  5450FFF9   BNEL V0, S0, 0x9D00369C
9D0036B8  26310001   ADDIU S1, S1, 1
9D0036BC  1000FFF8   BEQ ZERO, ZERO, 0x9D0036A0
9D0036C0  26D6FFFF   ADDIU S6, S6, -1
9D0036C4  96470000   LHU A3, 0(S2)
9D0036C8  26490004   ADDIU T1, S2, 4
9D0036CC  000647C3   SRA T0, A2, 31
9D0036D0  00084600   SLL T0, T0, 24
9D0036D4  00061202   SRL V0, A2, 8
9D0036D8  01021025   OR V0, T0, V0
9D0036DC  32E80010   ANDI T0, S7, 16
9D0036E0  7C0738A0   WSBH A3, A3
9D0036E4  1100000B   BEQ T0, ZERO, 0x9D003714
9D0036E8  A3A20012   SB V0, 18(SP)
9D0036EC  24420001   ADDIU V0, V0, 1
9D0036F0  304200FF   ANDI V0, V0, 255
9D0036F4  2C420002   SLTIU V0, V0, 2
9D0036F8  54400007   BNEL V0, ZERO, 0x9D003718
9D0036FC  A3A60010   SB A2, 16(SP)
9D003700  A7A70010   SH A3, 16(SP)
9D003704  241E0002   ADDIU FP, ZERO, 2
9D003708  27B00010   ADDIU S0, SP, 16
9D00370C  1000FFB5   BEQ ZERO, ZERO, 0x9D0035E4
9D003710  01209025   OR S2, T1, ZERO
9D003714  A3A60010   SB A2, 16(SP)
9D003718  1000FFFB   BEQ ZERO, ZERO, 0x9D003708
9D00371C  241E0001   ADDIU FP, ZERO, 1
9D003720  A3A20012   SB V0, 18(SP)
9D003724  1000FF3F   BEQ ZERO, ZERO, 0x9D003424
9D003728  36F700C0   ORI S7, S7, 192
9D00372C  26520004   ADDIU S2, S2, 4
9D003730  1000FF47   BEQ ZERO, ZERO, 0x9D003450
9D003734  0010F7C3   SRA FP, S0, 31
9D003738  04430008   BGEZL V0, 0x9D00375C
9D00373C  8E500000   LW S0, 0(S2)
9D003740  26520007   ADDIU S2, S2, 7
9D003744  02401025   OR V0, S2, ZERO
9D003748  7C021004   INS V0, ZERO, 0, 3
9D00374C  24520008   ADDIU S2, V0, 8
9D003750  8C500000   LW S0, 0(V0)
9D003754  1000FF44   BEQ ZERO, ZERO, 0x9D003468
9D003758  8C5E0004   LW FP, 4(V0)
9D00375C  0000F025   OR FP, ZERO, ZERO
9D003760  1000FF41   BEQ ZERO, ZERO, 0x9D003468
9D003764  26520004   ADDIU S2, S2, 4
9D003768  32E300C0   ANDI V1, S7, 192
9D00376C  1062001C   BEQ V1, V0, 0x9D0037E0
9D003770  24020001   ADDIU V0, ZERO, 1
9D003774  240200C0   ADDIU V0, ZERO, 192
9D003778  1462FF49   BNE V1, V0, 0x9D0034A0
9D00377C  83B60012   LB S6, 18(SP)
9D003780  24020001   ADDIU V0, ZERO, 1
9D003784  A3A20012   SB V0, 18(SP)
9D003788  3C029D01   LUI V0, -25343
9D00378C  24428848   ADDIU V0, V0, -30648
9D003790  24060001   ADDIU A2, ZERO, 1
9D003794  00003825   OR A3, ZERO, ZERO
9D003798  240C0014   ADDIU T4, ZERO, 20
9D00379C  10CC000C   BEQ A2, T4, 0x9D0037D0
9D0037A0  7C065420   SEB T2, A2
9D0037A4  8C4B000C   LW T3, 12(V0)
9D0037A8  8C490008   LW T1, 8(V0)
9D0037AC  24C60001   ADDIU A2, A2, 1
9D0037B0  03CB682B   SLTU T5, FP, T3
9D0037B4  15A00006   BNE T5, ZERO, 0x9D0037D0
9D0037B8  24420008   ADDIU V0, V0, 8
9D0037BC  557EFFF7   BNEL T3, FP, 0x9D00379C
9D0037C0  24070001   ADDIU A3, ZERO, 1
9D0037C4  0209482B   SLTU T1, S0, T1
9D0037C8  5120FFF4   BEQL T1, ZERO, 0x9D00379C
9D0037CC  24070001   ADDIU A3, ZERO, 1
9D0037D0  54E0FF32   BNEL A3, ZERO, 0x9D00349C
9D0037D4  A3AA0012   SB T2, 18(SP)
9D0037D8  1000FF31   BEQ ZERO, ZERO, 0x9D0034A0
9D0037DC  83B60012   LB S6, 18(SP)
9D0037E0  A3A20012   SB V0, 18(SP)
9D0037E4  00003825   OR A3, ZERO, ZERO
9D0037E8  24020001   ADDIU V0, ZERO, 1
9D0037EC  24090010   ADDIU T1, ZERO, 16
9D0037F0  00003025   OR A2, ZERO, ZERO
9D0037F4  240B0010   ADDIU T3, ZERO, 16
9D0037F8  144B0005   BNE V0, T3, 0x9D003810
9D0037FC  7C025420   SEB T2, V0
9D003800  54E0FF26   BNEL A3, ZERO, 0x9D00349C
9D003804  A3A20012   SB V0, 18(SP)
9D003808  1000FF25   BEQ ZERO, ZERO, 0x9D0034A0
9D00380C  83B60012   LB S6, 18(SP)
9D003810  24420001   ADDIU V0, V0, 1
9D003814  03C6602B   SLTU T4, FP, A2
9D003818  1580FFED   BNE T4, ZERO, 0x9D0037D0
9D00381C  304200FF   ANDI V0, V0, 255
9D003820  54DE0005   BNEL A2, FP, 0x9D003838
9D003824  00095702   SRL T2, T1, 28
9D003828  0209602B   SLTU T4, S0, T1
9D00382C  1580FFE8   BNE T4, ZERO, 0x9D0037D0
9D003830  00000000   NOP
9D003834  00095702   SRL T2, T1, 28
9D003838  00063900   SLL A3, A2, 4
9D00383C  01473025   OR A2, T2, A3
9D003840  00094900   SLL T1, T1, 4
9D003844  1000FFEC   BEQ ZERO, ZERO, 0x9D0037F8
9D003848  24070001   ADDIU A3, ZERO, 1
9D00384C  24020001   ADDIU V0, ZERO, 1
9D003850  A3A20012   SB V0, 18(SP)
9D003854  00003825   OR A3, ZERO, ZERO
9D003858  24020001   ADDIU V0, ZERO, 1
9D00385C  24090008   ADDIU T1, ZERO, 8
9D003860  00003025   OR A2, ZERO, ZERO
9D003864  240B0015   ADDIU T3, ZERO, 21
9D003868  104BFFE5   BEQ V0, T3, 0x9D003800
9D00386C  7C025420   SEB T2, V0
9D003870  24420001   ADDIU V0, V0, 1
9D003874  03C6602B   SLTU T4, FP, A2
9D003878  1580FFD5   BNE T4, ZERO, 0x9D0037D0
9D00387C  304200FF   ANDI V0, V0, 255
9D003880  54DE0005   BNEL A2, FP, 0x9D003898
9D003884  00095742   SRL T2, T1, 29
9D003888  0209602B   SLTU T4, S0, T1
9D00388C  1580FFD0   BNE T4, ZERO, 0x9D0037D0
9D003890  00000000   NOP
9D003894  00095742   SRL T2, T1, 29
9D003898  000638C0   SLL A3, A2, 3
9D00389C  01473025   OR A2, T2, A3
9D0038A0  000948C0   SLL T1, T1, 3
9D0038A4  1000FFF0   BEQ ZERO, ZERO, 0x9D003868
9D0038A8  24070001   ADDIU A3, ZERO, 1
9D0038AC  10C0FF22   BEQ A2, ZERO, 0x9D003538
9D0038B0  02A02825   OR A1, S5, ZERO
9D0038B4  1000FF1B   BEQ ZERO, ZERO, 0x9D003524
9D0038B8  24040020   ADDIU A0, ZERO, 32
9D0038BC  1280000F   BEQ S4, ZERO, 0x9D0038FC
9D0038C0  32E20008   ANDI V0, S7, 8
9D0038C4  1440000D   BNE V0, ZERO, 0x9D0038FC
9D0038C8  02A02825   OR A1, S5, ZERO
9D0038CC  24040020   ADDIU A0, ZERO, 32
9D0038D0  AFA60028   SW A2, 40(SP)
9D0038D4  0F402052   JAL fputc
9D0038D8  AFA70024   SW A3, 36(SP)
9D0038DC  2409FFFF   ADDIU T1, ZERO, -1
9D0038E0  8FA70024   LW A3, 36(SP)
9D0038E4  10490002   BEQ V0, T1, 0x9D0038F0
9D0038E8  8FA60028   LW A2, 40(SP)
9D0038EC  26310001   ADDIU S1, S1, 1
9D0038F0  2694FFFF   ADDIU S4, S4, -1
9D0038F4  1680FFF5   BNE S4, ZERO, 0x9D0038CC
9D0038F8  02A02825   OR A1, S5, ZERO
9D0038FC  10E00016   BEQ A3, ZERO, 0x9D003958
9D003900  2404002D   ADDIU A0, ZERO, 45
9D003904  2402002B   ADDIU V0, ZERO, 43
9D003908  02A02825   OR A1, S5, ZERO
9D00390C  0046200A   MOVZ A0, V0, A2
9D003910  0F402052   JAL fputc
9D003914  00000000   NOP
9D003918  2404FFFF   ADDIU A0, ZERO, -1
9D00391C  54440001   BNEL V0, A0, 0x9D003924
9D003920  26310001   ADDIU S1, S1, 1
9D003924  8FA4002C   LW A0, 44(SP)
9D003928  3C029D01   LUI V0, -25343
9D00392C  32E30020   ANDI V1, S7, 32
9D003930  24429080   ADDIU V0, V0, -28544
9D003934  0083100B   MOVN V0, A0, V1
9D003938  0040B825   OR S7, V0, ZERO
9D00393C  8FA20018   LW V0, 24(SP)
9D003940  2C420041   SLTIU V0, V0, 65
9D003944  AFA20024   SW V0, 36(SP)
9D003948  3C029D01   LUI V0, -25343
9D00394C  24428848   ADDIU V0, V0, -30648
9D003950  10000015   BEQ ZERO, ZERO, 0x9D0039A8
9D003954  AFA20028   SW V0, 40(SP)
9D003958  50C0FFF3   BEQL A2, ZERO, 0x9D003928
9D00395C  8FA4002C   LW A0, 44(SP)
9D003960  02A02825   OR A1, S5, ZERO
9D003964  1000FFEA   BEQ ZERO, ZERO, 0x9D003910
9D003968  24040020   ADDIU A0, ZERO, 32
9D00396C  24030040   ADDIU V1, ZERO, 64
9D003970  1043003E   BEQ V0, V1, 0x9D003A6C
9D003974  00163040   SLL A2, S6, 1
9D003978  8FA20024   LW V0, 36(SP)
9D00397C  1040001E   BEQ V0, ZERO, 0x9D0039F8
9D003980  8FA30018   LW V1, 24(SP)
9D003984  8FA20018   LW V0, 24(SP)
9D003988  10400022   BEQ V0, ZERO, 0x9D003A14
9D00398C  8FA30028   LW V1, 40(SP)
9D003990  83A40012   LB A0, 18(SP)
9D003994  0F402052   JAL fputc
9D003998  02A02825   OR A1, S5, ZERO
9D00399C  2403FFFF   ADDIU V1, ZERO, -1
9D0039A0  54430001   BNEL V0, V1, 0x9D0039A8
9D0039A4  26310001   ADDIU S1, S1, 1
9D0039A8  26D6FFFF   ADDIU S6, S6, -1
9D0039AC  2402FFFF   ADDIU V0, ZERO, -1
9D0039B0  16C2FFEE   BNE S6, V0, 0x9D00396C
9D0039B4  8FA20018   LW V0, 24(SP)
9D0039B8  8FA20020   LW V0, 32(SP)
9D0039BC  1040FE12   BEQ V0, ZERO, 0x9D003208
9D0039C0  02602825   OR A1, S3, ZERO
9D0039C4  5280FE11   BEQL S4, ZERO, 0x9D00320C
9D0039C8  80A40000   LB A0, 0(A1)
9D0039CC  2410FFFF   ADDIU S0, ZERO, -1
9D0039D0  02A02825   OR A1, S5, ZERO
9D0039D4  0F402052   JAL fputc
9D0039D8  24040020   ADDIU A0, ZERO, 32
9D0039DC  54500001   BNEL V0, S0, 0x9D0039E4
9D0039E0  26310001   ADDIU S1, S1, 1
9D0039E4  2694FFFF   ADDIU S4, S4, -1
9D0039E8  5680FFFA   BNEL S4, ZERO, 0x9D0039D4
9D0039EC  02A02825   OR A1, S5, ZERO
9D0039F0  1000FE05   BEQ ZERO, ZERO, 0x9D003208
9D0039F4  02602825   OR A1, S3, ZERO
9D0039F8  24020080   ADDIU V0, ZERO, 128
9D0039FC  10620013   BEQ V1, V0, 0x9D003A4C
9D003A00  00163080   SLL A2, S6, 2
9D003A04  240200C0   ADDIU V0, ZERO, 192
9D003A08  1462FFE2   BNE V1, V0, 0x9D003994
9D003A0C  83A40012   LB A0, 18(SP)
9D003A10  8FA30028   LW V1, 40(SP)
9D003A14  001610C0   SLL V0, S6, 3
9D003A18  02002025   OR A0, S0, ZERO
9D003A1C  00621021   ADDU V0, V1, V0
9D003A20  8C460000   LW A2, 0(V0)
9D003A24  8C470004   LW A3, 4(V0)
9D003A28  0F401B61   JAL __udivdi3
9D003A2C  03C02825   OR A1, FP, ZERO
9D003A30  00402025   OR A0, V0, ZERO
9D003A34  2406000A   ADDIU A2, ZERO, 10
9D003A38  00003825   OR A3, ZERO, ZERO
9D003A3C  0F401A63   JAL __umoddi3
9D003A40  00602825   OR A1, V1, ZERO
9D003A44  10000007   BEQ ZERO, ZERO, 0x9D003A64
9D003A48  24420030   ADDIU V0, V0, 48
9D003A4C  02002025   OR A0, S0, ZERO
9D003A50  0F4023EE   JAL __lshrdi3
9D003A54  03C02825   OR A1, FP, ZERO
9D003A58  3042000F   ANDI V0, V0, 15
9D003A5C  02E21021   ADDU V0, S7, V0
9D003A60  90420000   LBU V0, 0(V0)
9D003A64  1000FFCA   BEQ ZERO, ZERO, 0x9D003990
9D003A68  A3A20012   SB V0, 18(SP)
9D003A6C  00D63021   ADDU A2, A2, S6
9D003A70  02002025   OR A0, S0, ZERO
9D003A74  0F4023EE   JAL __lshrdi3
9D003A78  03C02825   OR A1, FP, ZERO
9D003A7C  1000FFF1   BEQ ZERO, ZERO, 0x9D003A44
9D003A80  30420007   ANDI V0, V0, 7
9D003A84  27BDFFA8   ADDIU SP, SP, -88
9D003A88  AFBE0050   SW FP, 80(SP)
9D003A8C  3C1E9D01   LUI FP, -25343
9D003A90  27C285C5   ADDIU V0, FP, -31291
9D003A94  AFA2001C   SW V0, 28(SP)
9D003A98  3C029D01   LUI V0, -25343
9D003A9C  2442909C   ADDIU V0, V0, -28516
9D003AA0  AFB50044   SW S5, 68(SP)
9D003AA4  AFB20038   SW S2, 56(SP)
9D003AA8  AFB10034   SW S1, 52(SP)
9D003AAC  AFBF0054   SW RA, 84(SP)
9D003AB0  AFB7004C   SW S7, 76(SP)
9D003AB4  AFB60048   SW S6, 72(SP)
9D003AB8  AFB40040   SW S4, 64(SP)
9D003ABC  AFB3003C   SW S3, 60(SP)
9D003AC0  AFB00030   SW S0, 48(SP)
9D003AC4  0080A825   OR S5, A0, ZERO
9D003AC8  00C09025   OR S2, A2, ZERO
9D003ACC  00008825   OR S1, ZERO, ZERO
9D003AD0  AFA2002C   SW V0, 44(SP)
9D003AD4  80A40000   LB A0, 0(A1)
9D003AD8  24B30001   ADDIU S3, A1, 1
9D003ADC  1480000E   BNE A0, ZERO, 0x9D003B18
9D003AE0  A3A40012   SB A0, 18(SP)
9D003AE4  8FBF0054   LW RA, 84(SP)
9D003AE8  02201025   OR V0, S1, ZERO
9D003AEC  8FBE0050   LW FP, 80(SP)
9D003AF0  8FB7004C   LW S7, 76(SP)
9D003AF4  8FB60048   LW S6, 72(SP)
9D003AF8  8FB50044   LW S5, 68(SP)
9D003AFC  8FB40040   LW S4, 64(SP)
9D003B00  8FB3003C   LW S3, 60(SP)
9D003B04  8FB20038   LW S2, 56(SP)
9D003B08  8FB10034   LW S1, 52(SP)
9D003B0C  8FB00030   LW S0, 48(SP)
9D003B10  03E00008   JR RA
9D003B14  27BD0058   ADDIU SP, SP, 88
9D003B18  24020025   ADDIU V0, ZERO, 37
9D003B1C  10820008   BEQ A0, V0, 0x9D003B40
9D003B20  0000B825   OR S7, ZERO, ZERO
9D003B24  0F402052   JAL fputc
9D003B28  02A02825   OR A1, S5, ZERO
9D003B2C  2403FFFF   ADDIU V1, ZERO, -1
9D003B30  54430001   BNEL V0, V1, 0x9D003B38
9D003B34  26310001   ADDIU S1, S1, 1
9D003B38  1000FFE6   BEQ ZERO, ZERO, 0x9D003AD4
9D003B3C  02602825   OR A1, S3, ZERO
9D003B40  2404002B   ADDIU A0, ZERO, 43
9D003B44  2406002D   ADDIU A2, ZERO, 45
9D003B48  24070030   ADDIU A3, ZERO, 48
9D003B4C  10000007   BEQ ZERO, ZERO, 0x9D003B6C
9D003B50  24080020   ADDIU T0, ZERO, 32
9D003B54  50460004   BEQL V0, A2, 0x9D003B68
9D003B58  36F70008   ORI S7, S7, 8
9D003B5C  5447000C   BNEL V0, A3, 0x9D003B90
9D003B60  32E40002   ANDI A0, S7, 2
9D003B64  36F70004   ORI S7, S7, 4
9D003B68  00A09825   OR S3, A1, ZERO
9D003B6C  82620000   LB V0, 0(S3)
9D003B70  10440035   BEQ V0, A0, 0x9D003C48
9D003B74  26650001   ADDIU A1, S3, 1
9D003B78  2849002C   SLTI T1, V0, 44
9D003B7C  1120FFF5   BEQ T1, ZERO, 0x9D003B54
9D003B80  00000000   NOP
9D003B84  5048FFF8   BEQL V0, T0, 0x9D003B68
9D003B88  36F70001   ORI S7, S7, 1
9D003B8C  32E40002   ANDI A0, S7, 2
9D003B90  54800001   BNEL A0, ZERO, 0x9D003B98
9D003B94  32F7FFFE   ANDI S7, S7, -2
9D003B98  32E40008   ANDI A0, S7, 8
9D003B9C  54800001   BNEL A0, ZERO, 0x9D003BA4
9D003BA0  32F7FFFB   ANDI S7, S7, -5
9D003BA4  8FA3001C   LW V1, 28(SP)
9D003BA8  00432021   ADDU A0, V0, V1
9D003BAC  90840000   LBU A0, 0(A0)
9D003BB0  30840004   ANDI A0, A0, 4
9D003BB4  50800026   BEQL A0, ZERO, 0x9D003C50
9D003BB8  2406002A   ADDIU A2, ZERO, 42
9D003BBC  00002025   OR A0, ZERO, ZERO
9D003BC0  2405000A   ADDIU A1, ZERO, 10
9D003BC4  70851802   MUL V1, A0, A1
9D003BC8  26730001   ADDIU S3, S3, 1
9D003BCC  8262FFFF   LB V0, -1(S3)
9D003BD0  00622021   ADDU A0, V1, V0
9D003BD4  82620000   LB V0, 0(S3)
9D003BD8  8FA3001C   LW V1, 28(SP)
9D003BDC  00621021   ADDU V0, V1, V0
9D003BE0  90420000   LBU V0, 0(V0)
9D003BE4  30420004   ANDI V0, V0, 4
9D003BE8  1440FFF6   BNE V0, ZERO, 0x9D003BC4
9D003BEC  2484FFD0   ADDIU A0, A0, -48
9D003BF0  82660000   LB A2, 0(S3)
9D003BF4  2402002E   ADDIU V0, ZERO, 46
9D003BF8  14C2001E   BNE A2, V0, 0x9D003C74
9D003BFC  00002825   OR A1, ZERO, ZERO
9D003C00  82660001   LB A2, 1(S3)
9D003C04  2402002A   ADDIU V0, ZERO, 42
9D003C08  10C20017   BEQ A2, V0, 0x9D003C68
9D003C0C  36F74000   ORI S7, S7, 16384
9D003C10  26730001   ADDIU S3, S3, 1
9D003C14  2408000A   ADDIU T0, ZERO, 10
9D003C18  82620000   LB V0, 0(S3)
9D003C1C  8FA3001C   LW V1, 28(SP)
9D003C20  00623021   ADDU A2, V1, V0
9D003C24  90C60000   LBU A2, 0(A2)
9D003C28  30C60004   ANDI A2, A2, 4
9D003C2C  10C00011   BEQ A2, ZERO, 0x9D003C74
9D003C30  26670001   ADDIU A3, S3, 1
9D003C34  70A81802   MUL V1, A1, T0
9D003C38  00E09825   OR S3, A3, ZERO
9D003C3C  00622821   ADDU A1, V1, V0
9D003C40  1000FFF5   BEQ ZERO, ZERO, 0x9D003C18
9D003C44  24A5FFD0   ADDIU A1, A1, -48
9D003C48  1000FFC7   BEQ ZERO, ZERO, 0x9D003B68
9D003C4C  36F70002   ORI S7, S7, 2
9D003C50  1446FFE7   BNE V0, A2, 0x9D003BF0
9D003C54  00002025   OR A0, ZERO, ZERO
9D003C58  8E440000   LW A0, 0(S2)
9D003C5C  00A09825   OR S3, A1, ZERO
9D003C60  1000FFE3   BEQ ZERO, ZERO, 0x9D003BF0
9D003C64  26520004   ADDIU S2, S2, 4
9D003C68  8E450000   LW A1, 0(S2)
9D003C6C  26730002   ADDIU S3, S3, 2
9D003C70  26520004   ADDIU S2, S2, 4
9D003C74  24080069   ADDIU T0, ZERO, 105
9D003C78  24090070   ADDIU T1, ZERO, 112
9D003C7C  240A006C   ADDIU T2, ZERO, 108
9D003C80  240B0058   ADDIU T3, ZERO, 88
9D003C84  240C004C   ADDIU T4, ZERO, 76
9D003C88  24078000   ADDIU A3, ZERO, -32768
9D003C8C  24060010   ADDIU A2, ZERO, 16
9D003C90  26730001   ADDIU S3, S3, 1
9D003C94  8262FFFF   LB V0, -1(S3)
9D003C98  10480014   BEQ V0, T0, 0x9D003CEC
9D003C9C  284D006A   SLTI T5, V0, 106
9D003CA0  11A00062   BEQ T5, ZERO, 0x9D003E2C
9D003CA4  00000000   NOP
9D003CA8  104B0096   BEQ V0, T3, 0x9D003F04
9D003CAC  284D0059   SLTI T5, V0, 89
9D003CB0  51A00009   BEQL T5, ZERO, 0x9D003CD8
9D003CB4  24060063   ADDIU A2, ZERO, 99
9D003CB8  1040FF8B   BEQ V0, ZERO, 0x9D003AE8
9D003CBC  8FBF0054   LW RA, 84(SP)
9D003CC0  504C008B   BEQL V0, T4, 0x9D003EF0
9D003CC4  32E20010   ANDI V0, S7, 16
9D003CC8  A3A20012   SB V0, 18(SP)
9D003CCC  27B00012   ADDIU S0, SP, 18
9D003CD0  10000077   BEQ ZERO, ZERO, 0x9D003EB0
9D003CD4  241E0001   ADDIU FP, ZERO, 1
9D003CD8  504600AD   BEQL V0, A2, 0x9D003F90
9D003CDC  8E460000   LW A2, 0(S2)
9D003CE0  24060064   ADDIU A2, ZERO, 100
9D003CE4  5446FFF9   BNEL V0, A2, 0x9D003CCC
9D003CE8  A3A20012   SB V0, 18(SP)
9D003CEC  A3A20012   SB V0, 18(SP)
9D003CF0  32E600C0   ANDI A2, S7, 192
9D003CF4  14C000C3   BNE A2, ZERO, 0x9D004004
9D003CF8  7C171620   SEH V0, S7
9D003CFC  044300BE   BGEZL V0, 0x9D003FF8
9D003D00  8E500000   LW S0, 0(S2)
9D003D04  26520007   ADDIU S2, S2, 7
9D003D08  02401025   OR V0, S2, ZERO
9D003D0C  7C021004   INS V0, ZERO, 0, 3
9D003D10  8C500000   LW S0, 0(V0)
9D003D14  8C5E0004   LW FP, 4(V0)
9D003D18  24520008   ADDIU S2, V0, 8
9D003D1C  07C10005   BGEZ FP, 0x9D003D34
9D003D20  001E4023   SUBU T0, ZERO, FP
9D003D24  00108023   SUBU S0, ZERO, S0
9D003D28  0010102B   SLTU V0, ZERO, S0
9D003D2C  36F70003   ORI S7, S7, 3
9D003D30  0102F023   SUBU FP, T0, V0
9D003D34  14A00003   BNE A1, ZERO, 0x9D003D44
9D003D38  32E200C0   ANDI V0, S7, 192
9D003D3C  021E2825   OR A1, S0, FP
9D003D40  2CA50001   SLTIU A1, A1, 1
9D003D44  AFA20018   SW V0, 24(SP)
9D003D48  32E300C0   ANDI V1, S7, 192
9D003D4C  24020040   ADDIU V0, ZERO, 64
9D003D50  106200F1   BEQ V1, V0, 0x9D004118
9D003D54  2C620041   SLTIU V0, V1, 65
9D003D58  104000B6   BEQ V0, ZERO, 0x9D004034
9D003D5C  24020080   ADDIU V0, ZERO, 128
9D003D60  106000BB   BEQ V1, ZERO, 0x9D004050
9D003D64  24020001   ADDIU V0, ZERO, 1
9D003D68  83B60012   LB S6, 18(SP)
9D003D6C  02C5102A   SLT V0, S6, A1
9D003D70  10400003   BEQ V0, ZERO, 0x9D003D80
9D003D74  00000000   NOP
9D003D78  A3A50012   SB A1, 18(SP)
9D003D7C  00A0B025   OR S6, A1, ZERO
9D003D80  10800005   BEQ A0, ZERO, 0x9D003D98
9D003D84  32E24000   ANDI V0, S7, 16384
9D003D88  32E20003   ANDI V0, S7, 3
9D003D8C  54400001   BNEL V0, ZERO, 0x9D003D94
9D003D90  2484FFFF   ADDIU A0, A0, -1
9D003D94  32E24000   ANDI V0, S7, 16384
9D003D98  10400006   BEQ V0, ZERO, 0x9D003DB4
9D003D9C  83A20012   LB V0, 18(SP)
9D003DA0  02C4102A   SLT V0, S6, A0
9D003DA4  14400002   BNE V0, ZERO, 0x9D003DB0
9D003DA8  00962023   SUBU A0, A0, S6
9D003DAC  00002025   OR A0, ZERO, ZERO
9D003DB0  83A20012   LB V0, 18(SP)
9D003DB4  0044282A   SLT A1, V0, A0
9D003DB8  10A00002   BEQ A1, ZERO, 0x9D003DC4
9D003DBC  0000A025   OR S4, ZERO, ZERO
9D003DC0  0082A023   SUBU S4, A0, V0
9D003DC4  32E20008   ANDI V0, S7, 8
9D003DC8  AFA20020   SW V0, 32(SP)
9D003DCC  32E20004   ANDI V0, S7, 4
9D003DD0  32E70002   ANDI A3, S7, 2
9D003DD4  104000EC   BEQ V0, ZERO, 0x9D004188
9D003DD8  32E60001   ANDI A2, S7, 1
9D003DDC  10E000E6   BEQ A3, ZERO, 0x9D004178
9D003DE0  2404002D   ADDIU A0, ZERO, 45
9D003DE4  2402002B   ADDIU V0, ZERO, 43
9D003DE8  02A02825   OR A1, S5, ZERO
9D003DEC  0046200A   MOVZ A0, V0, A2
9D003DF0  0F402052   JAL fputc
9D003DF4  00000000   NOP
9D003DF8  2404FFFF   ADDIU A0, ZERO, -1
9D003DFC  54440001   BNEL V0, A0, 0x9D003E04
9D003E00  26310001   ADDIU S1, S1, 1
9D003E04  128000FB   BEQ S4, ZERO, 0x9D0041F4
9D003E08  8FA4002C   LW A0, 44(SP)
9D003E0C  02A02825   OR A1, S5, ZERO
9D003E10  0F402052   JAL fputc
9D003E14  24040030   ADDIU A0, ZERO, 48
9D003E18  2406FFFF   ADDIU A2, ZERO, -1
9D003E1C  54460001   BNEL V0, A2, 0x9D003E24
9D003E20  26310001   ADDIU S1, S1, 1
9D003E24  1000FFF7   BEQ ZERO, ZERO, 0x9D003E04
9D003E28  2694FFFF   ADDIU S4, S4, -1
9D003E2C  10490035   BEQ V0, T1, 0x9D003F04
9D003E30  284D0071   SLTI T5, V0, 113
9D003E34  51A00008   BEQL T5, ZERO, 0x9D003E58
9D003E38  24060075   ADDIU A2, ZERO, 117
9D003E3C  504A002C   BEQL V0, T2, 0x9D003EF0
9D003E40  32E20010   ANDI V0, S7, 16
9D003E44  2406006F   ADDIU A2, ZERO, 111
9D003E48  1446FFA0   BNE V0, A2, 0x9D003CCC
9D003E4C  A3A20012   SB V0, 18(SP)
9D003E50  1000FFA7   BEQ ZERO, ZERO, 0x9D003CF0
9D003E54  36F70040   ORI S7, S7, 64
9D003E58  10460064   BEQ V0, A2, 0x9D003FEC
9D003E5C  24060078   ADDIU A2, ZERO, 120
9D003E60  10460020   BEQ V0, A2, 0x9D003EE4
9D003E64  24060073   ADDIU A2, ZERO, 115
9D003E68  5446FF98   BNEL V0, A2, 0x9D003CCC
9D003E6C  A3A20012   SB V0, 18(SP)
9D003E70  8E500000   LW S0, 0(S2)
9D003E74  A3A20012   SB V0, 18(SP)
9D003E78  16000003   BNE S0, ZERO, 0x9D003E88
9D003E7C  26470004   ADDIU A3, S2, 4
9D003E80  3C109D01   LUI S0, -25343
9D003E84  26109094   ADDIU S0, S0, -28524
9D003E88  00001025   OR V0, ZERO, ZERO
9D003E8C  00004025   OR T0, ZERO, ZERO
9D003E90  24460001   ADDIU A2, V0, 1
9D003E94  02064821   ADDU T1, S0, A2
9D003E98  8129FFFF   LB T1, -1(T1)
9D003E9C  5520001C   BNEL T1, ZERO, 0x9D003F10
9D003EA0  00C01025   OR V0, A2, ZERO
9D003EA4  0008100A   MOVZ V0, ZERO, T0
9D003EA8  0040F025   OR FP, V0, ZERO
9D003EAC  00E09025   OR S2, A3, ZERO
9D003EB0  10A00004   BEQ A1, ZERO, 0x9D003EC4
9D003EB4  03C4102B   SLTU V0, FP, A0
9D003EB8  00BE102B   SLTU V0, A1, FP
9D003EBC  00A2F00B   MOVN FP, A1, V0
9D003EC0  03C4102B   SLTU V0, FP, A0
9D003EC4  10400002   BEQ V0, ZERO, 0x9D003ED0
9D003EC8  0000B025   OR S6, ZERO, ZERO
9D003ECC  009EB023   SUBU S6, A0, FP
9D003ED0  32F40008   ANDI S4, S7, 8
9D003ED4  12800014   BEQ S4, ZERO, 0x9D003F28
9D003ED8  2417FFFF   ADDIU S7, ZERO, -1
9D003EDC  1000001E   BEQ ZERO, ZERO, 0x9D003F58
9D003EE0  03C01025   OR V0, FP, ZERO
9D003EE4  A3A20012   SB V0, 18(SP)
9D003EE8  1000FF81   BEQ ZERO, ZERO, 0x9D003CF0
9D003EEC  36F70080   ORI S7, S7, 128
9D003EF0  00C01825   OR V1, A2, ZERO
9D003EF4  00E2180B   MOVN V1, A3, V0
9D003EF8  00771825   OR V1, V1, S7
9D003EFC  1000FF64   BEQ ZERO, ZERO, 0x9D003C90
9D003F00  3077FFFF   ANDI S7, V1, -1
9D003F04  A3A20012   SB V0, 18(SP)
9D003F08  1000FFF7   BEQ ZERO, ZERO, 0x9D003EE8
9D003F0C  36F70020   ORI S7, S7, 32
9D003F10  1000FFDF   BEQ ZERO, ZERO, 0x9D003E90
9D003F14  24080001   ADDIU T0, ZERO, 1
9D003F18  0F402052   JAL fputc
9D003F1C  24040020   ADDIU A0, ZERO, 32
9D003F20  54570001   BNEL V0, S7, 0x9D003F28
9D003F24  26310001   ADDIU S1, S1, 1
9D003F28  26D6FFFF   ADDIU S6, S6, -1
9D003F2C  16D7FFFA   BNE S6, S7, 0x9D003F18
9D003F30  02A02825   OR A1, S5, ZERO
9D003F34  10000007   BEQ ZERO, ZERO, 0x9D003F54
9D003F38  2417FFFF   ADDIU S7, ZERO, -1
9D003F3C  82040000   LB A0, 0(S0)
9D003F40  02A02825   OR A1, S5, ZERO
9D003F44  0F402052   JAL fputc
9D003F48  26100001   ADDIU S0, S0, 1
9D003F4C  54570001   BNEL V0, S7, 0x9D003F54
9D003F50  26310001   ADDIU S1, S1, 1
9D003F54  03C01025   OR V0, FP, ZERO
9D003F58  1440FFF8   BNE V0, ZERO, 0x9D003F3C
9D003F5C  27DEFFFF   ADDIU FP, FP, -1
9D003F60  1280FEF5   BEQ S4, ZERO, 0x9D003B38
9D003F64  2410FFFF   ADDIU S0, ZERO, -1
9D003F68  26D6FFFF   ADDIU S6, S6, -1
9D003F6C  12D0FED9   BEQ S6, S0, 0x9D003AD4
9D003F70  02602825   OR A1, S3, ZERO
9D003F74  02A02825   OR A1, S5, ZERO
9D003F78  0F402052   JAL fputc
9D003F7C  24040020   ADDIU A0, ZERO, 32
9D003F80  5450FFF9   BNEL V0, S0, 0x9D003F68
9D003F84  26310001   ADDIU S1, S1, 1
9D003F88  1000FFF8   BEQ ZERO, ZERO, 0x9D003F6C
9D003F8C  26D6FFFF   ADDIU S6, S6, -1
9D003F90  96470000   LHU A3, 0(S2)
9D003F94  26490004   ADDIU T1, S2, 4
9D003F98  000647C3   SRA T0, A2, 31
9D003F9C  00084600   SLL T0, T0, 24
9D003FA0  00061202   SRL V0, A2, 8
9D003FA4  01021025   OR V0, T0, V0
9D003FA8  32E80010   ANDI T0, S7, 16
9D003FAC  7C0738A0   WSBH A3, A3
9D003FB0  1100000B   BEQ T0, ZERO, 0x9D003FE0
9D003FB4  A3A20012   SB V0, 18(SP)
9D003FB8  24420001   ADDIU V0, V0, 1
9D003FBC  304200FF   ANDI V0, V0, 255
9D003FC0  2C420002   SLTIU V0, V0, 2
9D003FC4  54400007   BNEL V0, ZERO, 0x9D003FE4
9D003FC8  A3A60010   SB A2, 16(SP)
9D003FCC  A7A70010   SH A3, 16(SP)
9D003FD0  241E0002   ADDIU FP, ZERO, 2
9D003FD4  27B00010   ADDIU S0, SP, 16
9D003FD8  1000FFB5   BEQ ZERO, ZERO, 0x9D003EB0
9D003FDC  01209025   OR S2, T1, ZERO
9D003FE0  A3A60010   SB A2, 16(SP)
9D003FE4  1000FFFB   BEQ ZERO, ZERO, 0x9D003FD4
9D003FE8  241E0001   ADDIU FP, ZERO, 1
9D003FEC  A3A20012   SB V0, 18(SP)
9D003FF0  1000FF3F   BEQ ZERO, ZERO, 0x9D003CF0
9D003FF4  36F700C0   ORI S7, S7, 192
9D003FF8  26520004   ADDIU S2, S2, 4
9D003FFC  1000FF47   BEQ ZERO, ZERO, 0x9D003D1C
9D004000  0010F7C3   SRA FP, S0, 31
9D004004  04430008   BGEZL V0, 0x9D004028
9D004008  8E500000   LW S0, 0(S2)
9D00400C  26520007   ADDIU S2, S2, 7
9D004010  02401025   OR V0, S2, ZERO
9D004014  7C021004   INS V0, ZERO, 0, 3
9D004018  24520008   ADDIU S2, V0, 8
9D00401C  8C500000   LW S0, 0(V0)
9D004020  1000FF44   BEQ ZERO, ZERO, 0x9D003D34
9D004024  8C5E0004   LW FP, 4(V0)
9D004028  0000F025   OR FP, ZERO, ZERO
9D00402C  1000FF41   BEQ ZERO, ZERO, 0x9D003D34
9D004030  26520004   ADDIU S2, S2, 4
9D004034  32E300C0   ANDI V1, S7, 192
9D004038  1062001C   BEQ V1, V0, 0x9D0040AC
9D00403C  24020001   ADDIU V0, ZERO, 1
9D004040  240200C0   ADDIU V0, ZERO, 192
9D004044  1462FF49   BNE V1, V0, 0x9D003D6C
9D004048  83B60012   LB S6, 18(SP)
9D00404C  24020001   ADDIU V0, ZERO, 1
9D004050  A3A20012   SB V0, 18(SP)
9D004054  3C029D01   LUI V0, -25343
9D004058  244288E8   ADDIU V0, V0, -30488
9D00405C  24060001   ADDIU A2, ZERO, 1
9D004060  00003825   OR A3, ZERO, ZERO
9D004064  240C0014   ADDIU T4, ZERO, 20
9D004068  10CC000C   BEQ A2, T4, 0x9D00409C
9D00406C  7C065420   SEB T2, A2
9D004070  8C4B000C   LW T3, 12(V0)
9D004074  8C490008   LW T1, 8(V0)
9D004078  24C60001   ADDIU A2, A2, 1
9D00407C  03CB682B   SLTU T5, FP, T3
9D004080  15A00006   BNE T5, ZERO, 0x9D00409C
9D004084  24420008   ADDIU V0, V0, 8
9D004088  557EFFF7   BNEL T3, FP, 0x9D004068
9D00408C  24070001   ADDIU A3, ZERO, 1
9D004090  0209482B   SLTU T1, S0, T1
9D004094  5120FFF4   BEQL T1, ZERO, 0x9D004068
9D004098  24070001   ADDIU A3, ZERO, 1
9D00409C  54E0FF32   BNEL A3, ZERO, 0x9D003D68
9D0040A0  A3AA0012   SB T2, 18(SP)
9D0040A4  1000FF31   BEQ ZERO, ZERO, 0x9D003D6C
9D0040A8  83B60012   LB S6, 18(SP)
9D0040AC  A3A20012   SB V0, 18(SP)
9D0040B0  00003825   OR A3, ZERO, ZERO
9D0040B4  24020001   ADDIU V0, ZERO, 1
9D0040B8  24090010   ADDIU T1, ZERO, 16
9D0040BC  00003025   OR A2, ZERO, ZERO
9D0040C0  240B0010   ADDIU T3, ZERO, 16
9D0040C4  144B0005   BNE V0, T3, 0x9D0040DC
9D0040C8  7C025420   SEB T2, V0
9D0040CC  54E0FF26   BNEL A3, ZERO, 0x9D003D68
9D0040D0  A3A20012   SB V0, 18(SP)
9D0040D4  1000FF25   BEQ ZERO, ZERO, 0x9D003D6C
9D0040D8  83B60012   LB S6, 18(SP)
9D0040DC  24420001   ADDIU V0, V0, 1
9D0040E0  03C6602B   SLTU T4, FP, A2
9D0040E4  1580FFED   BNE T4, ZERO, 0x9D00409C
9D0040E8  304200FF   ANDI V0, V0, 255
9D0040EC  54DE0005   BNEL A2, FP, 0x9D004104
9D0040F0  00095702   SRL T2, T1, 28
9D0040F4  0209602B   SLTU T4, S0, T1
9D0040F8  1580FFE8   BNE T4, ZERO, 0x9D00409C
9D0040FC  00000000   NOP
9D004100  00095702   SRL T2, T1, 28
9D004104  00063900   SLL A3, A2, 4
9D004108  01473025   OR A2, T2, A3
9D00410C  00094900   SLL T1, T1, 4
9D004110  1000FFEC   BEQ ZERO, ZERO, 0x9D0040C4
9D004114  24070001   ADDIU A3, ZERO, 1
9D004118  24020001   ADDIU V0, ZERO, 1
9D00411C  A3A20012   SB V0, 18(SP)
9D004120  00003825   OR A3, ZERO, ZERO
9D004124  24020001   ADDIU V0, ZERO, 1
9D004128  24090008   ADDIU T1, ZERO, 8
9D00412C  00003025   OR A2, ZERO, ZERO
9D004130  240B0015   ADDIU T3, ZERO, 21
9D004134  104BFFE5   BEQ V0, T3, 0x9D0040CC
9D004138  7C025420   SEB T2, V0
9D00413C  24420001   ADDIU V0, V0, 1
9D004140  03C6602B   SLTU T4, FP, A2
9D004144  1580FFD5   BNE T4, ZERO, 0x9D00409C
9D004148  304200FF   ANDI V0, V0, 255
9D00414C  54DE0005   BNEL A2, FP, 0x9D004164
9D004150  00095742   SRL T2, T1, 29
9D004154  0209602B   SLTU T4, S0, T1
9D004158  1580FFD0   BNE T4, ZERO, 0x9D00409C
9D00415C  00000000   NOP
9D004160  00095742   SRL T2, T1, 29
9D004164  000638C0   SLL A3, A2, 3
9D004168  01473025   OR A2, T2, A3
9D00416C  000948C0   SLL T1, T1, 3
9D004170  1000FFF0   BEQ ZERO, ZERO, 0x9D004134
9D004174  24070001   ADDIU A3, ZERO, 1
9D004178  10C0FF22   BEQ A2, ZERO, 0x9D003E04
9D00417C  02A02825   OR A1, S5, ZERO
9D004180  1000FF1B   BEQ ZERO, ZERO, 0x9D003DF0
9D004184  24040020   ADDIU A0, ZERO, 32
9D004188  1280000F   BEQ S4, ZERO, 0x9D0041C8
9D00418C  32E20008   ANDI V0, S7, 8
9D004190  1440000D   BNE V0, ZERO, 0x9D0041C8
9D004194  02A02825   OR A1, S5, ZERO
9D004198  24040020   ADDIU A0, ZERO, 32
9D00419C  AFA60028   SW A2, 40(SP)
9D0041A0  0F402052   JAL fputc
9D0041A4  AFA70024   SW A3, 36(SP)
9D0041A8  2409FFFF   ADDIU T1, ZERO, -1
9D0041AC  8FA70024   LW A3, 36(SP)
9D0041B0  10490002   BEQ V0, T1, 0x9D0041BC
9D0041B4  8FA60028   LW A2, 40(SP)
9D0041B8  26310001   ADDIU S1, S1, 1
9D0041BC  2694FFFF   ADDIU S4, S4, -1
9D0041C0  1680FFF5   BNE S4, ZERO, 0x9D004198
9D0041C4  02A02825   OR A1, S5, ZERO
9D0041C8  10E00016   BEQ A3, ZERO, 0x9D004224
9D0041CC  2404002D   ADDIU A0, ZERO, 45
9D0041D0  2402002B   ADDIU V0, ZERO, 43
9D0041D4  02A02825   OR A1, S5, ZERO
9D0041D8  0046200A   MOVZ A0, V0, A2
9D0041DC  0F402052   JAL fputc
9D0041E0  00000000   NOP
9D0041E4  2404FFFF   ADDIU A0, ZERO, -1
9D0041E8  54440001   BNEL V0, A0, 0x9D0041F0
9D0041EC  26310001   ADDIU S1, S1, 1
9D0041F0  8FA4002C   LW A0, 44(SP)
9D0041F4  3C029D01   LUI V0, -25343
9D0041F8  32E30020   ANDI V1, S7, 32
9D0041FC  244290B0   ADDIU V0, V0, -28496
9D004200  0083100B   MOVN V0, A0, V1
9D004204  0040B825   OR S7, V0, ZERO
9D004208  8FA20018   LW V0, 24(SP)
9D00420C  2C420041   SLTIU V0, V0, 65
9D004210  AFA20024   SW V0, 36(SP)
9D004214  3C029D01   LUI V0, -25343
9D004218  244288E8   ADDIU V0, V0, -30488
9D00421C  10000015   BEQ ZERO, ZERO, 0x9D004274
9D004220  AFA20028   SW V0, 40(SP)
9D004224  50C0FFF3   BEQL A2, ZERO, 0x9D0041F4
9D004228  8FA4002C   LW A0, 44(SP)
9D00422C  02A02825   OR A1, S5, ZERO
9D004230  1000FFEA   BEQ ZERO, ZERO, 0x9D0041DC
9D004234  24040020   ADDIU A0, ZERO, 32
9D004238  24030040   ADDIU V1, ZERO, 64
9D00423C  1043003E   BEQ V0, V1, 0x9D004338
9D004240  00163040   SLL A2, S6, 1
9D004244  8FA20024   LW V0, 36(SP)
9D004248  1040001E   BEQ V0, ZERO, 0x9D0042C4
9D00424C  8FA30018   LW V1, 24(SP)
9D004250  8FA20018   LW V0, 24(SP)
9D004254  10400022   BEQ V0, ZERO, 0x9D0042E0
9D004258  8FA30028   LW V1, 40(SP)
9D00425C  83A40012   LB A0, 18(SP)
9D004260  0F402052   JAL fputc
9D004264  02A02825   OR A1, S5, ZERO
9D004268  2403FFFF   ADDIU V1, ZERO, -1
9D00426C  54430001   BNEL V0, V1, 0x9D004274
9D004270  26310001   ADDIU S1, S1, 1
9D004274  26D6FFFF   ADDIU S6, S6, -1
9D004278  2402FFFF   ADDIU V0, ZERO, -1
9D00427C  16C2FFEE   BNE S6, V0, 0x9D004238
9D004280  8FA20018   LW V0, 24(SP)
9D004284  8FA20020   LW V0, 32(SP)
9D004288  1040FE12   BEQ V0, ZERO, 0x9D003AD4
9D00428C  02602825   OR A1, S3, ZERO
9D004290  5280FE11   BEQL S4, ZERO, 0x9D003AD8
9D004294  80A40000   LB A0, 0(A1)
9D004298  2410FFFF   ADDIU S0, ZERO, -1
9D00429C  02A02825   OR A1, S5, ZERO
9D0042A0  0F402052   JAL fputc
9D0042A4  24040020   ADDIU A0, ZERO, 32
9D0042A8  54500001   BNEL V0, S0, 0x9D0042B0
9D0042AC  26310001   ADDIU S1, S1, 1
9D0042B0  2694FFFF   ADDIU S4, S4, -1
9D0042B4  5680FFFA   BNEL S4, ZERO, 0x9D0042A0
9D0042B8  02A02825   OR A1, S5, ZERO
9D0042BC  1000FE05   BEQ ZERO, ZERO, 0x9D003AD4
9D0042C0  02602825   OR A1, S3, ZERO
9D0042C4  24020080   ADDIU V0, ZERO, 128
9D0042C8  10620013   BEQ V1, V0, 0x9D004318
9D0042CC  00163080   SLL A2, S6, 2
9D0042D0  240200C0   ADDIU V0, ZERO, 192
9D0042D4  1462FFE2   BNE V1, V0, 0x9D004260
9D0042D8  83A40012   LB A0, 18(SP)
9D0042DC  8FA30028   LW V1, 40(SP)
9D0042E0  001610C0   SLL V0, S6, 3
9D0042E4  02002025   OR A0, S0, ZERO
9D0042E8  00621021   ADDU V0, V1, V0
9D0042EC  8C460000   LW A2, 0(V0)
9D0042F0  8C470004   LW A3, 4(V0)
9D0042F4  0F401B61   JAL __udivdi3
9D0042F8  03C02825   OR A1, FP, ZERO
9D0042FC  00402025   OR A0, V0, ZERO
9D004300  2406000A   ADDIU A2, ZERO, 10
9D004304  00003825   OR A3, ZERO, ZERO
9D004308  0F401A63   JAL __umoddi3
9D00430C  00602825   OR A1, V1, ZERO
9D004310  10000007   BEQ ZERO, ZERO, 0x9D004330
9D004314  24420030   ADDIU V0, V0, 48
9D004318  02002025   OR A0, S0, ZERO
9D00431C  0F4023EE   JAL __lshrdi3
9D004320  03C02825   OR A1, FP, ZERO
9D004324  3042000F   ANDI V0, V0, 15
9D004328  02E21021   ADDU V0, S7, V0
9D00432C  90420000   LBU V0, 0(V0)
9D004330  1000FFCA   BEQ ZERO, ZERO, 0x9D00425C
9D004334  A3A20012   SB V0, 18(SP)
9D004338  00D63021   ADDU A2, A2, S6
9D00433C  02002025   OR A0, S0, ZERO
9D004340  0F4023EE   JAL __lshrdi3
9D004344  03C02825   OR A1, FP, ZERO
9D004348  1000FFF1   BEQ ZERO, ZERO, 0x9D004310
9D00434C  30420007   ANDI V0, V0, 7
9D004350  27BDFFB0   ADDIU SP, SP, -80
9D004354  3C029D01   LUI V0, -25343
9D004358  AFB60040   SW S6, 64(SP)
9D00435C  244291A0   ADDIU V0, V0, -28256
9D004360  3C169D01   LUI S6, -25343
9D004364  AFB40038   SW S4, 56(SP)
9D004368  AFB20030   SW S2, 48(SP)
9D00436C  AFB00028   SW S0, 40(SP)
9D004370  AFBF004C   SW RA, 76(SP)
9D004374  AFBE0048   SW FP, 72(SP)
9D004378  AFB70044   SW S7, 68(SP)
9D00437C  AFB5003C   SW S5, 60(SP)
9D004380  AFB30034   SW S3, 52(SP)
9D004384  AFB1002C   SW S1, 44(SP)
9D004388  0080A025   OR S4, A0, ZERO
9D00438C  00C09025   OR S2, A2, ZERO
9D004390  00008025   OR S0, ZERO, ZERO
9D004394  26D685C5   ADDIU S6, S6, -31291
9D004398  AFA20020   SW V0, 32(SP)
9D00439C  80A40000   LB A0, 0(A1)
9D0043A0  24B10001   ADDIU S1, A1, 1
9D0043A4  10800063   BEQ A0, ZERO, 0x9D004534
9D0043A8  A3A40012   SB A0, 18(SP)
9D0043AC  24020025   ADDIU V0, ZERO, 37
9D0043B0  10820008   BEQ A0, V0, 0x9D0043D4
9D0043B4  00001025   OR V0, ZERO, ZERO
9D0043B8  0F402052   JAL fputc
9D0043BC  02802825   OR A1, S4, ZERO
9D0043C0  2403FFFF   ADDIU V1, ZERO, -1
9D0043C4  54430001   BNEL V0, V1, 0x9D0043CC
9D0043C8  26100001   ADDIU S0, S0, 1
9D0043CC  1000FFF3   BEQ ZERO, ZERO, 0x9D00439C
9D0043D0  02202825   OR A1, S1, ZERO
9D0043D4  2404002B   ADDIU A0, ZERO, 43
9D0043D8  2406002D   ADDIU A2, ZERO, 45
9D0043DC  24070030   ADDIU A3, ZERO, 48
9D0043E0  10000007   BEQ ZERO, ZERO, 0x9D004400
9D0043E4  24080020   ADDIU T0, ZERO, 32
9D0043E8  50660004   BEQL V1, A2, 0x9D0043FC
9D0043EC  34420008   ORI V0, V0, 8
9D0043F0  5467000C   BNEL V1, A3, 0x9D004424
9D0043F4  30440002   ANDI A0, V0, 2
9D0043F8  34420004   ORI V0, V0, 4
9D0043FC  00A08825   OR S1, A1, ZERO
9D004400  82230000   LB V1, 0(S1)
9D004404  10640032   BEQ V1, A0, 0x9D0044D0
9D004408  26250001   ADDIU A1, S1, 1
9D00440C  2869002C   SLTI T1, V1, 44
9D004410  1120FFF5   BEQ T1, ZERO, 0x9D0043E8
9D004414  00000000   NOP
9D004418  5068FFF8   BEQL V1, T0, 0x9D0043FC
9D00441C  34420001   ORI V0, V0, 1
9D004420  30440002   ANDI A0, V0, 2
9D004424  54800001   BNEL A0, ZERO, 0x9D00442C
9D004428  304200FE   ANDI V0, V0, 254
9D00442C  30440008   ANDI A0, V0, 8
9D004430  54800001   BNEL A0, ZERO, 0x9D004438
9D004434  304200FB   ANDI V0, V0, 251
9D004438  00762021   ADDU A0, V1, S6
9D00443C  90840000   LBU A0, 0(A0)
9D004440  30840004   ANDI A0, A0, 4
9D004444  10800024   BEQ A0, ZERO, 0x9D0044D8
9D004448  2406002A   ADDIU A2, ZERO, 42
9D00444C  00002025   OR A0, ZERO, ZERO
9D004450  2405000A   ADDIU A1, ZERO, 10
9D004454  70853002   MUL A2, A0, A1
9D004458  26310001   ADDIU S1, S1, 1
9D00445C  8223FFFF   LB V1, -1(S1)
9D004460  00C32021   ADDU A0, A2, V1
9D004464  82230000   LB V1, 0(S1)
9D004468  02C31821   ADDU V1, S6, V1
9D00446C  90630000   LBU V1, 0(V1)
9D004470  30630004   ANDI V1, V1, 4
9D004474  1460FFF7   BNE V1, ZERO, 0x9D004454
9D004478  2484FFD0   ADDIU A0, A0, -48
9D00447C  82260000   LB A2, 0(S1)
9D004480  2403002E   ADDIU V1, ZERO, 46
9D004484  14C3001C   BNE A2, V1, 0x9D0044F8
9D004488  00002825   OR A1, ZERO, ZERO
9D00448C  82260001   LB A2, 1(S1)
9D004490  2403002A   ADDIU V1, ZERO, 42
9D004494  50C30016   BEQL A2, V1, 0x9D0044F0
9D004498  8E450000   LW A1, 0(S2)
9D00449C  26310001   ADDIU S1, S1, 1
9D0044A0  2408000A   ADDIU T0, ZERO, 10
9D0044A4  82230000   LB V1, 0(S1)
9D0044A8  02C33021   ADDU A2, S6, V1
9D0044AC  90C60000   LBU A2, 0(A2)
9D0044B0  30C60004   ANDI A2, A2, 4
9D0044B4  10C00010   BEQ A2, ZERO, 0x9D0044F8
9D0044B8  26270001   ADDIU A3, S1, 1
9D0044BC  70A83002   MUL A2, A1, T0
9D0044C0  00E08825   OR S1, A3, ZERO
9D0044C4  00C32821   ADDU A1, A2, V1
9D0044C8  1000FFF6   BEQ ZERO, ZERO, 0x9D0044A4
9D0044CC  24A5FFD0   ADDIU A1, A1, -48
9D0044D0  1000FFCA   BEQ ZERO, ZERO, 0x9D0043FC
9D0044D4  34420002   ORI V0, V0, 2
9D0044D8  1466FFE8   BNE V1, A2, 0x9D00447C
9D0044DC  00002025   OR A0, ZERO, ZERO
9D0044E0  8E440000   LW A0, 0(S2)
9D0044E4  00A08825   OR S1, A1, ZERO
9D0044E8  1000FFE4   BEQ ZERO, ZERO, 0x9D00447C
9D0044EC  26520004   ADDIU S2, S2, 4
9D0044F0  26310002   ADDIU S1, S1, 2
9D0044F4  26520004   ADDIU S2, S2, 4
9D0044F8  2406006C   ADDIU A2, ZERO, 108
9D0044FC  2407004C   ADDIU A3, ZERO, 76
9D004500  26310001   ADDIU S1, S1, 1
9D004504  8223FFFF   LB V1, -1(S1)
9D004508  1066003C   BEQ V1, A2, 0x9D0045FC
9D00450C  2868006D   SLTI T0, V1, 109
9D004510  51000015   BEQL T0, ZERO, 0x9D004568
9D004514  24060075   ADDIU A2, ZERO, 117
9D004518  50670039   BEQL V1, A3, 0x9D004600
9D00451C  30430010   ANDI V1, V0, 16
9D004520  24060063   ADDIU A2, ZERO, 99
9D004524  506600A5   BEQL V1, A2, 0x9D0047BC
9D004528  8E460000   LW A2, 0(S2)
9D00452C  546000BA   BNEL V1, ZERO, 0x9D004818
9D004530  A3A30012   SB V1, 18(SP)
9D004534  8FBF004C   LW RA, 76(SP)
9D004538  02001025   OR V0, S0, ZERO
9D00453C  8FBE0048   LW FP, 72(SP)
9D004540  8FB70044   LW S7, 68(SP)
9D004544  8FB60040   LW S6, 64(SP)
9D004548  8FB5003C   LW S5, 60(SP)
9D00454C  8FB40038   LW S4, 56(SP)
9D004550  8FB30034   LW S3, 52(SP)
9D004554  8FB20030   LW S2, 48(SP)
9D004558  8FB1002C   LW S1, 44(SP)
9D00455C  8FB00028   LW S0, 40(SP)
9D004560  03E00008   JR RA
9D004564  27BD0050   ADDIU SP, SP, 80
9D004568  106600AE   BEQ V1, A2, 0x9D004824
9D00456C  24060078   ADDIU A2, ZERO, 120
9D004570  10660027   BEQ V1, A2, 0x9D004610
9D004574  24060073   ADDIU A2, ZERO, 115
9D004578  546600A7   BNEL V1, A2, 0x9D004818
9D00457C  A3A30012   SB V1, 18(SP)
9D004580  8E460000   LW A2, 0(S2)
9D004584  A3A30012   SB V1, 18(SP)
9D004588  26480004   ADDIU T0, S2, 4
9D00458C  14C00003   BNE A2, ZERO, 0x9D00459C
9D004590  00C0B825   OR S7, A2, ZERO
9D004594  3C069D01   LUI A2, -25343
9D004598  24D79198   ADDIU S7, A2, -28264
9D00459C  00001825   OR V1, ZERO, ZERO
9D0045A0  00009825   OR S3, ZERO, ZERO
9D0045A4  24670001   ADDIU A3, V1, 1
9D0045A8  02E74821   ADDU T1, S7, A3
9D0045AC  8129FFFF   LB T1, -1(T1)
9D0045B0  55200061   BNEL T1, ZERO, 0x9D004738
9D0045B4  00E01825   OR V1, A3, ZERO
9D0045B8  0013180A   MOVZ V1, ZERO, S3
9D0045BC  00609825   OR S3, V1, ZERO
9D0045C0  01009025   OR S2, T0, ZERO
9D0045C4  10A00004   BEQ A1, ZERO, 0x9D0045D8
9D0045C8  0264182B   SLTU V1, S3, A0
9D0045CC  00B3182B   SLTU V1, A1, S3
9D0045D0  00A3980B   MOVN S3, A1, V1
9D0045D4  0264182B   SLTU V1, S3, A0
9D0045D8  10600002   BEQ V1, ZERO, 0x9D0045E4
9D0045DC  0000A825   OR S5, ZERO, ZERO
9D0045E0  0093A823   SUBU S5, A0, S3
9D0045E4  30420008   ANDI V0, V0, 8
9D0045E8  AFA20018   SW V0, 24(SP)
9D0045EC  10400058   BEQ V0, ZERO, 0x9D004750
9D0045F0  241EFFFF   ADDIU FP, ZERO, -1
9D0045F4  10000062   BEQ ZERO, ZERO, 0x9D004780
9D0045F8  02601025   OR V0, S3, ZERO
9D0045FC  30430010   ANDI V1, V0, 16
9D004600  2C630001   SLTIU V1, V1, 1
9D004604  00031900   SLL V1, V1, 4
9D004608  1000FFBD   BEQ ZERO, ZERO, 0x9D004500
9D00460C  00621025   OR V0, V1, V0
9D004610  A3A30012   SB V1, 18(SP)
9D004614  34420080   ORI V0, V0, 128
9D004618  8E570000   LW S7, 0(S2)
9D00461C  14A00002   BNE A1, ZERO, 0x9D004628
9D004620  26520004   ADDIU S2, S2, 4
9D004624  2EE50001   SLTIU A1, S7, 1
9D004628  305E00C0   ANDI FP, V0, 192
9D00462C  24030080   ADDIU V1, ZERO, 128
9D004630  13C3007F   BEQ FP, V1, 0x9D004830
9D004634  240300C0   ADDIU V1, ZERO, 192
9D004638  17C30015   BNE FP, V1, 0x9D004690
9D00463C  83B50012   LB S5, 18(SP)
9D004640  24030001   ADDIU V1, ZERO, 1
9D004644  A3A30012   SB V1, 18(SP)
9D004648  3C039D01   LUI V1, -25343
9D00464C  24638988   ADDIU V1, V1, -30328
9D004650  24060001   ADDIU A2, ZERO, 1
9D004654  00003825   OR A3, ZERO, ZERO
9D004658  240A0014   ADDIU T2, ZERO, 20
9D00465C  10CA0009   BEQ A2, T2, 0x9D004684
9D004660  7C064C20   SEB T1, A2
9D004664  8C6B000C   LW T3, 12(V1)
9D004668  8C680008   LW T0, 8(V1)
9D00466C  24C60001   ADDIU A2, A2, 1
9D004670  15600004   BNE T3, ZERO, 0x9D004684
9D004674  24630008   ADDIU V1, V1, 8
9D004678  02E8402B   SLTU T0, S7, T0
9D00467C  5100FFF7   BEQL T0, ZERO, 0x9D00465C
9D004680  24070001   ADDIU A3, ZERO, 1
9D004684  54E00001   BNEL A3, ZERO, 0x9D00468C
9D004688  A3A90012   SB T1, 18(SP)
9D00468C  83B50012   LB S5, 18(SP)
9D004690  02A5182A   SLT V1, S5, A1
9D004694  10600003   BEQ V1, ZERO, 0x9D0046A4
9D004698  00000000   NOP
9D00469C  A3A50012   SB A1, 18(SP)
9D0046A0  00A0A825   OR S5, A1, ZERO
9D0046A4  10800005   BEQ A0, ZERO, 0x9D0046BC
9D0046A8  83A30012   LB V1, 18(SP)
9D0046AC  30430003   ANDI V1, V0, 3
9D0046B0  54600001   BNEL V1, ZERO, 0x9D0046B8
9D0046B4  2484FFFF   ADDIU A0, A0, -1
9D0046B8  83A30012   LB V1, 18(SP)
9D0046BC  0064282A   SLT A1, V1, A0
9D0046C0  10A00002   BEQ A1, ZERO, 0x9D0046CC
9D0046C4  00009825   OR S3, ZERO, ZERO
9D0046C8  00839823   SUBU S3, A0, V1
9D0046CC  30430008   ANDI V1, V0, 8
9D0046D0  30460002   ANDI A2, V0, 2
9D0046D4  AFA30018   SW V1, 24(SP)
9D0046D8  30430001   ANDI V1, V0, 1
9D0046DC  30420004   ANDI V0, V0, 4
9D0046E0  10400071   BEQ V0, ZERO, 0x9D0048A8
9D0046E4  00000000   NOP
9D0046E8  10C0006B   BEQ A2, ZERO, 0x9D004898
9D0046EC  2404002B   ADDIU A0, ZERO, 43
9D0046F0  2402002D   ADDIU V0, ZERO, 45
9D0046F4  02802825   OR A1, S4, ZERO
9D0046F8  0043200B   MOVN A0, V0, V1
9D0046FC  0F402052   JAL fputc
9D004700  00000000   NOP
9D004704  2403FFFF   ADDIU V1, ZERO, -1
9D004708  54430001   BNEL V0, V1, 0x9D004710
9D00470C  26100001   ADDIU S0, S0, 1
9D004710  12600080   BEQ S3, ZERO, 0x9D004914
9D004714  3C029D01   LUI V0, -25343
9D004718  02802825   OR A1, S4, ZERO
9D00471C  0F402052   JAL fputc
9D004720  24040030   ADDIU A0, ZERO, 48
9D004724  2403FFFF   ADDIU V1, ZERO, -1
9D004728  54430001   BNEL V0, V1, 0x9D004730
9D00472C  26100001   ADDIU S0, S0, 1
9D004730  1000FFF7   BEQ ZERO, ZERO, 0x9D004710
9D004734  2673FFFF   ADDIU S3, S3, -1
9D004738  1000FF9A   BEQ ZERO, ZERO, 0x9D0045A4
9D00473C  24130001   ADDIU S3, ZERO, 1
9D004740  0F402052   JAL fputc
9D004744  24040020   ADDIU A0, ZERO, 32
9D004748  545E0001   BNEL V0, FP, 0x9D004750
9D00474C  26100001   ADDIU S0, S0, 1
9D004750  26B5FFFF   ADDIU S5, S5, -1
9D004754  16BEFFFA   BNE S5, FP, 0x9D004740
9D004758  02802825   OR A1, S4, ZERO
9D00475C  10000007   BEQ ZERO, ZERO, 0x9D00477C
9D004760  241EFFFF   ADDIU FP, ZERO, -1
9D004764  82E40000   LB A0, 0(S7)
9D004768  02802825   OR A1, S4, ZERO
9D00476C  0F402052   JAL fputc
9D004770  26F70001   ADDIU S7, S7, 1
9D004774  545E0001   BNEL V0, FP, 0x9D00477C
9D004778  26100001   ADDIU S0, S0, 1
9D00477C  02601025   OR V0, S3, ZERO
9D004780  1440FFF8   BNE V0, ZERO, 0x9D004764
9D004784  2673FFFF   ADDIU S3, S3, -1
9D004788  8FA20018   LW V0, 24(SP)
9D00478C  1040FF0F   BEQ V0, ZERO, 0x9D0043CC
9D004790  2413FFFF   ADDIU S3, ZERO, -1
9D004794  26B5FFFF   ADDIU S5, S5, -1
9D004798  12B3FF00   BEQ S5, S3, 0x9D00439C
9D00479C  02202825   OR A1, S1, ZERO
9D0047A0  02802825   OR A1, S4, ZERO
9D0047A4  0F402052   JAL fputc
9D0047A8  24040020   ADDIU A0, ZERO, 32
9D0047AC  5453FFF9   BNEL V0, S3, 0x9D004794
9D0047B0  26100001   ADDIU S0, S0, 1
9D0047B4  1000FFF8   BEQ ZERO, ZERO, 0x9D004798
9D0047B8  26B5FFFF   ADDIU S5, S5, -1
9D0047BC  96470000   LHU A3, 0(S2)
9D0047C0  26490004   ADDIU T1, S2, 4
9D0047C4  000647C3   SRA T0, A2, 31
9D0047C8  00084600   SLL T0, T0, 24
9D0047CC  00061A02   SRL V1, A2, 8
9D0047D0  01031825   OR V1, T0, V1
9D0047D4  30480010   ANDI T0, V0, 16
9D0047D8  7C0738A0   WSBH A3, A3
9D0047DC  1100000B   BEQ T0, ZERO, 0x9D00480C
9D0047E0  A3A30012   SB V1, 18(SP)
9D0047E4  24630001   ADDIU V1, V1, 1
9D0047E8  306300FF   ANDI V1, V1, 255
9D0047EC  2C630002   SLTIU V1, V1, 2
9D0047F0  54600007   BNEL V1, ZERO, 0x9D004810
9D0047F4  A3A60010   SB A2, 16(SP)
9D0047F8  A7A70010   SH A3, 16(SP)
9D0047FC  24130002   ADDIU S3, ZERO, 2
9D004800  27B70010   ADDIU S7, SP, 16
9D004804  1000FF6F   BEQ ZERO, ZERO, 0x9D0045C4
9D004808  01209025   OR S2, T1, ZERO
9D00480C  A3A60010   SB A2, 16(SP)
9D004810  1000FFFB   BEQ ZERO, ZERO, 0x9D004800
9D004814  24130001   ADDIU S3, ZERO, 1
9D004818  27B70012   ADDIU S7, SP, 18
9D00481C  1000FF69   BEQ ZERO, ZERO, 0x9D0045C4
9D004820  24130001   ADDIU S3, ZERO, 1
9D004824  A3A30012   SB V1, 18(SP)
9D004828  1000FF7B   BEQ ZERO, ZERO, 0x9D004618
9D00482C  344200C0   ORI V0, V0, 192
9D004830  24030001   ADDIU V1, ZERO, 1
9D004834  A3A30012   SB V1, 18(SP)
9D004838  00004025   OR T0, ZERO, ZERO
9D00483C  24030001   ADDIU V1, ZERO, 1
9D004840  24070010   ADDIU A3, ZERO, 16
9D004844  00003025   OR A2, ZERO, ZERO
9D004848  24090010   ADDIU T1, ZERO, 16
9D00484C  14690005   BNE V1, T1, 0x9D004864
9D004850  7C035420   SEB T2, V1
9D004854  5500FF8D   BNEL T0, ZERO, 0x9D00468C
9D004858  A3A30012   SB V1, 18(SP)
9D00485C  1000FF8C   BEQ ZERO, ZERO, 0x9D004690
9D004860  83B50012   LB S5, 18(SP)
9D004864  24630001   ADDIU V1, V1, 1
9D004868  14C00004   BNE A2, ZERO, 0x9D00487C
9D00486C  306300FF   ANDI V1, V1, 255
9D004870  02E7302B   SLTU A2, S7, A3
9D004874  10C00005   BEQ A2, ZERO, 0x9D00488C
9D004878  00073702   SRL A2, A3, 28
9D00487C  5500FF83   BNEL T0, ZERO, 0x9D00468C
9D004880  A3AA0012   SB T2, 18(SP)
9D004884  1000FF82   BEQ ZERO, ZERO, 0x9D004690
9D004888  83B50012   LB S5, 18(SP)
9D00488C  24080001   ADDIU T0, ZERO, 1
9D004890  1000FFEE   BEQ ZERO, ZERO, 0x9D00484C
9D004894  00073900   SLL A3, A3, 4
9D004898  1060FF9D   BEQ V1, ZERO, 0x9D004710
9D00489C  02802825   OR A1, S4, ZERO
9D0048A0  1000FF96   BEQ ZERO, ZERO, 0x9D0046FC
9D0048A4  24040020   ADDIU A0, ZERO, 32
9D0048A8  1260000F   BEQ S3, ZERO, 0x9D0048E8
9D0048AC  8FA20018   LW V0, 24(SP)
9D0048B0  1440000D   BNE V0, ZERO, 0x9D0048E8
9D0048B4  02802825   OR A1, S4, ZERO
9D0048B8  24040020   ADDIU A0, ZERO, 32
9D0048BC  AFA30024   SW V1, 36(SP)
9D0048C0  0F402052   JAL fputc
9D0048C4  AFA6001C   SW A2, 28(SP)
9D0048C8  2407FFFF   ADDIU A3, ZERO, -1
9D0048CC  8FA6001C   LW A2, 28(SP)
9D0048D0  10470002   BEQ V0, A3, 0x9D0048DC
9D0048D4  8FA30024   LW V1, 36(SP)
9D0048D8  26100001   ADDIU S0, S0, 1
9D0048DC  2673FFFF   ADDIU S3, S3, -1
9D0048E0  1660FFF5   BNE S3, ZERO, 0x9D0048B8
9D0048E4  02802825   OR A1, S4, ZERO
9D0048E8  10C0000D   BEQ A2, ZERO, 0x9D004920
9D0048EC  2404002B   ADDIU A0, ZERO, 43
9D0048F0  2402002D   ADDIU V0, ZERO, 45
9D0048F4  02802825   OR A1, S4, ZERO
9D0048F8  0043200B   MOVN A0, V0, V1
9D0048FC  0F402052   JAL fputc
9D004900  00000000   NOP
9D004904  2403FFFF   ADDIU V1, ZERO, -1
9D004908  54430001   BNEL V0, V1, 0x9D004910
9D00490C  26100001   ADDIU S0, S0, 1
9D004910  3C029D01   LUI V0, -25343
9D004914  24428988   ADDIU V0, V0, -30328
9D004918  10000020   BEQ ZERO, ZERO, 0x9D00499C
9D00491C  AFA2001C   SW V0, 28(SP)
9D004920  1060FFFC   BEQ V1, ZERO, 0x9D004914
9D004924  3C029D01   LUI V0, -25343
9D004928  02802825   OR A1, S4, ZERO
9D00492C  1000FFF3   BEQ ZERO, ZERO, 0x9D0048FC
9D004930  24040020   ADDIU A0, ZERO, 32
9D004934  13C2002D   BEQ FP, V0, 0x9D0049EC
9D004938  00153080   SLL A2, S5, 2
9D00493C  240200C0   ADDIU V0, ZERO, 192
9D004940  17C20011   BNE FP, V0, 0x9D004988
9D004944  83A40012   LB A0, 18(SP)
9D004948  8FA3001C   LW V1, 28(SP)
9D00494C  001510C0   SLL V0, S5, 3
9D004950  02E02025   OR A0, S7, ZERO
9D004954  00621021   ADDU V0, V1, V0
9D004958  8C460000   LW A2, 0(V0)
9D00495C  8C470004   LW A3, 4(V0)
9D004960  0F401B61   JAL __udivdi3
9D004964  00002825   OR A1, ZERO, ZERO
9D004968  00402025   OR A0, V0, ZERO
9D00496C  2406000A   ADDIU A2, ZERO, 10
9D004970  00003825   OR A3, ZERO, ZERO
9D004974  0F401A63   JAL __umoddi3
9D004978  00602825   OR A1, V1, ZERO
9D00497C  24420030   ADDIU V0, V0, 48
9D004980  A3A20012   SB V0, 18(SP)
9D004984  83A40012   LB A0, 18(SP)
9D004988  0F402052   JAL fputc
9D00498C  02802825   OR A1, S4, ZERO
9D004990  2403FFFF   ADDIU V1, ZERO, -1
9D004994  54430001   BNEL V0, V1, 0x9D00499C
9D004998  26100001   ADDIU S0, S0, 1
9D00499C  26B5FFFF   ADDIU S5, S5, -1
9D0049A0  2402FFFF   ADDIU V0, ZERO, -1
9D0049A4  16A2FFE3   BNE S5, V0, 0x9D004934
9D0049A8  24020080   ADDIU V0, ZERO, 128
9D0049AC  8FA20018   LW V0, 24(SP)
9D0049B0  1040FE7A   BEQ V0, ZERO, 0x9D00439C
9D0049B4  02202825   OR A1, S1, ZERO
9D0049B8  5260FE79   BEQL S3, ZERO, 0x9D0043A0
9D0049BC  80A40000   LB A0, 0(A1)
9D0049C0  2415FFFF   ADDIU S5, ZERO, -1
9D0049C4  02802825   OR A1, S4, ZERO
9D0049C8  0F402052   JAL fputc
9D0049CC  24040020   ADDIU A0, ZERO, 32
9D0049D0  54550001   BNEL V0, S5, 0x9D0049D8
9D0049D4  26100001   ADDIU S0, S0, 1
9D0049D8  2673FFFF   ADDIU S3, S3, -1
9D0049DC  5660FFFA   BNEL S3, ZERO, 0x9D0049C8
9D0049E0  02802825   OR A1, S4, ZERO
9D0049E4  1000FE6D   BEQ ZERO, ZERO, 0x9D00439C
9D0049E8  02202825   OR A1, S1, ZERO
9D0049EC  02E02025   OR A0, S7, ZERO
9D0049F0  0F4023EE   JAL __lshrdi3
9D0049F4  00002825   OR A1, ZERO, ZERO
9D0049F8  8FA30020   LW V1, 32(SP)
9D0049FC  3042000F   ANDI V0, V0, 15
9D004A00  00621021   ADDU V0, V1, V0
9D004A04  1000FFDE   BEQ ZERO, ZERO, 0x9D004980
9D004A08  90420000   LBU V0, 0(V0)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/XC-libs/htc/src/ctypef.c  ----
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0090C4  3C039D01   LUI V1, -25343
9D0090C8  246385C5   ADDIU V1, V1, -31291
9D0090CC  00831821   ADDU V1, A0, V1
9D0090D0  90630000   LBU V1, 0(V1)
9D0090D4  30630001   ANDI V1, V1, 1
9D0090D8  10600002   BEQ V1, ZERO, 0x9D0090E4
9D0090DC  00801025   OR V0, A0, ZERO
9D0090E0  24820020   ADDIU V0, A0, 32
9D0090E4  03E00008   JR RA
9D0090E8  00000000   NOP
9D0090EC  3C039D01   LUI V1, -25343
9D0090F0  246385C5   ADDIU V1, V1, -31291
9D0090F4  00831821   ADDU V1, A0, V1
9D0090F8  90630000   LBU V1, 0(V1)
9D0090FC  30630002   ANDI V1, V1, 2
9D009100  10600002   BEQ V1, ZERO, 0x9D00910C
9D009104  00801025   OR V0, A0, ZERO
9D009108  2482FFE0   ADDIU V0, A0, -32
9D00910C  03E00008   JR RA
9D009110  00000000   NOP
9D0091E8  3C029D01   LUI V0, -25343
9D0091EC  244285C5   ADDIU V0, V0, -31291
9D0091F0  00442021   ADDU A0, V0, A0
9D0091F4  90820000   LBU V0, 0(A0)
9D0091F8  03E00008   JR RA
9D0091FC  30420007   ANDI V0, V0, 7
9D009200  3C029D01   LUI V0, -25343
9D009204  244285C5   ADDIU V0, V0, -31291
9D009208  00442021   ADDU A0, V0, A0
9D00920C  90820000   LBU V0, 0(A0)
9D009210  03E00008   JR RA
9D009214  30420003   ANDI V0, V0, 3
9D009218  3C029D01   LUI V0, -25343
9D00921C  244285C5   ADDIU V0, V0, -31291
9D009220  00442021   ADDU A0, V0, A0
9D009224  90820000   LBU V0, 0(A0)
9D009228  03E00008   JR RA
9D00922C  30420020   ANDI V0, V0, 32
9D009230  3C029D01   LUI V0, -25343
9D009234  244285C5   ADDIU V0, V0, -31291
9D009238  00442021   ADDU A0, V0, A0
9D00923C  90820000   LBU V0, 0(A0)
9D009240  03E00008   JR RA
9D009244  30420004   ANDI V0, V0, 4
9D009248  3C029D01   LUI V0, -25343
9D00924C  244285C5   ADDIU V0, V0, -31291
9D009250  00442021   ADDU A0, V0, A0
9D009254  90820000   LBU V0, 0(A0)
9D009258  03E00008   JR RA
9D00925C  30420017   ANDI V0, V0, 23
9D009260  3C029D01   LUI V0, -25343
9D009264  244285C5   ADDIU V0, V0, -31291
9D009268  00442021   ADDU A0, V0, A0
9D00926C  90820000   LBU V0, 0(A0)
9D009270  03E00008   JR RA
9D009274  30420002   ANDI V0, V0, 2
9D009278  3C029D01   LUI V0, -25343
9D00927C  244285C5   ADDIU V0, V0, -31291
9D009280  00442021   ADDU A0, V0, A0
9D009284  80820000   LB V0, 0(A0)
9D009288  03E00008   JR RA
9D00928C  30420097   ANDI V0, V0, 151
9D009290  3C029D01   LUI V0, -25343
9D009294  244285C5   ADDIU V0, V0, -31291
9D009298  00442021   ADDU A0, V0, A0
9D00929C  90820000   LBU V0, 0(A0)
9D0092A0  03E00008   JR RA
9D0092A4  30420010   ANDI V0, V0, 16
9D0092A8  3C029D01   LUI V0, -25343
9D0092AC  244285C5   ADDIU V0, V0, -31291
9D0092B0  00442021   ADDU A0, V0, A0
9D0092B4  80820000   LB V0, 0(A0)
9D0092B8  03E00008   JR RA
9D0092BC  30420088   ANDI V0, V0, 136
9D0092C0  3C029D01   LUI V0, -25343
9D0092C4  244285C5   ADDIU V0, V0, -31291
9D0092C8  00442021   ADDU A0, V0, A0
9D0092CC  90820000   LBU V0, 0(A0)
9D0092D0  03E00008   JR RA
9D0092D4  30420001   ANDI V0, V0, 1
9D0092D8  3C029D01   LUI V0, -25343
9D0092DC  244285C5   ADDIU V0, V0, -31291
9D0092E0  00442021   ADDU A0, V0, A0
9D0092E4  90820000   LBU V0, 0(A0)
9D0092E8  03E00008   JR RA
9D0092EC  30420044   ANDI V0, V0, 68
9D009320  03E00008   JR RA
9D009324  2C820080   SLTIU V0, A0, 128
9D009328  03E00008   JR RA
9D00932C  3082007F   ANDI V0, A0, 127
9D009330  03E00008   JR RA
9D009334  24820020   ADDIU V0, A0, 32
9D009338  03E00008   JR RA
9D00933C  2482FFE0   ADDIU V0, A0, -32
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB25-JOB1/build-Linux/XC-libs/htc/src/atoi.c  ------
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D008A28  24050020   ADDIU A1, ZERO, 32
9D008A2C  24030009   ADDIU V1, ZERO, 9
9D008A30  80820000   LB V0, 0(A0)
9D008A34  5045FFFE   BEQL V0, A1, 0x9D008A30
9D008A38  24840001   ADDIU A0, A0, 1
9D008A3C  5043FFFC   BEQL V0, V1, 0x9D008A30
9D008A40  24840001   ADDIU A0, A0, 1
9D008A44  2403002D   ADDIU V1, ZERO, 45
9D008A48  14430008   BNE V0, V1, 0x9D008A6C
9D008A4C  2403002B   ADDIU V1, ZERO, 43
9D008A50  24840001   ADDIU A0, A0, 1
9D008A54  24070001   ADDIU A3, ZERO, 1
9D008A58  3C069D01   LUI A2, -25343
9D008A5C  00001025   OR V0, ZERO, ZERO
9D008A60  24C685C5   ADDIU A2, A2, -31291
9D008A64  10000008   BEQ ZERO, ZERO, 0x9D008A88
9D008A68  2408000A   ADDIU T0, ZERO, 10
9D008A6C  1443FFFA   BNE V0, V1, 0x9D008A58
9D008A70  00003825   OR A3, ZERO, ZERO
9D008A74  1000FFF8   BEQ ZERO, ZERO, 0x9D008A58
9D008A78  24840001   ADDIU A0, A0, 1
9D008A7C  2463FFD0   ADDIU V1, V1, -48
9D008A80  24840001   ADDIU A0, A0, 1
9D008A84  00A31021   ADDU V0, A1, V1
9D008A88  80830000   LB V1, 0(A0)
9D008A8C  00662821   ADDU A1, V1, A2
9D008A90  90A50000   LBU A1, 0(A1)
9D008A94  30A50004   ANDI A1, A1, 4
9D008A98  54A0FFF8   BNEL A1, ZERO, 0x9D008A7C
9D008A9C  70482802   MUL A1, V0, T0
9D008AA0  54E00001   BNEL A3, ZERO, 0x9D008AA8
9D008AA4  00021023   SUBU V0, ZERO, V0
9D008AA8  03E00008   JR RA
9D008AAC  00000000   NOP
